(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var Ozenfant = require('../ozenfant/ozenfant');
var che = require('../shche/shche');
var $ = require('jquery');

var _F = {};

var always = _F.always = (a) => {
	return () => a;
}

var init_if_empty = _F.init_if_empty = function(obj/*key, val, key1, val1, ... */) {
	for(let i  = 1; ;i = i + 2){
		var key = arguments[i];
		var val = arguments[i + 1];
		if(!key) break;

		if(obj[key] === undefined){
			obj[key] = val;
		}
		obj = obj[key];
	}
	return obj;
}


var throttle = _F.throttle = function(thunk, time){
	var is_throttled = false;
	var pending = false;
	return () => {
		if(!is_throttled){
			//console.log('run!');
			thunk();
			is_throttled = true;
			setTimeout(() => {
				is_throttled = false;
				if(pending){
					//console.log('run pending!');
					thunk();
					pending = false;
				}
			}, time);
		} else {
			//console.log('skip!');
			pending = true;
		}
	}
}

var log = () => {};// console.log.bind(console);

var decorate = (fnc, msg) => {
	return function(){
		console.log("@", msg, arguments);
		return fnc.apply(null, arguments);
	}
}

var mk_logger = (a) => {
	return (b) => {
		console.log(a, b);
		return b;
	}
}

var group_by = _F.group_by =  (arr, prop_or_func) => {
	var res = {};
	for(let obj of arr){
		init_if_empty(res, prop_or_func instanceof Function ? prop_or_func(obj) : obj[prop_or_func], []).push(obj);
	}
	return res;
}

var frozen = _F.frozen =  (a) => JSON.parse(JSON.stringify(a));

var id = _F.id = (a) => a;
var ids = _F.ids = function(){
	return arguments;
}

var arr_remove = _F.arr_remove = (arr, el) => {
	var pos = arr.indexOf(el);
	if(pos !== -1){
		arr.splice(pos, 1);
	}
}

var arr_different = _F.arr_different = function(arr1, arr2, cb){
	for(var i in arr1){
		if(arr2[i] === undefined){
			cb(i);
		}
	}
}
var arr_common = _F.arr_common = function(arr1, arr2, cb){
	for(var i in arr1){
		if(arr2[i] !== undefined){
			cb(i);
		}
	}
}

var arr_deltas = _F.arr_deltas = (old_arr, new_arr) => {
	var new_ones = arr_diff(new_arr, old_arr);
	var remove_ones = arr_diff(old_arr, new_arr);
	var changed_ones = new_arr.mapFilter((v, k) => {
		if(old_arr[k] !== v && old_arr[k] !== undefined){
			 return k;
		}
	})
	//console.log('CHANGED ONES', changed_ones);
	var deltas = [].concat(
		 new_ones.map((key) => ['add', key, new_arr[key]]),
		 remove_ones.map((key) => ['remove', key]),
		 changed_ones.map((key) => ['change', key, new_arr[key]])
	)
	return deltas;
}

var arr_fix_keys = _F.arr_fix_keys = (a) => {
	var fixed_arr = [];
	for(let i of a){
		if(i !== undefined){
			fixed_arr.push(i);
		}
	}
	return fixed_arr;
}

var arr_diff = _F.arr_diff = function(a, b){
	var diff = [];
	for(var i in a){
		if(!b[i]) diff.push(i);
	}
	return diff;
}

var second = _F.second = (__, a) => a;

var path_cellname = (a) => a.split('/').pop();

var is_special = (a) => {
	return ((a.indexOf('/') !== -1) || (a.indexOf('|') !== -1) || a === '*' || a[0] === '$'); 
}
var bms = {};
window.bm = {
	start: (branch, tag, id) => {
		init_if_empty(bms, branch, {}, tag, {sum: 0}, 'ids', {}, id, performance.now());
	},
	stop: (branch, tag, id) => {
		bms[branch][tag].ids[id] = performance.now() - bms[branch][tag].ids[id];
	},
	report: function(logger = false){
		if(!logger){
			logger = console.log.bind(console);
		}
		for(let b in bms){
			var branch = bms[b];
			var branch_sum = 0;
			for(let t in branch){
				var tag = branch[t];
				for(var tt in tag.ids){
					var time = tag.ids[tt];
					tag.sum += time;
				}
				branch_sum += tag.sum;
			}
			for(let t in branch){
				var tag = branch[t];
				tag.perc = 100*(tag.sum/branch_sum);
				console.log(t, 'tag sum', tag.sum, 'branch sum', branch_sum, '%', tag.perc);
			}
		}
		console.log(bms);
	}
}

Object.defineProperty(Object.prototype, 'map', {
	enumerable: false,
	writable: true,
	value: function(func, conf){
		var res = {};
		var self = this;
		var exceptions = conf ? conf.except : false;
		for(let key in self){
			if(exceptions && exceptions.indexOf(key) !== -1){
				continue;
			}
			res[key] = func(this[key], key);
		}
		return res;
	}
});
Object.defineProperty(Object.prototype, 'each', {
	enumerable: false,
    configurable: false,
	writable: true,
	value: function(func){
		for(var key in this){
			if(func(this[key], key) === false){
				break;
			}
		}
	}
});
Object.defineProperty(Object.prototype, 'eachKey', {
	enumerable: false,
    configurable: false,
	writable: true,
	value: function(func){
		for(var key in this){
			if(func(key) === false){
				break;
			}
		}
	}
});
Object.defineProperty(Array.prototype, 'mapFilter', {
	enumerable: false,
    configurable: false,
	writable: true,
	value: function(func){
		var res = [];
		for(var key in this){
			var a;
			if((a = func(this[key], key)) !== undefined){
				res.push(a);
			}
		}
		return res;
	}
});
Object.defineProperty(Array.prototype, 'unique', {
    enumerable: false,
    configurable: false,
    writable: true,
    value: function() {
        var a = this.concat();
        for(var i=0; i<a.length; ++i) {
            for(var j=i+1; j<a.length; ++j) {
                if(a[i] === a[j])
                    a.splice(j--, 1);
            }
        }
        return a;
    }
});

var copy = _F.copy = function(from, to){
	for(var i in from){
		to.push(from[i]);
	}
}
var kcopy = _F.kcopy = function(from, to){
	for(let i in from){
		to[i] = from[i];
	}
}
var cell_listening_type = function(str){
	if(!str.match) debugger;
	var m = str.match(/^(\:|\-|\=)/);
	return [{
		//':': 'change', 
		'=': 'skip_same', 
		'-': 'passive', 
		'val': 'normal'
	}[m ? m[1] : 'val'], str.replace(/^(\:|\-|\=)/, '')];
}
var get_real_cell_name = function(str){
	return str[0] === '-' ? str.slice(1) : str;
}

var real_cell_name = (str) => str.replace(/^(\:|\-|\=)/, '');

var is_def = (a) => {
	return (a !== undefined) && (a !== Firera.undef);
}

var PackagePool = function(proto = {}, app_id){
	this.app_id = app_id;
	this.cellMatchers = Object.assign({}, proto.cellMatchers);
	this.predicates = Object.assign({}, proto.predicates);
	this.eachHashMixin = Object.assign({}, proto.eachHashMixin);
}
PackagePool.prototype.load = function(pack){
	if(typeof pack === 'string'){
		if(!Firera.packagesAvailable[pack]){
			console.error('Package not found!', pack);
			return;
		}
		pack = Firera.packagesAvailable[pack];
	}
	kcopy(pack.cellMatchers, this.cellMatchers);
	kcopy(pack.predicates, this.predicates);
	if(pack.eachHashMixin){
		// update the mixin for each hash created
		Object.assign(this.eachHashMixin, pack.eachHashMixin);
	}
	if(pack.onHashCreated){
		init_if_empty(onHashCreatedStack, this.app_id, []);
		onHashCreatedStack[this.app_id].push(pack.onHashCreated);
	}
}

var LinkManager = function(app){
	this.app = app;
	this.links = [];
	this.linkStruct = {};
	this.workingLinks = {};
	this.pointers = {};
	this.doubleAsterisk = {};
	this.pathToId = {};
};

LinkManager.prototype.onNewHashAdded = function(parent_hash_id, child_id){
	var child_path = this.app.getGrid(child_id).path
	//console.log('new hash added to', parent_hash_id, 'as', child_id, child_path);
	// add doubleAsterisk links
	for(let path in this.doubleAsterisk){
		if(child_path.indexOf(path) === 0){
			// it's a child of master hash
			for(var cellname in this.doubleAsterisk[path]){
				this.addWorkingLink(child_id, cellname, this.pathToId[path], '**/' + cellname, '**', child_path);
			}
		}
	}
	//
	for(var link_id in this.pointers[parent_hash_id]){
		this.actualizeLink(link_id, child_id);
	}
}

LinkManager.prototype.refreshPointers = function(link_id){
	for(let hash_id in this.pointers){
		var links = this.pointers[hash_id];
		for(let i in links){
			if(links[i] == link_id){
				links.splice(i, 1);
			}
		}
	}
	var data = this.links[link_id];
	for(let pointer of data.pointers){
		init_if_empty(this.pointers, pointer.hash_id, {}, link_id, data.path[pointer.pos]);
		//log('considering pointer', link_id, data.str, pointer);
	}
}

LinkManager.prototype.checkUpdate = function(master_hash_id, master_cell, val){
	if(this.workingLinks[master_hash_id] && this.workingLinks[master_hash_id][master_cell]){
		if(val === undefined){
			val = this.app.getGrid(master_hash_id).get(master_cell);
		}
		if(val === Firera.undef){
			return;
		}
		var lnks = this.workingLinks[master_hash_id][master_cell];
		for(var slave_hash_id in lnks){
			for(var slave_cellname in lnks[slave_hash_id]){
				var cell_val = val;
				if(lnks[slave_hash_id] && lnks[slave_hash_id][slave_cellname]){
					var link_data = lnks[slave_hash_id][slave_cellname];
					if(link_data.link_id === '**'){
						cell_val = [cell_val, link_data.path];
					} else {
						var data = this.links[link_data.link_id];
						if(data){
							for(var i = data.path.length - 1; i > -1; i--){
								if(data.path[i] === '*'){
									//console.log('A', i, data.path, link_data.path[i+1]);
									cell_val = [link_data.path[i+1], cell_val];
								}
							}
						}
					}
				}
				// the very meaning of this method
				var slave_grid = this.app.getGrid(slave_hash_id);
				if(!slave_grid){
					var lnk = this.links[link_data.link_id];
					log('obsolete link!', lnk);
				} else {
					log('!set', slave_cellname, cell_val);
					slave_grid.set(slave_cellname, cell_val);
				}
			}
		}
	}
	
	
}

LinkManager.prototype.addWorkingLink = function(master_hash_id, master_cellname, slave_hash_id, slave_cellname, link_id, path){
	init_if_empty(this.workingLinks, master_hash_id, {}, master_cellname, {}, slave_hash_id, {}, slave_cellname, {link_id, path});
	//this.app.getGrid(slave_hash_id).set(slave_cellname, val);
	this.app.getGrid(master_hash_id).initIfSideEffectCell(master_cellname);
	this.checkUpdate(master_hash_id, master_cellname);
}

LinkManager.prototype.actualizeLink = function(link_id, first_child_id){
	var gridname, current_pointer;
	var data = this.links[link_id];
	var curr_hash_id = data.hash_id, curr_hash;
	
	var move_further = (curr_hash_id, i, start_pos, path) => {
		if(!path) debugger;
		path = path.slice();
		var curr_hash = this.app.getGrid(curr_hash_id);
		if(path.indexOf(curr_hash.name) !== -1){
			//console.log('hm', path, curr_hash.name);
		} else {
			path.push(curr_hash.name);
		}
		var gridname = data.path[i];
		var next_hash_id;
		if(!data.path[i + 1]){
			//log('~~~ success!', data.str, path);
			// its cellname
			if(!data.pointers[start_pos].fixed){
				data.pointers.splice(start_pos, 1);
			}
			this.addWorkingLink(curr_hash_id, gridname, data.hash_id, data.slave_cellname, link_id, path);
			return;
		}

		if(gridname === '..'){
			// looking for parent
			next_hash_id = curr_hash.parent;
		} else if(gridname === '*'){
			// all children
			if(i === current_pointer.pos){
				if(first_child_id !== undefined) {
					//log('--- checking first child', data.str, link_id, first_child_id);
					move_further(first_child_id, i+1, start_pos, path);
				} else {
					data.pointers[start_pos].fixed = true;
					data.pointers[start_pos].hash_id = curr_hash_id;
					//log('--- what to do then?', link_id, 1, curr_hash.linked_hashes);
					for(var child_name in curr_hash.linked_hashes){
						var child_id = curr_hash.linked_hashes[child_name];
						move_further(child_id, i+1, start_pos, path);
					}
				}
			} else {
				//log('--- remove old pointer', link_id, data.str, i, data.pointers[start_pos].fixed);
				// remove old pointer
				if(!data.pointers[start_pos].fixed){
					data.pointers.splice(start_pos, 1);
				}
				data.pointers.push({
					pos: i,
					hash_id: curr_hash_id,
					fixed: true,
					path
				})
				for(var child_name in curr_hash.linked_hashes){
					var child_id = curr_hash.linked_hashes[child_name];
					move_further(child_id, i+1, start_pos, path);
				}
				return;
			}
		} else {
			if(curr_hash.linked_hashes && (curr_hash.linked_hashes[gridname] !== undefined)){
				next_hash_id = curr_hash.linked_hashes[gridname];
			} else {
				//console.log('_____________ NOT FOUND');
				return;
			}
		}
		if(next_hash_id !== undefined){
			move_further(next_hash_id, i+1, start_pos, path);
		}
	}
	
	for(var pointer_index in data.pointers){
		var current_pointer = data.pointers[pointer_index];
		move_further(
				current_pointer.hash_id, 
				current_pointer.pos, 
				pointer_index, 
				current_pointer.path
		);
	}
	this.refreshPointers(link_id);
}

LinkManager.prototype.initLink = function(hash_id, link, slave_cellname){
	var path = link.split('/');
	if(path.length == 2 && path[0] === '..'){
		/*var curr_hash = this.app.getGrid(hash_id);
		var parent = curr_hash.parent;
		if(parent === undefined) {
			console.log('parent undefined! child', curr_hash);
			return;
		}
		this.addWorkingLink(parent, path[1], curr_hash.id, link);
		//console.log('Simple!', link, parent);
		//ttimer.stop('ilc');
		return;*/
	}
	if(path[0] == '**'){
		if(path.length > 2){
			console.error('You cannot listen to such path', path.join('/'));
			return;
		}
		var cellname = path[1];
		var grid_path = this.app.getGrid(hash_id).path;
		this.pathToId[grid_path] = hash_id;
		init_if_empty(this.doubleAsterisk, grid_path, {}, cellname, true);
		// check already added grids
		this.app.eachChild(hash_id, (child) => {
			this.addWorkingLink(child.id, cellname, hash_id, '**/' + cellname, '**', child.path);
		})
		return;
	}
	if(path[0] == '^^'){
		if(path.length > 2){
			console.error('You cannot listen to such path', path.join('/'));
			return;
		}
		var cellname = path[1];
		this.app.eachParent(hash_id, (hash) => {
			this.addWorkingLink(hash.id, cellname, hash_id, '^^/' + cellname);
		})
		return;
	}
	if(path[0] == ''){
		if(path.length > 2){
			console.error('You cannot listen to such path', path.join('/'));
			return;
		}
		var cellname = path[1];
		var grid_path = this.app.getGrid(hash_id).path;
		this.addWorkingLink(this.app.hashes[1].id, cellname, hash_id, '/' + cellname);
		return;
	}
	var obj = {
		path: path,
		target: path[path.length - 1],
		pointers: [{
			pos: 0,
			path: [],
			hash_id,
			fixed: false,
		}],
		str: link,
		slave_cellname: slave_cellname || link,
		hash_id: hash_id,
		status: null,
	};
	init_if_empty(this.linkStruct, hash_id, {});
	if(this.linkStruct[hash_id][link] == undefined){
		var link_id = this.links.push(obj) - 1;
		this.linkStruct[hash_id][link] = link_id;
		this.actualizeLink(link_id);
	} else {
		this.actualizeLink(this.linkStruct[hash_id][link]);
	}
	//ttimer.stop('ilc');
}



var root_package_pool = new PackagePool();

var apps = [];
var appIds = 0;
var App = function(packages){
	this.id = ++appIds;
	this.packagePool = new PackagePool(root_package_pool, this.id);
	if(packages){
		for(let pack of packages){
			this.packagePool.load(pack);
		}
	}
	this.hashes = {};
	this.hashIds = 0;
	this.linkManager = new LinkManager(this);
};

App.prototype.onChangeFinished = function(cb){
	if(!this.onChangeFinishedStack){
		this.onChangeFinishedStack = [];
	}
	this.onChangeFinishedStack.push(cb);
}
App.prototype.changeFinished = function(){
	if(this.onChangeFinishedStack){
		for(let cb of this.onChangeFinishedStack){
			cb();
		}
	}
}

var noop = function(){
	console.log('Noop is called!');
};
App.prototype.get = function(cell, path){
	return this.root.get(cell, path);
}
App.prototype.getStruct = function(){
	return get_app_struct(this);
}
App.prototype.getVals = function(){
	return get_vals(this.root);
}
App.prototype.getGrid = function(id){
	return this.hashes[id];
}
App.prototype.set = function(cell, val, child){
	this.root.set(cell, val, child);
}
App.prototype.eachChild = function(parent_grid_id, cb){
	var grid = this.getGrid(parent_grid_id);
	for(var l in grid.linked_hashes){
		var child = this.getGrid(grid.linked_hashes[l]);
		cb(child);
		this.eachChild(grid.linked_hashes[l], cb);
	}
}
App.prototype.eachParent = function(grid_id, cb){
	while(grid_id){
		var grid = this.getGrid(grid_id);
		cb(grid);
		grid_id = grid.parent;
	}
}

var cb_prot = {
	cell_parents: function(cell){
		return this.cell_types[cell] ? this.cell_types[cell].parents : [];
	},
	cell_children: function(cell){
		return this.cell_types[cell] ? this.cell_types[cell].children : {};
	}, 
	setLevels: function(){
		var level = 1;
		this.levels = {};
		var max_level = 1;
		var already_set = new Set();
		var pool = [];
		for(let i in this.cell_types){
			if(this.cell_types[i].parents.length === 0){
				this.levels[i] = 1;
				for(var j in this.cell_types[i].children){
					pool.push(j);
					this.setLevelsRec(j, already_set);
				}
			}
		}
		var c = 0;
		while(pool[c]){
			this.setLevelsIterable(pool[c], pool);
			c++;
		}
	},
	setLevelsIterable: function(cellname, pool){
		var max_level = 1;
		for(var cell of this.cell_parents(cellname)){
			cell = real_cell_name(cell);
			if(this.levels[cell] === undefined){
				if(pool.indexOf(cell) === -1){
					this.setLevelsIterable(cell, pool);
				}
			}
			if(this.levels[cell] > max_level){
				max_level = this.levels[cell];
			}
		}
		if(this.levels[cellname]){
			if(max_level + 1 > this.levels[cellname]){
				this.levels[cellname] = max_level + 1;
			}
			return;
		} else {
			this.levels[cellname] = max_level + 1;
		}
		for(var cell in this.cell_children(cellname)){
			if(pool.indexOf(cell) === -1){
				pool.push(cell);
				//this.setLevelsRec(cell, already_set);
			}
		}
	},
	setLevelsRec: function(cellname, already_set){
		var max_level = 1;
		for(var cell of this.cell_parents(cellname)){
			cell = real_cell_name(cell);
			//if(cell[0] === '-') debugger;
			if(this.levels[cell] === undefined){
				//this.setLevelsRec(cell, already_set);
			}
			if(this.levels[cell] > max_level){
				max_level = this.levels[cell];
			}
		}
		if(this.levels[cellname]){
			if(max_level + 1 > this.levels[cellname]){
				this.levels[cellname] = max_level + 1;
			}
			for(var cell in this.cell_children(cellname)){
				if(this.levels[cell] <= this.levels[cellname]){
					already_set.add(cell);
					this.setLevelsRec(cell, already_set);
				}
				/*if(!(already_set.has(cell))){
					log('REC 112');
				}*/
			}
			return;
		} else {
			this.levels[cellname] = max_level + 1;
		}
		//console.log('New level for', cellname, 'is', max_level + 1);
		for(var cell in this.cell_children(cellname)){
			if(!(already_set.has(cell))){
				already_set.add(cell);
				this.setLevelsRec(cell, already_set);
			}
		}
	}
}

App.prototype.parse_cbs = function(a){
	var eachMixin = Object.assign({}, this.packagePool.eachHashMixin);
	var res = Object.create(cb_prot);
	res.plain_base = Object.assign(eachMixin, a); 
	res.side_effects = {};
	res.hashes_to_link = {};
	res.no_args_cells = {};
	
	parse_pb(res, this.packagePool);
	init_if_empty(res.plain_base, '$init', {}, '$name', null);
	res.cell_types = parse_cell_types(res.plain_base);
	res.setLevels();
	return res;
}

App.prototype.loadPackage = function(pack) {
	this.packagePool.load(pack);
}

App.prototype.setHash = function(id, hash){
	this.hashes[id] = hash;
}

App.prototype.createHash = function(type, link_as, free_vals, parent_id) {
	var parent = this.getGrid(parent_id);
	free_vals = parent.init_values[link_as] 
				? Object.assign({}, parent.init_values[link_as], free_vals || {}) 
				: free_vals;
	var parent_path = parent.path;
	var path = (parent_path !== '/' ? parent_path + '/' : '/')  + link_as;
	var child = new Hash(this, type, link_as, free_vals, true, parent_id, path); 
	Firera.hashCreated(this, child.id, child.path, child.parent);
	//child.setLevels();
	return child.id;
}

var show_performance = function(){
	var res = [];
	for(var i = 1; i < arguments.length; ++i){
		res.push(i + ': ' + (arguments[i] - arguments[i - 1]).toFixed(3));
	}
	res.push('Total: ' + (arguments[i - 1] - arguments[0]).toFixed(3));
	return res.join(', ');
}

var add_dynamic_link = (pool, cell, grid, slave_cell, type) => {
	init_if_empty(pool, cell, {}, grid, []);
	var links = pool[cell][grid];
	for(let lnk of links){
		if(lnk.cell_name === slave_cell && lnk.type === type){
			// already exists
			return;
		}
	}
	links.push({
		cell_name: slave_cell,
		type: type
	})
}

var create_provider = (app, self) => {
	return {
		pool: {},
		create: function(self, type, link_as, free_vals){
			var child_id = self.app.createHash(type, link_as, free_vals, self.id);
			init_if_empty(self, 'linked_hashes', {}, link_as, child_id);
			this.set(link_as, child_id);
			this.get(link_as).linked_hashes_provider.set('..', self.id);
			app.linkManager.onNewHashAdded(self.id, child_id);
			return child_id;
		},
		set: function(name, hash_id){
			this.pool[name] = hash_id;
		},
		isLinked: function(name){
			return !!this.get(name);
		},
		get: function(name){
			var id = this.pool[name];
			
			return id ? app.hashes[id] : false;
		},
		remove: function(name){
			var id = this.pool[name];
			delete this.pool[name];
			self.app.hashes[id].set('$remove', true);
			delete self.app.hashes[id];
		},
		setCellValues: function(childName, values){
			this.get(childName).set(values);
		},
		initChild: function(name){
			if(!this.get(name).init){
				console.log('strange', this, name);
			}
			this.get(name).init();
		},
		unlinkChildCells: function(name){
			var hsh = this.get(name);
			if(!hsh){
				//console.warn('removing unexisting hash!', name);
				return;
			}
			this.remove(name);
		},
		getLinkedHashCellValue: function(hashname, cellname){
			var hash = this.get(hashname);
			return hash ? hash.cell_value(cellname) : false;
		},
		linkAnyTwoCells: function(slave, master){
			if(slave.indexOf('/') !== -1){
				app.linkManager.initLink(self.id, slave);
			} else {
				add_dynamic_link(self.dynamic_cell_links, slave, '__self', master, 'dynamic');
			}
		},
	}
}

var Hash = function(app, parsed_pb_name, name, free_vals, init_later, parent_id, path){
	var self = this;
	var id = ++app.hashIds;
	//////////////////////////
	//bm.start('init', '2', id);
	this.path = path;
	app.setHash(id, this);
	this.id = id;
	this.parent = parent_id;
	this.app = app;
	this.name = name || '__root';
	var parsed_pb;
	this.parsed_pb_name = parsed_pb_name;
	if(typeof parsed_pb_name === 'string'){
		parsed_pb = app.cbs[parsed_pb_name];
	} else {
		var key = '$$$_@@@_tag';
		if(parsed_pb_name[key]){
			parsed_pb = parsed_pb_name[key];
		} else {
			parsed_pb = app.parse_cbs(parsed_pb_name);
			parsed_pb_name[key] = parsed_pb;
		}
	}
	if(!parsed_pb){
		console.error('Cannot find hash to parse:', parsed_pb_name);
		return;
	}
	this.cell_types = parsed_pb.cell_types;
	this.side_effects = parsed_pb.side_effects;
	this.hashes_to_link = parsed_pb.hashes_to_link;
	this.plain_base = Object.create(parsed_pb.plain_base);
	this.link_chains = Object.create(parsed_pb.link_chains || {});
	this.levels = Object.create(parsed_pb.levels);
	//this.setLevels();
	this.linked_hashes_provider = create_provider(app, self);
	this.linked_hashes = {};
	// for "closure" cell type
	this.cell_funcs = {};
	this.dirtyCounter = {};
	this.dynamic_cell_links = {};
	this.dynamic_cells_props = {};
	if(this.cell_types['*']){
		/*var omit_list = this.all_cell_children('*');
		for(let cell in this.cell_types){
			if(omit_list.indexOf(cell) === -1 && can_be_set_to_html(cell, this.app)){
				add_dynamic_link(this.dynamic_cell_links, cell, '__self', '*', '');
			}
		}*/
	}
	this.cell_values = Object.assign({}, this.plain_base.$init || {});
	this.init_values = Object.assign({}, this.plain_base.$init, free_vals || {});
	//////////////////////////
	//bm.stop('init', '2', id);
	//bm.start('init', '1', id);
	this.hashes_to_link.each((hash_name, link_as) => this.linkChild(hash_name, link_as));
	// @todo: refactor, make this set in one step
	//console.log('Setting $init values', this.init_values);
	//////////////////////////
	//bm.stop('init', '1', id);
	//bm.start('init', '3', id);

	if(this.plain_base.$init && !init_later){
		this.init();
	}
	//////////////////////////
	//bm.stop('init', '3', id);
	//bm.start('init', '4', id);
	if(parsed_pb.no_args_cells){
		//this.set(parsed_pb.no_args_cells);
		var min_level = Number.POSITIVE_INFINITY;
		var cell_vals = {};
		this.updateTree(parsed_pb.no_args_cells, false, true);
	}
	//////////////////////////
	//bm.stop('init', '4', id);
	//bm.start('init', '5', id);
	if(this.link_chains){
		for(let link in this.link_chains){
			this.initLinkChain(link);
		}
	}
	//////////////////////////
	//bm.stop('init', '5', id);
}

Hash.prototype.changesFinished = function(){
	this.app.changeFinished();
}

Hash.prototype.initIfSideEffectCell = function(cell){
	if(!this.cellExists(cell) && unusual_cell(cell)){
		parse_cellname(cell, this, 'getter', this.app.packagePool, this);
		this.cell_types = parse_cell_types(this.plain_base);
		var matched = findMatcher(cell, this.app.packagePool);
		if(matched){
			this.compute(cell);
		}
		//this.setLevels();
	}
}

Hash.prototype.hasChild = function(name){
	return this.linked_hashes && this.linked_hashes[name];
} 

Hash.prototype.init = function(){
	for(let cell in this.init_values){
		parse_cellname(cell, this, 'setter', this.app.packagePool);
	}
	this.set(this.init_values);
}
Hash.prototype.updateChildFreeValues = function(childName, values){
	this.linked_hashes_provider.setCellValues(childName, values);
}

Hash.prototype.initLinkChain = function(link){
	this.app.linkManager.initLink(this.id, link);
}

Hash.prototype.linkHash = function(cellname, val){
	//log('RUNNING SIDE EFFECT', this, val); 
	var hash, link1, link2, free_vals;
	cellname = cellname.replace("$child_", "");
	if(val instanceof Array){
		// it's hash and link
		hash = val[0];
		link1 = val[1];
		link2 = val[2];
		free_vals = val[3] || {};
	} else {
		hash = val;
	}
	if(!hash){
		console.warn('Trying to link undefined hash:', hash);
		return;
	}
	var child_id = this.linkChild(hash, cellname, free_vals);
	if(link1){
		//console.info('Linking by link1 hash', link1);
		link1.each((his_cell, my_cell) => {
			this.app.linkManager.initLink(this.id, cellname + '/' + his_cell, my_cell);
		})
	}
	if(link2){
		//console.info('Linking by link2 hash', link2);
		link2.each((his_cell, my_cell) => {
			this.app.linkManager.initLink(child_id, '../' + his_cell, my_cell);
		})
	}
}

Hash.prototype.getChild = function(link_as){
	return this.app.getGrid(this.linked_hashes_provider.pool[link_as]);
} 

Hash.prototype.linkChild = function(type, link_as, free_vals){
	if(this.linked_hashes_provider.isLinked(link_as)){
		var pb = this.getChild(link_as).parsed_pb_name;
		if(pb === type){
			this.getChild(link_as).set(free_vals);
			return this.linked_hashes_provider.pool[link_as];
		} else {
			this.unlinkChild(link_as);
		}
	}
	var id = this.linked_hashes_provider.create(this, type, link_as, free_vals);
	this.linked_hashes_provider.initChild(link_as);
	return id;
}

Hash.prototype.cellExists = function(cellname){
	return this.cell_types[cellname] !== undefined;
}

Hash.prototype.unlinkChild = function(link_as){
	this.linked_hashes_provider.unlinkChildCells(link_as);
}

Hash.prototype.doRecursive = function(func, cell, skip, parent_cell, already_counted_cells = {}, run_async){
	var cb = this.doRecursive.bind(this, func);
	if(!skip) {
		//console.log('--Computing cell', this.cell_type(cell));
		func(cell, parent_cell);
		already_counted_cells[cell] = true;
	} else {
		//throw new Error('Skipping!', arguments);
	}
	if(this.cell_has_type(cell, 'async') && !run_async) {
		//console.log('Skipping counting children of async');
		return;
	}
	this.cell_children(cell).eachKey((child_cell_name) => {
		if(!already_counted_cells[child_cell_name]){
			already_counted_cells[child_cell_name] = true,
			this.doRecursive(func, child_cell_name, false, cell, Object.create(already_counted_cells));
		} else {
			//console.error('Circular dependency found!', child_cell_name, already_counted_cells, this);
		}
	});
}

var toLowerCase = (a) => a.toLowerCase();

var split_camelcase = (str) => {
	if(!str.match) return false;
	var first = str.match(/^([a-z0-9]*)/);
	var others = (str.match(/[A-Z][a-z0-9]*/g) || []).map(toLowerCase);
	return [first[1], ...others];
}

Hash.prototype.compute = function(cell, parent_cell_name){
	log('compute', cell);
	var real_cell_name = this.real_cell_name(cell);
	var val;
	var props = this.cell_type_props(cell);
	var parents = this.cell_parents(real_cell_name);
	var dynamic = parents.indexOf(parent_cell_name) == -1;
	var func = this.cell_func(real_cell_name);
	var arg_num = this.cell_arg_num(real_cell_name);
	if(props.dynamic && dynamic){
		var real_props = this.dynamic_cells_props[cell];
		func = real_props.func;
		parents = real_props.parents;
		props = {dynamic: true};
		arg_num = parents.length;
		//console.log('computing dynamic cell val', parents);
	}
	// getting func
	if(props.hasOwnProperty('map') && props.map){
		if(!parent_cell_name){
			throw new Error('Cannot calculate map cell value - no parent cell name provided!');
		}
		if(func[parent_cell_name] === undefined){
			throw new Error('Cannot compute MAP cell: parent cell func undefined or not function!');
		}
		func = func[parent_cell_name];
	} else if(props.closure){
		if(!this.cell_funcs[real_cell_name]){
			var new_func = func();
			//console.log('Setting closure function', new_func);
			this.cell_funcs[real_cell_name] = new_func;
		}
		func = this.cell_funcs[real_cell_name];
	}
	// getting arguments
	var args;
	switch(arg_num){
		case 1:
			args = [this.cell_value(get_real_cell_name(parents[0]))];
		break;
		case 2:
			args = [
				this.cell_value(get_real_cell_name(parents[0])),
				this.cell_value(get_real_cell_name(parents[1]))
			];
		break;
		case 3:
			args = [
				this.cell_value(get_real_cell_name(parents[0])),
				this.cell_value(get_real_cell_name(parents[1])),
				this.cell_value(get_real_cell_name(parents[2]))
			];
		break;
		case 4:
			args = [
				this.cell_value(get_real_cell_name(parents[0])),
				this.cell_value(get_real_cell_name(parents[1])),
				this.cell_value(get_real_cell_name(parents[2])),
				this.cell_value(get_real_cell_name(parents[3]))
			];
		break;
		default:
			var args = this.cell_parents(real_cell_name).map((parent_cell_name) => {
				return this.cell_value(get_real_cell_name(parent_cell_name))
			});
		break;
	}
	if(props.funnel){
		if(!parent_cell_name){
			throw new Error('Cannot calculate map cell value - no parent cell name provided!');
		}
		parent_cell_name = get_real_cell_name(parent_cell_name);
		args = [parent_cell_name, this.cell_value(parent_cell_name)];
	}
	if(props.nested){
		args.unshift((cell, val) => {
			var cell_to_update = real_cell_name + '.' + cell;
			this.set_cell_value(cell_to_update, val);
			this.doRecursive(this.compute.bind(this), cell_to_update, true);
		});
	} else if(props.async){
		args.unshift((val) => {
			//console.log('ASYNC callback called!',val); 
			this.set_cell_value(real_cell_name, val);
			this.doRecursive(this.compute.bind(this), real_cell_name, true, null, {}, true);
			this.changesFinished();
		});
	}
	/*for(var n of args){
		if(n === Firera.undef){
			//console.log('UNDEF FOUND!', cell);
			return;
		}
	}*/
	// counting value
	if(props.hasOwnProperty('map') && props.map){
		var val = func instanceof Function 
					  ? func(this.cell_value(get_real_cell_name(parent_cell_name)))
					  : func;
	} else {
		var val;
		switch(args.num){
			case 1:
				val = func(args[0]);
			break;
			case 2:
				val = func(args[0], args[1]);
			break;
			case 3:
				val = func(args[0], args[1], args[2]);
			break;
			default: 
				val = func.apply(null, args);
			break;
		}
	}
	if(val === Firera.noop){
		//console.log('skipping update');
		return Firera.noop;
	}
	if(props.async || props.nested){
		
	} else if(props.dynamic && !dynamic) {
		var fs = parse_arr_funcstring(val, cell, {plain_base:{}}, this.app.packagePool);
		parse_cell_type(cell, fs, this.dynamic_cells_props, []);
		parents = this.dynamic_cells_props[cell].parents;
		for(let parent_cell of parents){
			this.linked_hashes_provider.linkAnyTwoCells(parent_cell, cell);
		}
		this.setLevel(cell, parents.concat(this.cell_parents(real_cell_name)));
		this.compute(cell);
	} else {
		this.set_cell_value(real_cell_name, val);
	}
}

Hash.prototype.get = function(cell, child){
	if(child){
		// setting value for some linked child hash
		//log('Trying to set', child, cell, val);
		var path = child.split('/');
		var childname = path[0];
		var child = this.linked_hashes_provider.get(childname);
		if(!child){
			console.warn('Cannot get - no such path', path);
			return;
		}
		var child_path = path[1] ? path.slice(1).join('/') : undefined;
		return child.get(cell, child_path);
	} else {
		var val = this.cell_values[cell];
		return val === undefined ? (this.cell_values.hasOwnProperty(cell) ? val : Firera.undef) : val;
	}
}

Hash.prototype.setLevel = function(cell, parents){
	//console.log('got parents', parents);
	var max_level = 0;
	for(let prnt of parents){
		var lvl = this.levels[prnt];
		if(lvl > max_level){
			max_level = lvl;
		}
	}
	this.levels[cell] = max_level + 1;
	//console.log('got max level', max_level);
}

Hash.prototype.updateTree = function(cells, no_args = false, compute = false){
	var set = Object.keys(cells);
	var start_level = Number.POSITIVE_INFINITY;
	var levels = {};
	for(let cell in cells){
		if(compute){
			this.compute(cell);
		}
		if(!no_args){
			var val1 = compute ? this.cell_values[cell] : cells[cell];
			this.set_cell_value(cell, val1);
		}
		var lvl = this.levels[cell];
		if(lvl < start_level){
			start_level = this.levels[cell];
		}
		if(!levels[lvl]){
			levels[lvl] = new Set();
		}
		levels[lvl].add(cell);
	}
	var already = new Set();
	var x = start_level;
	var parents = {};
	while(levels[x] !== undefined){
		for(let cell of levels[x]){
			var skip = false;
			var needed_lvl = x+1;
			var children = this.cell_children(cell);
			var ct = this.cell_type(cell);
			if(
				!this.cell_has_type(cell, 'free')
				&& (cells[cell] === undefined || no_args)
				&& this.cell_types[cell].func
			){
				var res = this.compute(cell, parents[cell]);
				if(res === Firera.noop){
					skip = true;
				}
			}
			if(this.cell_has_type(cell, 'async') || skip) {
				continue;
			}
			for(var child in children){
				var lvl = this.levels[child];
				if(!levels[lvl]){
					levels[lvl] = new Set();
				}
				if(!cells[child]){
					levels[lvl].add(child);
				}
				parents[child] = cell;
				for(var j = lvl - 1; j > x; j--){
					if(!levels[j]){
						levels[j] = new Set();
					}
				}
				if(already.has(child)){
					console.log('skipping2', child);
					//continue;
				}
			}
		}
		x++;
	}
}

Hash.prototype.set = function(cells, val, child, no_args){
	if(child){
		// setting value for some linked child hash
		var path = child.split('/');
		var childname = path[0];
		var child = this.linked_hashes_provider.get(childname);
		if(!child){
			console.warn('Cannot set - no such path', path);
			return;
		}
		var child_path = path[1] ? path.slice(1).join('/') : undefined;
		child.set(cells, val, child_path);
		return;
	}
	if(!(cells instanceof Object)){
		var a = {};
		a[cells] = val;
		cells = a;
	}
	this.updateTree(cells, no_args);
} 

Hash.prototype.set2 = function(cell, val, child){
	if(child){
		// setting value for some linked child hash
		//log('Trying to set', child, cell, val);
		var path = child.split('/');
		var childname = path[0];
		var child = this.linked_hashes_provider.get(childname);
		if(!child){
			console.warn('Cannot set - no such path', path);
			return;
		}
		var child_path = path[1] ? path.slice(1).join('/') : undefined;
		child.set(cell, val, child_path);
		return;
	}
	if(cell instanceof Object){
		// batch update
		//console.log('Computing batch update', cell);
		cell.eachKey(
			(key) => {
				this.force_set(key, cell[key], true);
				this.doRecursive((cell) => {
					this.dirtyCounter[cell] 
						? this.dirtyCounter[cell]++ 
						: (this.dirtyCounter[cell] = 1);
				}, key)
			}
		);
		//console.log('dirty counter', this.dirtyCounter);
		cell.eachKey(this.doRecursive.bind(this, (cell2, parent_cell_name) => {
			if(--this.dirtyCounter[cell2] === 0 && cell[cell2] === undefined){
				//console.log('Computing after batch change', cell2, cell);
				this.compute(cell2, parent_cell_name);
			//} else {
				//console.log('Cell ', cell2, 'is not ready', this.dirtyCounter[cell2]);
			}
		}));
	} else {
		//console.log('SETT', arguments);
		//console.log('Setting cell value', cell, val);
		if(!this.cell_type(cell) === 'free'){
			throw Exception('Cannot set dependent cell!');
		}
		this.force_set(cell, val);
		//this.doRecursive(this.compute.bind(this), cell);
		//console.log('Cell values after set', this.cell_values);
	}
}
Hash.prototype.force_set = function(cell, val, omit_updating_children){
	this.set_cell_value(cell, val);
	if(omit_updating_children) return;
	this.cell_children(cell).eachKey((child_cell_name) => {
		this.doRecursive(this.compute.bind(this), child_cell_name, false, cell);
	});
}
Hash.prototype.cell_parents = function(cell){
	return this.cell_types[cell] ? this.cell_types[cell].parents : [];
}
Hash.prototype.cell_arg_num = function(cell){
	return this.cell_types[cell] ? this.cell_types[cell].arg_num : 0;
}
Hash.prototype.cell_children = function(cell){
	return this.cell_types[cell] ? this.cell_types[cell].children : {};
}
Hash.prototype.all_cell_children = function(cell, arr){
	if(!this.cell_types[cell]){
		return [];
	}
	arr = arr || [];
	this.cell_types[cell].children.eachKey((cl) => {
		arr.push(cl);
		this.all_cell_children(cl, arr);
	});
	return arr;
}
Hash.prototype.cell_func = function(cell){
	var a;
	if(a = this.cell_types[cell].func) {
		return a;
	} else {
		throw new Error('Cannot find cell func for cell '+cell);
	}
}
Hash.prototype.cell_type = function(cell){
	return this.cell_types[cell] ? this.cell_types[cell].type : [];
}
Hash.prototype.cell_has_type = function(cell, type){
	var types = this.cell_types[cell];
	if(types){
		return types.props[type];
	} else {
		return false;
	}
}
Hash.prototype.cell_type_props = function(cell){
	return this.cell_types[cell] ? this.cell_types[cell].props : {};
}
Hash.prototype.real_cell_name = function(cell){
	return this.cell_types[cell] ? this.cell_types[cell].real_cell_name : {};
}
Hash.prototype.cell_value = function(cell){
	switch(cell){
		case '$real_keys':
			return [...(new Set(Object.keys(this.plain_base).concat(Object.keys(this.plain_base.$init))))].filter((k) => {
				return k.match(/^(\w|\d|\_|\-)*$/);
			})
		break;
		case '$real_values':
			var res = {};
			[...(new Set(Object.keys(this.cell_values)
						.concat(Object.keys(this.init_values))))].filter((k) => {
				return k.match(/^(\w|\d|\_|\-)*$/);
			}).each((k, v) => {
				res[k] = this.cell_value(k);
			})
			return res;
		break;
		case '$path':
			return this.path;
		break;
		case '$app_id':
			return this.app.id;
		break;
		case '$name':
			return this.name;
		break;
		default:
			if(this.cell_values.hasOwnProperty(cell)){
				return this.cell_values[cell];
			} else {
				return Firera.undef;
				//return this.cell_values[cell];
			}
	}
}
Hash.prototype.set_cell_value = function(cell, val){
	var same_song = val === this.cell_values[cell];
	this.cell_values[cell] = val;
	if(this.side_effects[cell]){	
		if(!side_effects[this.side_effects[cell]]) console.info('I SHOULD SET side-effect', cell, this.side_effects[cell], side_effects);
		side_effects[this.side_effects[cell]].func.call(this, cell, val);
		//console.log('Child', real_cell_name, 'val is', val);
	}
	//if(cell === 'text' || cell === '*') console.log('Set cell value', cell, val, this.dynamic_cell_links[cell]);
	var omit_list = this.all_cell_children('*');
	if(this.cell_types['*'] && cell !== '*' && omit_list.indexOf(cell) === -1){
		this.set('*', [cell, val]);
	}
	if(this.dynamic_cell_links[cell]){
		this.dynamic_cell_links[cell].each((links, hash_name) => {
			var own = hash_name === '__self';
			var hsh = own ? this : this.linked_hashes_provider.get(hash_name);
			//console.log('Updating dynamic cell links for cell', cell, links, hash_name, this.linked_hashes_provider, hsh);
			if(hsh){
				for(var link of links){
					//console.log('Writing dynamic cell link ' + link.cell_name, link.type === 'val', this.name);
					if(link.type === 'val'){
						hsh.set(link.cell_name, val);
					} else if(link.type === 'dynamic'){
						hsh.compute(link.cell_name, cell);
					} else {
						//log('Updating links', hash_name, link.cell_name, [hash_name !== '__self' ? this.name : cell, val]);
						hsh.set(link.cell_name, [own ? cell : this.name, val]);
					}
				}
			}
		})
	}
	this.app.linkManager.checkUpdate(this.id, cell, val);
}

var system_predicates = new Set([
	'is',
	'async',
	'closure',
	'funnel',
	'map',
	'hash',
	'dynamic',
	'nested'
]);
var side_effects = {
	'child': {
		func: function(cellname, val, type){
			if(val){
				this.linkHash(cellname, val);
			}
			if(val === false) {
				var link_as = cellname.replace('$child_', '');
				this.unlinkChild(link_as);
			}
		},
		regexp: /^\$child\_/,
	},
	children: {
		regexp: /^\$all\_children$/,
		func: function(__, deltas){
			if(!deltas || !deltas.eachKey){
				return;
			}
			deltas.eachKey((k) => {
				if(!deltas[k]) return;
				var [type, key, hashname, free_vals] = deltas[k];
				switch(type){
					case 'remove':
						this.unlinkChild(key);
					break;
					case 'add':
						this.linkHash(key, [hashname, null, null, free_vals]);
					break;
					case 'change':
						this.updateChildFreeValues(key, free_vals);
					break;
					default:
						throw new Error('Unknown action: ' + type);
					break;
				}
			})
		}
	}
};

var predefined_functions = {
	'=': {
		type: 'func', 
		func: function(a, b){ return a == b;}
	},
	'==': {
		type: 'func', 
		func: function(a, b){ return a === b;}
	},
	'!=': {
		type: 'func', 
		func: function(a, b){ return a != b;}
	},
	'!==': {
		type: 'func', 
		func: function(a, b){ return a !== b;}
	},
	'+': {
		type: 'func', 
		func: function(a, b){ return (a ? Number(a) : 0) + (b ? Number(b) : 0);}
	},
	'-': {
		type: 'func', 
		func: function(a, b){ return Number(a) - Number(b);}
	},
	'*': {
		type: 'func', 
		func: function(a, b){ return a*b;}
	},
	'/': {
		type: 'func', 
		func: function(a, b){ return a/b;}
	},
	'%': {
		type: 'func', 
		func: function(a, b){ return a%b;}
	},
	'$': {
		type: 'func', 
		func: function(a, b){ 
			console.log('Searching selector', b, 'in', a);
			return a.find(b); 
		}
	},
}

var get_app = function(packages){
	var app = new App(packages);
	apps.push(app);
	return app;
}

var init_from_path = function(obj, path, val) {
	if(!(path instanceof Array)){
		path = path.split('/');
	}
	for(let k in path){
		let key = path[k];
		if(key === '') continue;
		if(obj[key] === undefined){
			if(path[Number(k) + 1]){
				obj[key] = {};
			} else {
				obj[key] = val;
			}
		}
		if(!(obj[key] instanceof Object)){
			obj[key] = {};
		}
		obj = obj[key];
	}
}
var set_listening_type = function(cell, type){
	console.log('_______________ SLT', cell, type);
	return {
		//'change': ':', 
		'skip_same': '=',
		'passive': '-',
		'normal': ''
	}[type] + cell;
}

var can_be_set_to_html = (cellname, packages) => {
	return cellname !== '*' 
		&& (cellname.indexOf('/') === -1)
		&& !findMatcher(cellname, packages);
}

var unusual_cell = (cellname) => {
	return !(cellname.match(/^([a-zA-Z0-9\_]*)$/));
}

var findMatcher = (cellname, packages) => {
	for(var n in packages.cellMatchers){
		var m = packages.cellMatchers[n];
		var matches = cellname.match(m.regexp);
		if(matches){
			return [m, matches];
		}
	}
}

var parse_cellname = function(cellname, pool, context, packages, isDynamic){
	if(cellname.indexOf('/') !== -1){
		//console.log('Found cellname', cellname);
		// it's a path - link to other hashes
		var path = cellname.split('/');
		//console.log('Found', cellname, 'in', pool);
		if(!pool.initLinkChain){
			init_if_empty(pool, 'link_chains', {}, cellname, path);
		} else {
			pool.initLinkChain(cellname);
		}
		return;
	}
	var real_cellname = get_real_cell_name(cellname);
	for(var n in side_effects){
		var m = side_effects[n];
		var matches = real_cellname.match(m.regexp);
		if(matches){
			init_if_empty(pool, 'side_effects', {}, cellname, []);
			if(pool.side_effects[cellname].indexOf(n) === -1){
				pool.side_effects[cellname].push(n);
			}
		}
	}
	var matched = findMatcher(real_cellname, packages);
	if(matched){
		matched[0].func(matched[1], pool, context, packages);
	}
}

var get_random_name = (function(){
	// temp solution for Symbol
	var c = 1;
	return function(){
		return 'ololo123321@@@_' + (++c);
	}
})()

var parse_arr_funcstring = (a, key, pool, packages) => {
	var funcstring;
	a = a.slice();
	var funcname = a[0];
	if(packages.predicates.hasOwnProperty(funcname)){
		a = packages.predicates[funcname](a.slice(1));
		funcname = a[0];
		a = a.slice();
	}
	if(!funcname) {
		console.error('wrong func:', funcname);
	}
	var cc = split_camelcase(funcname);
	if(a.length === 1 && (typeof a[0] === 'string')){
		funcstring = ['is', id, a[0]];
	} else {
		if(funcname instanceof Function){
			// it's "is" be default
			funcstring = ['is'].concat(a);
		} else if(system_predicates.has(cc[0])){
			switch(funcname){
				case 'nested':
					var dependent_cells = a[2].map((cellname) => (key + '.' + cellname));
					init_if_empty(pool.plain_base, '$init', {});
					dependent_cells.each((name) => {
						pool.plain_base.$init[name] = null;
					})
					a.splice(2, 1);
					funcstring = a; 
				break;
				case 'map':
					funcstring = ['map', a[1]].concat(Object.keys(a[1]));
					if(a[2]){
						// default value
						init_if_empty(pool.plain_base, '$init', {});
						pool.plain_base.$init[key] = a[2];
					}
				break;
				default:
					funcstring = a; 
				break;
			}
		} else {
			if(funcname === 'just'){
				init_if_empty(pool.plain_base, '$init', {});
				pool.plain_base.$init[key] = a[1];
				return;
			} else {
				if(predefined_functions[funcname]){
					var fnc = predefined_functions[funcname];
					switch(fnc.type){
						case 'func':
							funcstring = ['is', fnc.func].concat(a.slice(1))
						break;
					}
				} else {
					throw new Error('Cannot find predicate: ' + funcname, a);
				}
			}
		}
	}
	return funcstring;
}

var parse_fexpr = function(a, pool, key, packages){
	var funcstring;
	//console.log('Parse fexpr', a, key);
	if(a instanceof Array){
		funcstring = parse_arr_funcstring(a, key, pool, packages);
		if(funcstring === undefined) return;
	} else {
		// it's primitive value
		init_if_empty(pool.plain_base, '$init', {});
		parse_cellname(key, pool, 'setter', packages);
		pool.plain_base.$init[key] = a;
		return;
	}
	if(!funcstring[2]){
		// function with no dependancy
		init_if_empty(pool, 'no_args_cells', {}, key, true);
	}
	for(let k = 2; k < funcstring.length; ++k){
		var cellname = funcstring[k];
		switch(typeof(cellname)){
			case 'string':
				parse_cellname(cellname, pool, null, packages);
			break;
			case 'object':
				if(cellname instanceof Array){
					var some_key = get_random_name();
					//console.log('Random name is', some_key);
					parse_fexpr(cellname, pool, some_key, packages);
					funcstring[k] = some_key;
				}
			break;
			default: 
				throw new Error('Not know how to handle this ' + typeof(cellname));
			break;
		}
	}
	parse_cellname(key, pool, 'setter', packages);
	//console.log('Got funcstring', funcstring);
	pool.plain_base[key] = funcstring;
}
var parse_fexpr2 = function(pool, packages, key, a){
	return parse_fexpr(a, pool, key, packages);
}

var get_cell_type = function(cellname, type, func, parents){
	//console.log('getting cell type', arguments);
	
	var real_cell_types = split_camelcase(type) || [];

	var map = real_cell_types.indexOf('map') !== -1;
	var closure = real_cell_types.indexOf('closure') !== -1;
	var async = real_cell_types.indexOf('async') !== -1;
	var nested = real_cell_types.indexOf('nested') !== -1;
	var funnel = real_cell_types.indexOf('funnel') !== -1;
	var dynamic = real_cell_types.indexOf('dynamic') !== -1;
	return {
		type, 
		func, 
		props: {map, closure, async, nested, funnel, dynamic}, 
		real_cell_name: cellname.replace(/^(\:|\-)/, ''),
		parents: parents || [], 
		arg_num: parents ? parents.length : 0,
		children: []
	}
}

var parse_cell_type = (i, row, pool, children) => {
	var cell_types = pool;
	let type = 'free';
	if(i === '$children'){
		return;
	}
	if(i === '$init'){
		//console.log('parsing free variables', pbs[i]);
		for(var j in row){
			cell_types[j] = get_cell_type(i, type);
		}
		//console.log('now cell_types j looks like', cell_types);
		return;
	}
	if(!(row instanceof Array)){
		cell_types[i] = get_cell_type(i, type);
		return;
	}
	var func = row[0];
	var parents = row.slice(1);
	if(func instanceof Function){
		// regular sync cell
		type = 'is';
	} else {
		// may be 'async', 'changes' or something else
		type = func;
		func = parents.shift();
	}
	cell_types[i] = get_cell_type(i, type, func, parents);
	for(var j in parents){
		var [listening_type, parent_cell_name] = cell_listening_type(parents[j]);
		if(listening_type !== 'passive'){
			init_if_empty(children, parent_cell_name, {});
			children[parent_cell_name][i] = true;
		} else {
			//console.info('Omit setting', i, 'as child for', parent_cell_name, ' - its passive!');
		}
	}
};

var parse_cell_types = function(pbs){
	var cell_types = {};
	var children = {};
	//console.log('PBS', pbs);
	for(let i in pbs){
		parse_cell_type(i, pbs[i], cell_types, children);
	}
	for(let cellname in children){
		if(!cell_types[cellname]){
			var r_type = is_special(cellname) ? 'free' : 'fake';
			cell_types[cellname] = get_cell_type(cellname, r_type);
		} 
		cell_types[cellname].children = children[cellname];
	}
	//console.log('Parsed cell types', cell_types);
	return cell_types;
}

var parse_pb = function(res, packages){
	for(var key in res.plain_base) {
		if(key === '$init'){
			continue;
		}
		if(key === '$children'){
			var value = res.plain_base.$children;
			if(value instanceof Array || typeof value === 'string'){
				// its dynamic children
				parse_fexpr(value, res, '$all_children', packages);
			} else {
				value.each((hash_type, link_as) => {
					if(hash_type instanceof Array){
						key = '$child_' + link_as;
						//console.log('Child', hash_type, link_as, key);
						parse_fexpr(hash_type, res, key, packages);
					} else {
						if(typeof hash_type === 'string'){
							res.hashes_to_link[link_as] = hash_type;
						} else if(!hash_type.add && !hash_type.remove){
							res.hashes_to_link[link_as] = hash_type.type;
						} else {
							// console.log('Adding cells for managing dynamic hash', hash_type);
							var obj = {};
							if(hash_type.add){
								obj[hash_type.add] = function(){
									return {type: hash_type.type, action: 'add'};
								}
							}
							if(hash_type.remove){
								obj[hash_type.remove] = function(){
									return {action: 'remove'};
								}
							}
							parse_fexpr(['map', obj], res, '$child_' + link_as, packages);
						}
					}
				})
			}
			continue;
		}
		parse_fexpr(res.plain_base[key], res, key, packages);
	}
	return res;
}

var parse_external_links_and_$init = function(pool, key){

}


window.Firera = function(config){
	if(arguments.length > 1){
		// it's a set of grids we should join
		config = Firera.join.apply(null, arguments);
	}
	var start = performance.now();
	var app = get_app(config.$packages);
	// getting real pbs
	app.cbs = config.map(app.parse_cbs.bind(app), {except: ['$packages']});
	// now we should instantiate each pb
	if(!app.cbs.__root){
		// no root hash
		throw new Error('Cant find root app!');
	}
	//console.log(app);
	//var compilation_finished = performance.now();
	app.root = new Hash(app, '__root', false, {$app_id: app.id}, null, null, '/');
	Firera.hashCreated(app, app.root.id, app.root.path, null);
	//var init_finished = performance.now();
	//if(1 > 0){
	//	console.info('App run, it took ' + (init_finished - compilation_finished).toFixed(3) + ' milliseconds.'
	//	);
	//}
	return app;
};

var onHashCreatedStack = {};
Firera.hashCreated = function(app, grid_id, path, parent){
	if(onHashCreatedStack[app.id]){
		for(let cb of onHashCreatedStack[app.id]){
			cb(app, grid_id, path, parent);
		}
	}
}

var type_map = {
	'is': 'formula',
	'free': 'free',
	'fake': 'fake',
}

var get_grid_struct = (grid) => {
	var cells_1 = Object.keys(grid.cell_types);
	var cells_2 = Object.keys(grid.cell_values);
	var cells_3 = cells_1.concat(cells_2).unique();
	var cells = [];
	for(let cell of cells_3){
		let types, type;
		if(!grid.cell_types[cell]){
			// probably, nested cell child
		    types = ['free'];
		    type = 'free';
		} else {
		    types = split_camelcase(grid.cell_types[cell].type);
		    type = grid.cell_types[cell].type;
		}
		var props = {};
		var once = false;
		for(let subtype of types){
			if(system_predicates.has(subtype) && subtype !== 'is'){
				props[subtype] = true;
				once = true;
			}
		}
		if(once){
			type = 'is';
		}
		if(!type_map[type]){
			console.log('unmapped type!', type);
		}
		type = type_map[type];
		var obj = {
			name: cell,
			val: grid.cell_values[cell],
			type,
			props,
		};
		if(once){
			obj.subtype = grid.cell_types[cell].type;
		}
		cells.push(obj)
	}
	var by_types = group_by(cells, (obj) => {
		if(obj.name.indexOf('/') !== -1){
			return 'linked';
		}
		if(obj.name.indexOf('$child') === 0 || obj.name === '$all_children'){
			return 'children';
		}
		if(obj.name.indexOf('|') !== -1){
			return 'DOM';
		}
		if(obj.name[0] === '$'){
			return 'system';
		}
		if(obj.props.funnel){
			return 'funnel';
		}
		return obj.type;
		
	});
	
	var childs = grid.linked_hashes_provider.pool;
	var children = {};
	for(let child_name in childs){
		if(child_name === '..') continue;
		let child_id = childs[child_name];
		let child = grid.app.getGrid(child_id);
		children[child_name] = get_grid_struct(child);
	}
	for(let celltype in by_types){
		by_types[celltype].sort((a, b) => {
			return a.name > b.name ? 1 : -1;
		});
	}
	return {
		children,
		cells: by_types,
	};
}

var get_app_struct = (app) => {
	return get_grid_struct(app.root);
}
var get_vals = (grid) => {
	var res = Object.assign({}, grid.cell_values);
	for(let child_name in grid.linked_hashes){
		if(child_name === '..') continue;
		let child_id = grid.linked_hashes[child_name];
		let child = grid.app.getGrid(child_id);
		res[child_name] = get_vals(child);
	}
	return res;
}

Firera.undef = new function(){};
Firera.noop = new function(){};
Firera.apps = apps;
Firera.run = Firera;
Firera.getAppStruct = function() {
	return Firera.apps.map(get_app_struct);
}
Firera.loadPackage = function(pack) {
	root_package_pool.load(pack);
}
Firera.join = function(...args){
	var join = (a, b) => {
		for(let i in b){
			a[i] = b[i];
		}
	}
	var res = Object.assign({}, args[0]);
	for(let key in args){
		var grid = args[key];
		if(key === 0) continue;
		for(let k in grid){
			if(k === '$packages'){
				init_if_empty(res, k, []);
				res.$packages = res.$packages.concat(grid[k]);
				continue;
			}
			init_if_empty(res, k, {});
			join(res[k], grid[k]); 
		}
	}
	return res;
}

var arr_changes_to_child_changes = function(item_hash, arr_change){
	//console.log('beyond the reals of death', item_hash, arr_change);
	if(!arr_change){
		return;
	}
	return arr_change.map((val, key) => {
		var new_val = val.slice();
		new_val[3] = new_val[2];
		new_val[2] = item_hash;
		return new_val;
	});
}

var get_arr_changes = () => {
	var arr = [];
	var id = -1;
	var map = {};
	return (new_arr) => {
		var changes = [];
		arr_different(new_arr, arr, (key) => {
			// create new element
			map[key] = ++id;
			changes.push(['add', id, new_arr[key]]);
		})
		//console.log('Computing changes between new an old arrays', new_arr, arr);
		arr_different(arr, new_arr, (key) => {
			// create new element
			changes.push(['remove', map[key]]);
			delete map[key];
		})
		arr_common(arr, new_arr, (key) => {
			changes.push(['change', map[key], new_arr[key]]);
		})
		arr = new_arr;
		return changes;
	}
}

var core = {
	cellMatchers: {
		prevValue: {
			// ^foo -> previous values of 'foo'
			name: 'PrevValue',
			regexp: new RegExp('^(\-|\:)?\\^(.*)', 'i'),
			func: function(matches, pool, context, packages){
				if(context == 'setter') return;
				var cellname = matches[2];
				parse_fexpr(['closure', function(){
					var val;
					//console.log('Returning closure func!');
					return function(a){
						//console.log('getting prev val');
						var old_val = val;
						val = a;
						return [old_val, a];
					}
				}, cellname], pool, '^' + cellname, packages);
			}
		}
	},
	predicates: {
		toggle: (fs) => {
			var [cell, def] = fs;
			return ['closure', () => {
				var now = def !== undefined ? def : true;
				return function(cb){
					if(now){
						now = false
					} else {
						now = true;
					}
					return now;
				}
			}, cell];
		},
		skipIf: (fs) => {
			var [compare_func, func, ...args] = fs;
			return ['asyncClosure', () => {
				var prev = [];
				return function(cb, ...inner_args){
					if(compare_func(prev, inner_args)){
						var res = func.apply(null, inner_args);
						prev = inner_args;
						cb(res);
					}
				}
			}, ...args];
		},
		transist: (fs) => {
			var func;
			if(fs[0] instanceof Function){
				func = fs.shift();
			}
			return [(cellA, cellB) => {
				if(cellA){
					return func ? func(cellB) : cellB;
				} else {
					return Firera.noop;
				}
			}].concat(fs);
		},
		transistAll: (fs) => {
			var [func, ...rest] = fs;
			return [(cellA, ...restArgs) => {
				if(cellA){
					return func.apply(restArgs);
				} else {
					return Firera.noop;
				}
			}].concat(rest);
		},
		'&&': (fs) => {
			return [(cellA, cellB) => {
				return cellA && cellB;
			}].concat(fs);
		},
		'==': (fs) => {
			return [(cellA, cellB) => {
				return cellA == cellB;
			}].concat(fs);
		},
		'!': (fs) => {
			return [(a) => !a].concat(fs);
		},
		equal: (fs) => {
			return [(a, b) => a === b].concat(fs);
		},
		accum: (funcstring) => {
			return ['closure', () => {
				var arr = [];
				return (a) => {
					arr.push(a);
					return arr;
				}
			}, funcstring[0]];
		},
		first: function(funcstring){
			return [(a) => a, ...funcstring]
		},
		second: function(funcstring){
			return [(a, b) => b, ...funcstring]
		},
		firstDefined: function(funcstring){
			return [function(){
					for(var i in arguments){
						if(arguments[i] !== undefined) return arguments[i];
					}
			}, ...funcstring]
		},
		firstTrue: function(funcstring){
			return [function(){
					//console.log('Looking for firstTrue', arguments);
					for(var i in arguments){
						if(arguments[i]) return arguments[i];
					}
			}, ...funcstring]
		},
		valMap: function(funcstring){
			var valMap;
			if(funcstring[0] instanceof Object && !(funcstring[0] instanceof Array)){
				valMap = funstring.shift();
			} else {
				// true/false by default
				valMap = {};
				valMap[funcstring[0]] = true;
				valMap[funcstring[1]] = false;
			}
			var func = (cell, val) => {
				return valMap[cell];
			}
			return ['funnel', func, ...funcstring];
		},
		firstTrueCb: function(funcstring){
			var cb = funcstring[0];
			var fncstr = funcstring.slice(1);
			return [function(){
					//console.log('Looking for firstTrue', arguments);
					for(var i in arguments){
						if(cb(arguments[i])) return arguments[i];
					}
			}, ...fncstr]
		},
		asArray: function(funcstring){
			var subscribe_to = '*/*';
			if(funcstring[0] instanceof Array){
				// its an array of fields
				var fields = funcstring[0].map((a) => '*/' + a);
				subscribe_to = ['funnel', ids, ...fields];
			}
			return ['closureFunnel', () => {
					var arr = [];
					//console.log('Returning closure');
					return (cell, values) => {
						if(cell === '$arr_data.changes'){
							for(let i in values){
								var [type, index, _, val] = values[i];
								if(type === 'add'){
									var added_obj = {};
									for(let fieldname of fields){
										fieldname = fieldname.replace("*/", "");
										added_obj[fieldname] = val[fieldname];
									}
									arr[index] = added_obj;
								} else if(type === 'remove'){
									delete arr[index];
									//arr.splice(index, 1);
								}
							}
						} else {
							if(values){
								let [fieldname, val] = values;
								fieldname = fieldname.replace("*/", "");
								if(val){
									//console.log('?', val, arr, fieldname, arr[val[0]]);
									arr[val[0]][fieldname] = val[1];
								}
							}
						}
						return arr_fix_keys(arr);
					}
			}, subscribe_to, '$arr_data.changes']
		},
		indices: function(funcstring){
			var func = funcstring[0];
			var field = '*/' + funcstring[1];
			if(!funcstring[1]){
				field = '*/' + func;
				func = id;
			}
			return ['closureFunnel', () => {
				var indices = new Set();
				return (fieldname, vl) => {
					if(field === fieldname){
						var [index, val] = vl;
						var res = func(val);
						if(res){
							indices.add(index);
						} else {
							indices.delete(index);
						}
					} else {
						if(!vl) return indices;
						for(let [change_type, index] of vl){
							if(change_type === 'remove') {
								indices.delete(index);
							}
						}
					}
					return indices;
				}
			}, field, '$arr_data.changes'];
		},
		reduce: function(funcstring){
			var field = '*/' + funcstring[0];
			var config = funcstring[1];
			var res = config.def;
			var vals = {};
			return ['closureFunnel', () => {
				return (cell, chng) => {
					var key, val;
					if(cell === '$arr_data.changes'){
						if(chng instanceof Array){
							for(let i in chng) {
								if(!chng[i] instanceof Array) return;
								var type = chng[i][0];
								key = chng[i][1];
								val = chng[i][3] ? chng[i][3][funcstring[0]] : undefined;
								if(type === 'add'){
									res = config.add(val, res);
									vals[key] = val;
								}
								if(type === 'remove'){
									res = config.add(vals[key], res);
									delete vals[key];
								}
							}
						}
					} else {
						if(chng){
							[key, val] = chng;
							res = config.change(val, vals[key], res);
							vals[key] = val;
						}
					}
					return res;
				}
			}, field, '$arr_data.changes']
		},
		count: function(funcstring){
			var fieldname = funcstring[0];
			var pieces = fieldname.split('/');
			fieldname = pieces.pop();
			var prefix = pieces.length ? pieces.join('/') + '/' : '';
			if(fieldname === '*'){
				// just count all
				return [ prefix + '$arr_data.length'];
			}
			return ['closureFunnel', () => {
				var count = 0;
				var vals = {};
				return (cell, chng) => {
					if(path_cellname(cell) == '$arr_data.changes'){
						// finding deletion
						chng.filter((a) => {
							return a[0] === 'remove';
						}).each((a) => {
							if(vals[a[1]]){
								//console.log('Removing one');
								count--;
							}
							delete vals[a[1]];
						})
						return count;
					}
					if(!chng) return count;
					var [key, val] = chng;
					var prev_val = vals[key];
					if(prev_val === undefined) {
						if(val) count++
					} else {
						if(prev_val !== val){
							if(val){
								count++
							} else {
								count--;
							}
						}
					}
					vals[key] = val;
					//console.log('Now count', count);
					return count;
				}
			}, prefix + '*/' + fieldname, prefix + '$arr_data.changes']
		},
		join: function(funcstring){
			return ['funnel', second].concat(funcstring);
		},
		list: function(funcstring){
			var props = funcstring[0];
			if(!props instanceof Object){
				console.error('List properties should be an object!');
			}
			var item_type = props.type;
			if(!props.push && !props.datasource && !props.deltas && !props.data && !funcstring[1]){
				console.warn('No item source provided for list', funcstring);
			}
			//console.log('List properties', props);
			var deltas_func;
			if(props.push){ 
				deltas_func = ['map', {
					$push: (val) => {
						if(val){
							return [['add', null, val]];
						}
					},
					$pop: (key) => {
						if(key || key === 0 || key === '0'){
							if(key instanceof Array || key instanceof Set){
								var arr = [];
								for(let k of key){
									arr.push(['remove', k]);
								}
								return arr;
							}
							return [['remove', key]];
						}
					}
				}]
			} else if(props.deltas) {
				deltas_func = [id, props.deltas];
			} else if(props.data) {
				deltas_func = ['closure', get_arr_changes, ['just', props.data]];
			} else {
				deltas_func = ['closure', get_arr_changes, '$datasource']
			}
			var all_lists_mixin = {
				$no_auto_template: true,
				$deltas: deltas_func,
				/*$init: {
					$template: "<div>Ololo</div>"
				},*/
				'$arr_data': [
					'nestedClosure',
					() => {
						var id = -1;
						var length = 0;
						return (cb, changes) => {
							if(!changes || !changes.length) return;
							var chngs = arr_changes_to_child_changes(item_type, changes);
							//console.log('Got changes:', frozen(chngs), 'from', changes);
							chngs.forEach((one) => {
								switch(one[0]){
									case 'add':
										one[1] = String(id < 1000000 ? ++id : -1);
										++length;
									break;
									case 'remove': 
										--length;
									break;
								}
							})
							cb('changes', chngs);
							cb('length', length);
						};
					},
					'$deltas'
				],
				$list_template_writer: ['nestedClosure', () => {
					var index_c = 3;
					var index_map = {};
					return function(cb, deltas, $el){
						if($el === Firera.undef) return;
						if(!$el) return;
						for(var i in deltas){
							var type = deltas[i][0];
							var key = deltas[i][1];
							switch(type){
								case 'add':
									$el.append('<div data-fr="' + (++index_c) + '" data-fr-name="' + key + '"></div>');
									index_map[key] = index_c;
									// I domt know...
								break
								case 'remove':
									$el.children('[data-fr=' + index_map[key] + ']').remove();
								break
							}
						}
						cb('dummy', true);
						cb('index_map', index_map);
						return true;
					}
				}, '$arr_data.changes', '$real_el'],
				$htmlbindings: ['closure', () => {
					return ($el, map) => {
						if(!$el || !map) return;
						var res = map.map((n, i) => {
							return get_by_selector(map[i], $el);
						})
						return res;
					}
				}, '$real_el', '$list_template_writer.index_map'],
				$children: ['$arr_data.changes']
			};
			if(props.push){
				all_lists_mixin.$push = props.push;
			}
			if(props.pop){
				all_lists_mixin.$pop = props.pop;
			}
			if(props.datasource){
				all_lists_mixin.$datasource = props.datasource;
			}
			var fnc;
			var list_own_type = Object.assign(all_lists_mixin, props.self || {});
			if(props.create_destroy){
				fnc = [(a) => { 
					if(a){ 
						return list_own_type;
					} else {
						return false;
					}
				}, props.create_destroy];
			} else {
				fnc = [_F.always(list_own_type)];
			}
			return fnc;
		},
		arr_deltas: function(funcstring){
			var cell = funcstring[0];
			return ['closure', function(){
				var val = [];
				return function(new_arr){
					var deltas = arr_deltas(val, new_arr);
					val = new_arr;
					//console.info('deltas are', deltas);
					return deltas;
				}
			}, cell]
		}
	}
} 


var get_by_selector = function(name, $el, children = false){
	if(name === null) return null;
	if(name === '__root') return $('body');
	var method = children ? 'children' : 'find';
	var res = $el 
			? $el[method]('[data-fr=' + name + ']')
			: null;
	//console.info("GBS", '[data-fr=' + name + ']', res ? res.length : null, $el ? $el.html() : '');
	return res;''
}
var search_fr_bindings = function($el){
	var res = {};
	if(!is_def($el)) return res;
	$el.find('[data-fr]').each(function(){
		var name = $(this).attr('data-fr-name');
		if(!name){
			name = $(this).attr('data-fr');
		}
		res[name] = $(this);
	})
	return res;
}

var write_changes = function(){
	var pool = {};
	return (cell, val) => {
		if(cell === '*'){
			pool[val[0]] = val[1];
		} else {
			// htmlbindings, obviously
			for(let i in pool){
				if(val && val[i]){
					val[i].html(pool[i]);
				}
			}
		}
	}
}

var simpleHtmlTemplates = {
	eachHashMixin: {
		$el: ['closure', () => {
			var prev_el;
			return (name, map) => {
				return map ? map[name] : null;
			}
		}, '$name', '../$htmlbindings'],
		'$real_el': ['firstDefined', '$el'],
		'$html_template': [
			'skipIf',
			([$prev_el], [$el]) => {
				if(is_def($prev_el) && is_def($el) && $prev_el[0] && $el[0] && $prev_el[0] === $el[0]){
					return false;
				} else {
					return true;
				}
			},
			function($el){
				var str = '';
				if(is_def($el)){
					str = $el.html();
					if(str) str = str.trim();
				}
				return str;
			}, 
			'$real_el'
		],
		'$template_writer': [
			function(real_templ, $html_template, no_auto, keys, $el){
				if(is_def(real_templ) && is_def($el)){
						$el.html(real_templ);
						return true;
				}	
				if(!$html_template && is_def($el) && keys && !no_auto){
					var auto_template = keys.map((k) => {
						return '<div>' + k + ':<div data-fr="' + k + '"></div></div>';
					}).join(' ');
					$el.html(auto_template);
				}
			}, '$template', '$html_template', '$no_auto_template', '-$real_keys', '-$real_el'
		],
		'$html_skeleton_changes': [id, '$template_writer'],
		'$htmlbindings': [search_fr_bindings, '-$real_el', '$template_writer'],
		'$writer': ['closureFunnel', write_changes, '$htmlbindings', '*']
	}
}
var htmlPipeAspects = {
	attr: (el, attr) => {
		if(!el) return;
		return $(el).attr(attr);
	}
}
var filter_attr_in_path = (e) => {
	return true;
}
var filter_attr_in_parents = (parent_node, index, el) => {
	for(;;){
		el = el.parentElement;
		if(!el) return true;
		if(el.hasAttribute('data-fr')){
			return el === parent_node;
		}
	}
}

var htmlCells = {
	cellMatchers: {
		HTMLAspects: {
			// ^foo -> previous values of 'foo'
			name: 'HTMLAspects',
			regexp: new RegExp('^(\-|\:)?([^\|]*)?\\|(.*)', 'i'),
			func: function(matches, pool, context, packages){
				var get_params = (aspect) => {
					var params = aspect.match(/([^\(]*)\(([^\)]*)\)/);
					if(params && params[1]){
						aspect = params[1];
						params = params[2].split(',');
					}  
					return [aspect, params || []];
				}
				var cellname = matches[0];
				var aspects = matches[3].split('|');
				//console.log('Got following aspects', aspects);
				var aspect = aspects[0];
				var pipe = aspects.slice(1);
				if(pipe.length){
					pipe = pipe.map(get_params);
				}
				
				var make_resp = !pipe.length ? (cb, val) => { 
					return cb(val);
				} : function(cb, e){
					var res = e.target;
					for(const [asp, pars] of pipe){
						if(!htmlPipeAspects[asp]){
							console.error('Unknown pipe aspect:', asp);
							continue;
						}
						res = htmlPipeAspects[asp](res, ...pars);
					}
					return cb(res);
				}
				var selector = matches[2];
				var func, params;
				var setters = new Set(['visibility', 'display', 'setval', 'hasClass', 'css']);
                [aspect, params] = get_params(aspect);
				//console.info('Aspect:', aspect, context, params, matches[2]);
				//if(context === null && setters.has(aspect)) context = 'setter';
				if(
					(context === 'setter' && !setters.has(aspect))
					||
					(context !== 'setter' && setters.has(aspect))
				){
					return;
				}
				switch(aspect){
					case 'getval':
						func = function(cb, vals){
							var onch = (el) => {
								var type = el.attr('type');
								var val;
								if(type == 'checkbox'){
									val = el.prop('checked');
								} else {
									val = el.val();
								}
								//console.log('CHange', el, val, selector);
								make_resp(cb, val);
							}
							var onChange = function(e){
								if(!filter_attr_in_path(e)){
									return;
								}
								onch($(this));
							};
							var onKeyup = function(e){
								if(!filter_attr_in_path(e)){
									return;
								}
								var el = $(this);
								var type = el.attr('type');
								var val;
								if(type == 'checkbox'){
									return;
								} else {
									val = el.val();
								}
								make_resp(cb, val);
							};
							var [$prev_el, $now_el] = vals;
							//console.log('Assigning handlers for ', cellname, arguments, $now_el.find(selector));
							if(is_def($prev_el)){
								$prev_el.off('keyup', selector);
								$prev_el.off('change', selector);
							}
							if(is_def($now_el)){
								$now_el.on({keyup: onKeyup, change: onChange}, selector);
							}
						}
					break;
					case 'click':
						if(selector === 'other'){
							func = function(cb, vals){
								if(!vals) return;
								var [$prev_el, $now_el] = vals;
								if(!$now_el) return;
								if($now_el === Firera.undef) return;
								$(document).click(function(e, originalTarget){
									var is_other = !$.contains($now_el.get()[0], originalTarget);
									if(is_other){
										make_resp(cb, true);
									}
								})
							}
						} else {
							func = function(cb, vals){
								if(!vals) return;
								var [$prev_el, $now_el] = vals;
								if(!$now_el) return;
								if($now_el === Firera.undef) return;
								//console.log('Assigning handlers for ', cellname, arguments, $now_el);
								if($prev_el && $prev_el !== Firera.undef){
									$prev_el.off('click', selector);
								}
								if($now_el.length === 0){
									console.warn('Assigning handlers to nothing', $now_el);
								}
								$now_el.on('click', selector, (e) => {
									if(!filter_attr_in_path(e)){
										return;
									}
									make_resp(cb, e);
									if(e.originalEvent && e.originalEvent.target){
										$(document).trigger('click', e.originalEvent.target);
									}
									return false;
								});
							}
						}
					break;
					case 'focus':
						func = function(cb, vals){
							if(!vals) return;
							var [$prev_el, $now_el] = vals;
							if(!$now_el) return;
							if($prev_el){
								$prev_el.off('focus', selector);
							}
							if($now_el.length === 0){
								console.log('Assigning handlers to nothing', $now_el);
							}
							$now_el.on('focus', selector, (e) => {
								if(!filter_attr_in_path(e)){
									return;
								}
								make_resp(cb, e);
								return false;
							});
						}
					break;
					case 'press':
						func = function(cb, vals){
							var [$prev_el, $now_el] = vals;
							if(!$now_el) return;
							//console.log('Assigning handlers for ', cellname, arguments, $now_el);
							if($prev_el){
								$prev_el.off('keyup', selector);
							}
							$now_el.on('keyup', selector, function(e){
								if(!filter_attr_in_path(e)){
									return;
								}
								var btn_map = {
									'13': 'Enter',
									'27': 'Esc',
								}
								if(params.indexOf(btn_map[e.keyCode]) !== -1){
									make_resp(cb, e);
								}
							});
						}
					break;
					case 'hasClass':
						func = function($el, val){
							if(!is_def($el)) return;
							if(!is_def(val)){
								val = false;
							}
							var [classname] = params;
							$el.toggleClass(classname, val);
						}
					break;
					case 'enterText':
						func = function(cb, vals){
							var [$prev_el, $now_el] = vals;
							if(!$now_el) return;
							if($prev_el){
								$prev_el.off('keyup', selector);
							}
							//$now_el.on('keyup', selector, function(e){
							//});
							var el = $now_el[0];
							el.onkeyup = function(e) {
								if(e.target === $now_el.find(selector)[0]){
									if(!filter_attr_in_path(e)){
										return;
									}
									if(e.keyCode == 13){
										make_resp(cb, e.target.value);
									}
								}
							};
						}
					break;
					case 'visibility':
						func = function($el, val){
							if(!$el){
								return;
							}
							if(val === undefined){
								return;
							}
							if(val){
								$el.css('visibility', 'visible');
							} else {
								$el.css('visibility', 'hidden');
							}
						}
					break;
					case 'css':
						var [property] = params;
						func = function($el, val){
							//console.log('running css setter', $el);
							$el.css(property, val);
						}
					break;
					case 'display':
						func = function($el, val){
							if(!$el || val === undefined){
								return;
							}
							if(val){
								$el.css('display', 'block');
							} else {
								$el.css('display', 'none');
							}
						}
					break;
					case 'setval':
						func = function($el, val){
							$el.val(val);
						}
					break;
					default:
						throw new Error('unknown HTML aspect: ' + aspect);
					break;
				}
				if(context === 'setter'){
					parse_fexpr([func, [(a) => {
						if(!is_def(a)) return $();
						if(!selector) return a;
						if(selector === 'other') return a;
						return a.find(selector)
								.filter(filter_attr_in_parents.bind(null, a.get()[0]));
					}, '-$real_el', '$html_skeleton_changes'], cellname], pool, get_random_name(), packages);
					//console.log('OLOLO2', Object.keys(pool.cell_types.$real_el.children), packages);
				} else {
					parse_fexpr(['asyncClosure', () => {
						var el;
						return (cb, val) => {
							func(cb, [el, val]);
							el = val;
						}
					}, '-$real_el', '$html_skeleton_changes'], pool, cellname, packages);
				}
			}
		}
	}
}

Firera.Ozenfant = Ozenfant;

var get_ozenfant_template = (str, context) => {
	if(str){
		var template = new Ozenfant(str);
		var filtered_context = {};
		for(let k in context){
			if(context[k] instanceof Object){
				// dont write objects to html!
			} else {
				filtered_context[k] = context[k];
			}
		}
		//template.state = filtered_context;
		return template;
	}
}

var get_fields_map = function(){
	var map = {};
	return ([key, val]) => {
		map[key] = val;
		return val;
	}
} 

var write_ozenfant_changes = function(change, template){
	if(!template) return;
	var [k, v] = change;
	if(unusual_cell(k)) return;
	if(v instanceof Object){
		// lol dont write objects to html!
		return;
	}
	template.set(...change);
}

var collect_map = () => {
	var map = {};
	return ([key, val]) => {
		map[key] = val;
		return map;
	} 
}

var Tree = function(){
	this.template_hash = {};
	this.template_tree = {};
	this.bindings = {};
	this.onUpdateBindingsCbs = {};
}

Tree.prototype.getHTML = function(path, node){
	if(!node) return;
	if(node instanceof Ozenfant){
		// its final template
		return this.template_hash[path].getHTML();
	} else {
		var template;
		if(template = this.template_hash[path]){
			// its object
			for(let key in node){
				var new_path = path == '/' ? path + key : path + '/' + key;
				template.set(key, this.getHTML(new_path, node[key]));
			}
			return template.getHTML();
		} else {
			// its array
			var res = [];
			for(let key in node){
				var new_path = path == '/' ? path + key : path + '/' + key;
				res.push('<div data-fr="' + key + '" data-fr-name="' + key + '">'
						+ this.getHTML(new_path, node[key])
						+ '</div>'
						)
			}
			return res.join(' ');
		}
	}
}

Tree.prototype.onUpdateBinding = function(path, cb){
	this.onUpdateBindingsCbs[path] = cb;
}

Tree.prototype.updateBindings = function(path, struct, el = false){
	var template = this.template_hash[path];
	if(el){
		this.bindings[path] = el;
	}
	if(!template){
		// its list
		for(var child of el.children){
			var num = child.getAttribute('data-fr-name');
			if(struct[num]){
				var new_path = path == '/' ? path + num : path + '/' + num;
				this.updateBindings(new_path, struct[num], child);
			}
		}
		return;
	}
	if(el){
		template.setRoot(el);
	}
	template.updateBindings();
	if(this.onUpdateBindingsCbs[path]){
		this.onUpdateBindingsCbs[path]($(this.template_hash[path].root));
	}
	if(!(struct instanceof Object) || (struct instanceof Ozenfant)){
		return;
	}
	for(let key in struct){
		var new_path = path == '/' ? path + key : path + '/' + key;
		if(template.bindings[key]){
			this.updateBindings(new_path, struct[key], template.bindings[key]);
		} else {
			//console.log('bindings not found!', template.bindings, key);
		}
	}
}



Tree.prototype.getBindingsRec = function(path){
	//console.log('Look for bindings!', path);
	var parent = path.split('/');
	var key = parent.pop();
	var parent = parent.join('/');
	if(parent === ''){
		parent = '/';
	}
	var template = this.template_hash[parent];
	if(template){
		return template.bindings[key];
	} else {
		var bnd = this.bindings[parent];
		if(!bnd){
			if(parent){
				bnd = this.getBindingsRec(parent);
			}
		}
		var bv = $(bnd).children('[data-fr=' + key + ']');
		if(!bv.length){
			bv = $("<div/>").attr('data-fr', key).appendTo(bnd);
		}
		return bv.get()[0];
	}
}

Tree.prototype.render = function(root_path){
	//timer('render', root_path);
	var branch = get_branch(this.template_tree, root_path);
	var res = this.getHTML(root_path, branch);
	var root_el = this.template_hash[root_path] ? this.template_hash[root_path].root : false;
	if(!root_el){
		root_el = this.bindings[root_path];
	}
	if(!root_el){
		root_el = this.getBindingsRec(root_path);
	}
	if(!root_el){
		console.warn('Root DOM node($el) is undefined');
		return;
		// oh god...
	}
	root_el.innerHTML = res;
	//timer('update Bindings', root_path);
	this.updateBindings(root_path, branch, root_el);
	//timer('--- render finished', root_path);
}

Tree.prototype.refresh = function(){
	var root_path;
	if(this.refreshPrefixPath){
		root_path = this.refreshPrefixPath.join('/');
		this.refreshPrefixPath = false;
		root_path = root_path == '' ? '/' : root_path;
		if(root_path[0] !== '/'){
			root_path = '/' + root_path;
		}
	} else {
		root_path = '/';
	}
	this.render(root_path);
}

Tree.prototype.addToRefreshPool = function(path, pth){
	if(!this.refreshPrefixPath){
		this.refreshPrefixPath = pth;
	} else {
		for(var key in pth){
			if(this.refreshPrefixPath[key] !== pth[key]){
				break;
			}
		}
		this.refreshPrefixPath = this.refreshPrefixPath.slice(0, key);
	}
}

Tree.prototype.removeLeaf = function(path, skip_remove_node){
	var skip_further = true;
	if(!skip_remove_node){
		if(this.template_hash[path] && this.template_hash[path].root){
			this.template_hash[path].root.remove();
		} else {
			skip_further = false;
		}
	}
	delete this.template_hash[path];
	delete this.bindings[path];
	var struct = get_branch(this.template_tree, path);
	for(var key in struct){
		var new_path = path + '/' + key;
		this.removeLeaf(new_path, skip_further);
	}
} 

var get_parent_path = (path) => {
	var p = path.split('/');
	var name = p.pop();
	if(Number(name) == name){
		p.pop();
	}
	var parent = p.join('/');
	if(parent == ''){
		parent = '/';
	}
	return [name, parent];
}

Tree.prototype.setTemplate = function(path, template, context, el){
	var pth = path.split('/'); 
	if(pth[0] === ''){
		pth = pth.slice(1);
	}
	if(pth[0] === ''){
		pth = pth.slice(1);
	}
	var tmpl = new Ozenfant(template);
	tmpl.state = context;
	if(el){
		tmpl.root = el;
	}
	this.template_hash[path] = tmpl;
	init_from_path(this.template_tree, path, {});
	this.addToRefreshPool(path, pth);
	var [name, parent] = get_parent_path(path);
	if(this.template_hash[parent] && !((Number(name) == name) && name.length)){
		this.refresh(); 
	}
}

var ozenfant_trees = {};

var get_branch = (tree, path) => {
	var pth = path.split('/');
	for(let k of pth){
		if(k === '') continue;
		if(!tree[k]){
			break;
		}
		tree = tree[k];
	}
	return tree;
}

var get_tree = (app_id) => {
	var tree;
	if(!ozenfant_trees[app_id]){
		ozenfant_trees[app_id] = tree = new Tree();
	} else {
		tree = ozenfant_trees[app_id];
	}
	return tree;
}

var ozenfant_new = {
	eachHashMixin: {
		'$real_el': ['asyncClosure', () => {
			var hashname, template;
			return (cb, template, path, app_id, context, el) => {
				if(!app_id) return;
				var pth = path === '/' ? '' : path;
				var tree = get_tree(app_id);
				tree.onUpdateBinding(path, cb);
				tree.setTemplate(path, template, context, is_def(el)? el.get()[0] : false);
			}
		}, '$template', '-$path', '-$app_id', '-$real_values', '-$el'],
		'$ozenfant.list_render': [
			(_, path, app_id) => {
				var parent = get_parent_path(path)[1];
				var tree = get_tree(app_id);
				if(tree.bindings[parent]){
						tree.render(parent);
				}				
			}, 
			'$all_children', '-$path', '-$app_id'],
		'$ozenfant.writer': [([cell, val], template_path, app_id) => {
				if(!template_path || !app_id || !ozenfant_trees[app_id]) return;
				var pth = template_path;
				var template = get_tree(app_id).template_hash[pth];
				if(!template) {
					return;
				}
				template.set(cell, val);
		}, '*', '-$path', '-$app_id'],
		'$html_skeleton_changes': ['$real_el'],
		'$ozenfant.remover': [(_, path, app_id) => {
				ozenfant_trees[app_id].removeLeaf(path);
		}, '$remove', '-$path', '-$app_id']
	}
}

var ozenfant = {
	eachHashMixin: {
		'$ozenfant_el': [(searcher, name) => {
				var res;
				if(searcher instanceof Function){
					res = searcher(name);
				}
				return res ? $(res) : false;
		}, '../$ozenfant.bindings_search', '$name'],
		'$list_el': [(name, $el, map) => {
				//console.log('search list', name, $el, map);
				if(name === null || name === undefined || !map) return;
				var num = map[name];
				return get_by_selector(num, $el, true);
		}, '$name', '../$real_el', '../$list_template_writer.index_map'],
		'$real_el': ['firstTrueCb', ($el) => { return $el && $el.length }, '$el', '$list_el', '$ozenfant_el'],
		'$ozenfant_template2': [get_ozenfant_template, '$template', '-$real_values'],
		'$ozenfant': ['nested', (cb, template, $el, context) => {
				if(!template || !is_def($el)) return;
				var filtered_context = {};
				for(let k in context){
					if(context[k] instanceof Object){
						// dont write objects to html!
					} else {
						filtered_context[k] = context[k];
					}
				}
				if($el){
					template.render($el.get(0), filtered_context);
				}
				cb('bindings_search', (str) => {
					return template.bindings ? template.bindings[str] : false;
				})
				cb('html', template);
		}, ['html', 'bindings_search'], '$ozenfant_template2', '$real_el', '-$real_values'],
		//'$ozenfant_nested_templates': ['closure', get_fields_map, '*/$ozenfant.template'],
		'$ozenfant_writer': [write_ozenfant_changes, '*', '-$ozenfant_template2'],
		/*'$ozenfant_something': [(a, b) => {
			return {
				template: a,
				children: b,
			}
		}, '$ozenfant_template2', '$templates_map'],*/
		'$ozenfant_first_render': [(_, struct, $el) => {
				//var html = ozenfant_to_html_rec(struct);
				//console.log('First render!', struct, $el, html);
				//$el.html(html);				
		}, '$inited', '-$ozenfant_something', '-$real_el'],
		//'$templates_map': ['closure', collect_map, '*/$ozenfant_something'],
		'$html_skeleton_changes': ['$ozenfant.html'],
		'$ozenfant_remove': [function(_, $el){
			if($el){
				$el.html('');
			}
		}, '$remove', '-$real_el']
	}
}

var che_package = {
	predicates: {
		che: function(expr){
			var [expr, cbs] = expr;
			cbs = cbs || [];
			var succ_cb;
			var obj = che.create(expr, {
				onOutput: function(key, val){
					console.log('outputting from che', key, val);
				},
				onSuccess: function(){
					console.log('che scenario successfully finished', succ_cb, obj.state);
					succ_cb(obj.state);
				}
			}, ...cbs);
			var str = ['asyncClosureFunnel', () => {
				return (cb, cell, val) => {
					console.log('something dripped', cb, cell, val);
					succ_cb = cb;
					obj.drip(cell, val);
					return 'a';
				}
			}, ...obj.needed_events]
			console.log('getting che expr', str);
			return str;
		}
	}
} 

var rendered = {};
var templates = {};

var parse_rec = (app, grid_id, cell) => {
	var grid = app.getGrid(grid_id);
	var res = {
		val: grid.cell_values[cell],
		grid_id,
		children: {},
	};
	for(let gridname in grid.linked_hashes){
			var gr_id = grid.linked_hashes[gridname];
			res.children[gridname] = parse_rec(app, gr_id, cell);
	}
	return res;

}
var render_rec = (app, struct) => {
	var grid = app.getGrid(struct.grid_id);
	init_if_empty(rendered, app.id, {}, grid.id, true);
	if(struct.val){
		var context = Object.create(grid.cell_values);
		for(let key in struct.children){
				context[key] = render_rec(app, struct.children[key])
		}
		init_if_empty(templates, app.id, {});
		templates[app.id][grid.path] = struct.tmpl = new Firera.Ozenfant(struct.val);
		return struct.tmpl.getHTML(context);
	} else {
		var res = [];
		for(let key in struct.children){
				res.push(render_rec(app, struct.children[key]));
		}
		return res.join('');
	}
}
var set_bindings_rec = (app, struct, el) => {
	if(!struct) debugger;
	var grid = app.getGrid(struct.grid_id);
	if(struct.tmpl){
		grid.set('$el', $(el));
		struct.tmpl.setRoot(el).updateBindings();
		for(let key in struct.children){
			let el = struct.tmpl.bindings[key];
			set_bindings_rec(app, struct.children[key], el);
		}
	} else {
		el.children.each((node, key) => {
			if(el.children.hasOwnProperty(key)){
				set_bindings_rec(app, struct.children[key], node);
			}
		})
	}
}
var render = function(app, start, node){
		var struct = parse_rec(app, start.id, '$template');
		var html = render_rec(app, struct);
		if(!node) debugger; 
		node.innerHTML = html;
		set_bindings_rec(app, struct, node);
		//console.log('html', html);
}

var neu_ozenfant = {
	onHashCreated: (app, grid_id, path, parent) => {
		if(!parent){
			var self = app.getGrid(grid_id);
			var node = self.cell_values.$el.get()[0];
			render(app, self, node);
		}
		if(rendered[app.id] && rendered[app.id][parent]){
			var self = app.getGrid(grid_id);
			var parent_path = app.getGrid(parent).path;
			var parent_tmpl = templates[app.id][parent_path];
			//if(!parent_tmpl) debugger;
			var node = parent_tmpl.bindings[self.name];
			render(app, self, node);
		}
		//console.log('hash created', path, parent_path);
	}
}

Firera.is_def = is_def;
Firera.loadPackage(core);
Firera.loadPackage(che_package);
Firera.packagesAvailable = {simpleHtmlTemplates, htmlCells, ozenfant, ozenfant_new, neu_ozenfant, che: che_package};
//Firera.loadPackage(html);
Firera.func_test_export = {parse_pb, parse_fexpr};
Firera._F = _F;

module.exports = Firera;

},{"../ozenfant/ozenfant":16,"../shche/shche":19,"jquery":4}],2:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":12}],3:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],4:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( jQuery.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}





return jQuery;
} );

},{}],5:[function(require,module,exports){
/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

	var get_token = (type) => {
		return {
			type: type,
			children: [],
		}
	}
	var match_start = function(){

	}
	var empty_chars_default = [' ', '	', `
`];
	var head = (a) => {
		return a[0];
	}
	var tail = (a) => {
		return a.slice(1);
	}

	var parse_semantics = function(config, struct){
		if(struct instanceof Array){
			if(struct.length === 1){
				struct = struct[0];
			} else {
				var r = [];
				for(var i in struct){
					r.push(parse_semantics(config, struct[i]));
				}
				return r;
			}
		}
		if(!struct){
			console.warn('oops', config, struct);
			return;
		}
		var type = struct.type;
		var children = struct.children;
		var sem = config[type];
		if(!sem){
			console.error('No token semantic description', type, struct);
			return;
		}
		if(sem.type){
			switch(sem.type){
				case 'door':
					var to_parse = sem.ret ? children[sem.ret - 1] : children;
					return parse_semantics(config, to_parse);
				break;
				case 'chars':
					return {chars: struct.chars}
				break;
			}
		}
		if(sem.func){
			return sem.func(struct, parse_semantics.bind(null, config));
		}
	};

	var flatten = function(struct, arr){
		var get_children = function(struct, arr){
			if(struct.children){
				for(var i in struct.children){
					if(struct.children[i].type){
						var child = {
							type: struct.children[i].type,
							children: [],
						}
						if(struct.children[i].chars){
							child.chars = struct.children[i].chars;
						}
						arr.push(child);
						get_children(struct.children[i], child.children);
					} else {
						get_children(struct.children[i], arr);
					}
				}
			}
		}
		var res = [];
		get_children({children: [struct]}, res);
		return res[0];
	}

	var parse = function(config, str, debug){
		var is_empty_char = (char) => {
			var empty_chars = config.empty_chars || empty_chars_default;
			return empty_chars.indexOf(char) !== -1;
		}
		var parse_rec = function parse_rec(tt, str, pos){
			var original_pos = pos;
			var showpos = function(){
				return str.substr(0, pos) + '@@@' + str.substr(pos);
			}
			//console.log('Parsing', '___' + tt + '___', 'token from', pos, showpos());
			var children;
			var res = {
				children: [],
			};
			if(typeof tt === 'string'){
				res.type = tt;
				if(!config.syntax[tt]){
					console.error('Token not found:', tt);
				}
				var tk = config.syntax[tt];
				//console.log('Token props:', tk);
				if(tk.start !== undefined){
					var started = false;
					var start_pos = pos;
					while(++pos){
						var char = str[pos - 1];
						if(is_empty_char(char)){
							continue;
						}
						if(char !== tk.start){
							//console.log('parsing', tt, 'failed:', pos, 
							//str[pos], 'instead of', tk.start);
							return [false, start_pos];
						} else {
							break;
						}
					}
				}
				if(tk.children){
					children = tk.children;
				} else {
					if(tk.free_chars){
						//console.log('Parsing free chars');
						var start_pos = pos;
						if(tk.end || tk.regex){
							var started = false;
							var lag = 0;
							while(++pos){
								var char = str[pos - 1];
								if(char === undefined){
									// we reached the end!
									if(pos - start_pos > 1){
										//console.log('we reached the end!');
										res.chars = str.substr(start_pos, pos - start_pos - 1);
										return [res, pos - 1];
									} else {
										return false;
									}
									//return [res, pos + 1];
								}
								//console.log('parsing free chars', '"' + char + '"', 'as', tt);
								if(is_empty_char(char) && !started){
									++lag;
									continue;
								}
								if(tk.end && char === tk.end){
									res.chars = str.substr(start_pos, pos - start_pos - 1 + lag);
									return [res, pos];
								} else {
									if(tk.regex){
										var string_to_compare = str.substr(start_pos + lag, pos - start_pos - lag);
										var a1 = !!char.match(tk.regex);
										var a2 = !!string_to_compare.match(tk.regex);
										//console.log('matching regex', tk.regex, 'against', string_to_compare, a1, started);
										//if(a1 !== a2){
										//console.log('Comparing', start_pos, a1, a2, tt, '"' + char + '"', 'vs.', '"' + string_to_compare + '".match(' + tk.regex + ')');
										//}
										if(!char || !(string_to_compare.match(tk.regex))){
											if(started){
												res.chars = str.substr(start_pos + lag, pos - start_pos - 1 - lag);
												//console.log('______________ success', res.chars);
												return [res, pos - 1];
											} else {
												//console.log('DED END!', char, tt);
												return [false, pos - 1 - lag];
											}
										}
									}
								}
								started = true;
							}
						} else {
							console.warn('Could not parse free chars without end!');
							return [false, pos];
						}
					} else if(tk.str){
						// just exact string
						var test_str = str.substr(pos, tk.str.length);
						if(test_str === tk.str){
							return [res, pos + tk.str.length];
						} else {
							return [false, pos];
						}
					} else {
						console.warn('No chars and no tokens - what to do?', tk);
					}
				}
			} else {
				children = tt;
			}
			if(!children) return res;
			var children_type = head(children);
			var rest_children = tail(children);
			//console.log('chtype', children_type, rest_children);
			switch(children_type){
				case '>':
					//console.log('parsing > children', tt);
					var p = pos;
					for(var b of rest_children){
						if(typeof b === 'string') continue;
						var r;
						var struct_to_parse = b instanceof Array ? b : b.type;
						var optional = b.optional;
						var multiple = b.multiple;
						if(struct_to_parse instanceof Array && typeof struct_to_parse[struct_to_parse.length - 1] === 'string'){
							optional = true;
							multiple = true;
						}
						while(true){
							//console.log('parsing multiple', struct_to_parse, 'as', tt, b);
							var rz = parse_rec(struct_to_parse, str, p);
							r = rz[0];
							p = rz[1];
							if(!r){
								if(optional){
										break;
								}
								return [false, p];
							}	
							pos = p;
							res.children.push(r);
							if(multiple){
								if(str[p] === undefined){
									break;
								}
							} else {
								break;
							}
						}
					}
				break;
				case '|':
					//console.log('parsing | children', children);
					for(var b of rest_children){
						if(typeof b === 'string') continue;
						var r;
						var struct_to_parse = b instanceof Array ? b : b.type;
						var rz = parse_rec(struct_to_parse, str, pos);
						r = rz[0];
						p = rz[1];
						if(!r){
							continue;
						} else {
							res.children.push(r);
							pos = p;
							break;
						}
						return [false, pos];
					}
					if(!res.children.length){
						//console.log('Nothing found', tt);
						return [false, pos];
					}
				break;
				default:
					console.error('Unknown children type:', children_type);
				break;
			}
			if(tk && tk.end){
				var pp = pos;
				while(++pp){
					var char = str[pp - 1];
					if(is_empty_char(char)){
						continue;
					}
					if(char === tk.end){
						pos = pp;
					}
					break;
				}
			}
			return [res, pos];
		}
		var struct = parse_rec('root_token', str, 0);
		struct = flatten(struct[0]);
		// sematic parsing
		var semantics = parse_semantics(config.semantics, struct);
		return {syntax: struct, semantics};
	}
	module.exports = {
		get_parser: (config) => {
			return parse.bind(null, config);
		},
		dump: function(struct){
			var rec = function(struct, level){
				if(!struct) return;
				var res = [];
				if(struct.type){
					res.push('Type: ' + struct.type);
				}
				if(struct.chars){
					res.push('Str: ' + struct.chars);
				}
				if(struct.children){
					var r = [];
					for(var i in struct.children){
						r.push(rec(struct.children[i], level+1));
					}
					res.push('<div>' + r.join('	') + '</div>');
				}
				return '<div>' + res.join('<br>') + '</div>';
			}
			return rec(struct, 0);
		}
	}

},{}],6:[function(require,module,exports){
var fields = ['classnames', 'tagname', 'str', 'quoted_str'];
var init_if_empty = function(obj/*key, val, key1, val1, ... */) {
	for(let i  = 1; ;i = i + 2){
		var key = arguments[i];
		var val = arguments[i + 1];
		if(!key) break;

		if(obj[key] === undefined){
			obj[key] = val;
		}
		obj = obj[key];
	}
	return obj;
}
module.exports = {
	empty_chars: [' '],
	syntax: {
		root_token: {
			children: [
				'>',
				{
					type: 'item',
					multiple: true,
					optional: true,
				},
			]
		},
		item: {
			children: [
				'>',
				{
					type: 'indent',
					optional: true,
				},
				[
					'|',
					{
						type: 'ternary_else',
					},
					[
						'>',
						{
							type: 'tagname',
							optional: true,
						},
						{
							type: 'classnames',
							optional: true,
						},
						[
							'|', 
							{
								type: 'quoted_str',
								optional: true,
							}, {
								type: 'variable',
								optional: true,
							},
							'optional'
						],
						{
							type: 'bracket',
							optional: true,
						},
						{
							type: 'str',
							optional: true,
						},
					],
				],
				{
					type: 'lineend',
				}
			]
		},
		comma: {
			regex: /^\,\s?$/,
			free_chars: true,
		},
		bracket: {
			start: '(',
			children: [
				'>',
				{
					type: 'assign',
					optional: true,
				},
				[
					'>',
					{
						type: 'comma',
					},
					{
						type: 'assign'
					},
					'optional'
				]

			],
			end: ')',
		},
		assign: {
			free_chars: true,
			regex: /^[^\)^\,]*$/
		},
		quoted_str: {
			start: '"',
			end: '"',
			free_chars: true,
		},
		variable: {
			children: [
				'>',
				{
					type: 'varname',
				},
				{
					type: 'ternary_if',
					optional: true,
				}
			]
		},
		ternary_if: {
			regex: /^\?$/,
			free_chars: true,
		},
		ternary_else: {
			regex: /^\:$/,
			free_chars: true,
		},
		varname: {
			regex: /^\$[a-zA-Z0-9\-\_]*$/,
			free_chars: true,
		},
		indent: {
			regex: /^\t+$/,
			free_chars: true,
		},
		classnames: {
			regex: /^\.[\\.a-zA-Z0-9\-\_]*$/,
			free_chars: true,
		},
		tagname: {
			regex: /^[a-zA-Z0-9]+$/,
			free_chars: true,
		},
		str: {
			regex: /^[^\n]+$/,
			free_chars: true,
		},
		lineend: {
			regex: /\n$/,
			free_chars: true,
		},
	},
	semantics: {
		root_token: {
			func: (struct, parser) => {

				var res = {children: []};
				var last_of_level = {
					"-1": res,
				}
				var che_results = parser(struct.children);
				//console.log('Results', che_results);
				var max_level = 0;
				var last_if = [];
				for(let i in che_results){
					let child = che_results[i];
					if(!child.tagname && !child.classnames && !child.quoted_str && !child.variable && !child.type) {
						continue;
					}
					if(child.type === 'IF'){
						last_if.push(child);
					}
					if(child.type === 'ELSE'){
						var lif = last_if.pop();
						lif.else_children = child;
					}
					var lvl = child.level || 0;
					if(lvl > max_level){
						max_level = lvl;
					}
					var put_to = lvl - 1;
					child.children = [];
					if(!last_of_level[put_to]){
						for(;put_to--;put_to > -2){
							if(last_of_level[put_to]) break;
						}
						if(!last_of_level[put_to]){
							continue;
						}
					}
					//console.log('putting', child, put_to, 'to', last_of_level[put_to]);
					last_of_level[put_to].children.push(child);
					last_of_level[lvl] = child;
					if(lvl + 1 < max_level){
						//console.log('lvl', lvl+1, max_level);
						var j = lvl + 1;
						for(var j = lvl + 1;j <= max_level;j++){
							if(!last_of_level[j]) break;
							//console.log('delete', last_of_level[j]);
							delete last_of_level[j];
						}
					}
				}
				return res.children;
			}
		},
		item: {
			func: (struct, parser) => {
				var res = {};
				for(let child of struct.children){
					switch(child.type){
						case 'variable':
							res.varname = child.children[0].chars.slice(1);
							if(child.children[1]){
								res.type = "IF";
							}
						break;
						case 'ternary_else':
							res.type = "ELSE";
						break;
						case 'indent':
							res.level = child.chars.length;
							//console.log('INDEX', res.level);
						break;
						case 'bracket':
							res.assignments = [];
							for(let child1 of child.children){
								if(child1.type === 'assign'){
									var assign = child1.chars.split(':');
									var key = assign[0].trim();
									var val = assign[1].trim();
									if(val[0] === '$'){
										// its var
										let varname = val.length === 1 ? key : val.substr(1);
										init_if_empty(res, 'attrStyleVars', []).push([varname, key]);
									}
									res.assignments.push([key, val]);
								}
							}
							//console.log('INDEX', res.level);
						break;
					}
					if(fields.indexOf(child.type) !== -1){
						res[child.type] = child.chars;
					}
				}
				return res;
			}
		},
		indent: {
			type: 'chars',
		}
	}
}

},{}],7:[function(require,module,exports){
var ozenfant_config = require('./config');
var parser = require('ooo_oo_o').get_parser(ozenfant_config);

var init_if_empty = function(obj/*key, val, key1, val1, ... */) {
	for(let i  = 1; ;i = i + 2){
		var key = arguments[i];
		var val = arguments[i + 1];
		if(!key) break;

		if(obj[key] === undefined){
			obj[key] = val;
		}
		obj = obj[key];
	}
	return obj;
}

var html_attrs = new Set(['href', 'src', 'style', 'target', 'id', 'class', 'rel', 'type', 'value'])
var is_attr = (str) => {
	return html_attrs.has(str) || str.match(/^data\-/);
}

var Ozenfant = function(str){
	if(str instanceof Object){
		this.struct = str;// compiled struct
	} else {
		this.struct = parser(str + `
`);
	}
	this.node_vars_paths = {};
	this.text_vars_paths = {};
	this.nodes_vars = {};
	this.var_types = {};
	this.state = {};
	this.bindings = {};
	get_vars({children: this.struct.semantics}, this.node_vars_paths, this.text_vars_paths, this.nodes_vars, '.', this.var_types, []);
	this.getIfElseVarsIndex();
};

Ozenfant.prepare = (str) => {
	return parser(str + `
`);
}

var get_varname = (node) => {
	var key = node.varname;
	if(!key.length){
		if(node.classnames){
			key = node.classnames.substr(1).split('.')[0];
		} else {
			console.warn('Incorrect statement: variable without name and default class!');
		}
	}
	return key;
}

var add_to_if_else_pool = (pools, varname, path) => {
	for(var pool of pools){
		pool[varname] = path;
	}
}

var get_vars = (node, node_pool, text_pool, path_pool, path, types, if_else_pools) => {
	if(node === undefined) debugger;
	if(node.children){
		var nodes_lag = 0;
		var text_lag = 0;
		for(var i in node.children){
			var zild = node.children[i];
			if(!zild.tagname && !zild.classnames){
				//console.log('text node!', node.children[i]);
					++nodes_lag;
			} else {
					++text_lag;
			}
			var new_path = path + '/*[' + (Number(i) + 1 - nodes_lag) + ']';
			if(zild.type && (zild.type === 'ELSE' || zild.type === 'IF')){
				if(zild.type === 'ELSE'){
					return;
				}
				if(zild.type === 'IF'){
					var if_pool = {};
					var else_pool = {};

					node_pool[get_varname(zild)] = new_path;
					add_to_if_else_pool(if_else_pools, get_varname(zild), new_path);
					types[get_varname(zild)] = {
						type: 'IF',
						struct: zild,
						if_pool,
						else_pool,
					};
					var if_pools = if_else_pools.slice();
					if_pools.push(if_pool);
					var else_pools = if_else_pools.slice();
					else_pools.push(else_pool);
					get_vars(zild, node_pool, text_pool, path_pool, new_path, types, if_pools);
					get_vars(zild.else_children, node_pool, text_pool, path_pool, new_path, types, else_pools);
				} else {
					get_vars(zild, node_pool, text_pool, path_pool, new_path, types, if_else_pools);
				}
			} else {
				if(zild.varname !== undefined){
					add_to_if_else_pool(if_else_pools, get_varname(zild), new_path);
					node_pool[get_varname(zild)] = new_path;
					//console.log('Found var!', get_varname(node.children[i]), zild);
				}
				if(zild.attrStyleVars){
					for(let [varname, attrname] of zild.attrStyleVars){
						node_pool[varname] = new_path;
						let as_type = is_attr(attrname) ? 'ATTR' : 'STYLE';
						types[varname] = {
							type: as_type,
							name: attrname,
						}
					}
					get_vars(zild, node_pool, text_pool, path_pool, new_path, types, if_else_pools);
				} 
				if(zild.quoted_str){
					//console.log('str!', node.children[i].quoted_str);
					zild.quoted_str.replace(/\$([a-zA-Z0-9]*)/g, (_, key) => {
						var text_path = path + '/text()[' + (Number(i) + 1 - text_lag) + ']';
						if(!path_pool[text_path]){
							path_pool[text_path] = zild.quoted_str;
						}
						text_pool[key] = text_path;
						//console.log('text key found', key, text_path);
					})
				} 
				get_vars(zild, node_pool, text_pool, path_pool, new_path, types, if_else_pools);
			}
		}
	}
}

var input_types = new Set(['text', 'submit', 'checkbox', 'radio']);

var toHTML = function(node, context, parent_tag){
	var indent = `
` + new Array(node.level).join('	');
	var res1 = [], res2 = [], after = '';
	if(node.type === 'ELSE'){
		return '';
	}
	var childs = node.children;
	if(node.type === 'IF'){
		if(!context[node.varname]){
			// "ELSE" part
			childs = node.else_children.children;
		}
	}
	if(node.tagname || node.classnames || !parent_tag){
		// it's a node
		var tag;
		if(node.tagname){
			if(input_types.has(node.tagname)) {
				node.assignments = node.assignments || [];
				node.assignments.push(['type', node.tagname]);
				tag = 'input';
			} else {
				tag = node.tagname;
			}
		} else {
			switch(parent_tag){
				case 'ol':
				case 'ul':
					tag = 'li';
				break;
				case 'tr':
					tag = 'td';
				break;
				default:
					tag = 'div';
				break;
			}
		}
		for(let child of childs){
			res1.push(toHTML(child, context, tag));
		}
		if(parent_tag){
			res2.push(indent + '<' + tag);
			if(node.classnames && node.classnames.length > 1){
				res2.push(' class="' + node.classnames.substr(1).replace(/\./g, " ") + '"');
			}
			if(node.assignments){
				var styles = [];
				for(let ass of node.assignments){
					var [key, val] = ass;
					if(val[0] === '$'){
						// its variable, lets take its val from context
						var real_key = val.length === 1 ? key : val.substr(1);
						val = context[real_key] !== undefined ? context[real_key] : '';
					}
					if(is_attr(key)){
						res2.push(' ' + key + '="' + val + '"');
					} else {
						styles.push(key + ': ' + val + ';');
					}
				}
				if(styles.length){
					res2.push(' style="' + styles.join('') + '"');
				}
			}
			res2.push('>');
			if(node.varname !== undefined && !node.type){
				var key = get_varname(node);
				res2.push(indent + '	' + (context[key] !== undefined ? context[key] : ''));
			} else {
				res2.push(res1.join(' '));
			}
			res2.push(indent + '</' + tag + '>');
			return res2.join('');
		}
	} else {
		// its var of text node
		if(node.quoted_str){
			return indent + node.quoted_str.replace(/\$([a-zA-Z0-9]*)/g, function(_, key){
				//console.log('Found!', key, context[key]);
				return context[key] !== undefined ? context[key] : '';
			});
		}
		if(node.variable){
			return indent + node.variable;
		}
	}
	return res1.join(' ');
}

Ozenfant.prototype.toHTML = function(context = {}){
	var res = toHTML({children: this.struct.semantics}, context = context);
	return res;
}

Ozenfant.prototype.searchByPath = function(path){
	return Ozenfant.xpOne(path, this.root);
}

Ozenfant.prototype.getIfElseVarsIndex = function(){
	this.if_else_vars = {};
	for(var one in this.var_types){
		for(var varname in this.var_types[one].if_pool){
			var path = this.var_types[one].if_pool[varname];
			init_if_empty(this.if_else_vars, varname, {}, one, true);
		}
		for(var varname in this.var_types[one].else_pool){
			var path = this.var_types[one].if_pool[varname];
			init_if_empty(this.if_else_vars, varname, {}, one, false);
		}
	}
}

Ozenfant.prototype.updateBindings = function(){
	this.bindings = {};
	for(let varname in this.node_vars_paths){
		if(this.if_else_vars[varname]){
			var breaker = false;
			for(let vn in this.if_else_vars[varname]){
				var expected_val = this.if_else_vars[varname][vn];
				var real_val = this.state[vn];
				// XOR
				if(!((expected_val && real_val) || !(expected_val || real_val))){
					breaker = true;
					break;
				}
			}
			if(breaker) { 
				continue;
			}
		}
		this.bindings[varname] = this.searchByPath(this.node_vars_paths[varname]);
		if(!this.bindings[varname]){
			console.warn('No node found for var', varname, 'in path:', this.node_vars_paths[varname], 'in context', this.root, ', context', this.state);
		}
	}
	for(let varname in this.text_vars_paths){
		this.bindings[varname] = this.searchByPath(this.text_vars_paths[varname]);
		if(!this.bindings[varname]){
			console.warn('No node found for path:', this.text_vars_paths[varname], 'in context', this.root);
		}
	}
}
Ozenfant.prototype.render = function(node, context){
	this.root = node;
	this.state = context;
	node.innerHTML = this.toHTML(this.state);
	this.updateBindings();
}
Ozenfant.prototype.getHTML = function(context = false){
	if(context) { 
		this.state = context;
	}
	return this.toHTML(this.state);
}
Ozenfant.prototype.setRoot = function(node){
	this.root = node;
}
Ozenfant.prototype._setVarVal = function(key, val){
	if(this.if_else_vars[key]){
		//console.log('ifelsevar', key, this.if_else_vars[key]);
		for(var varname in this.if_else_vars[key]){
			var flag = this.if_else_vars[key][varname] ? this.state[varname] : !this.state[varname];
			if(!flag) {
				// this var is in inactive block
				return;
			}
		}
	}
	this.bindings[key].textContent = val;
}
Ozenfant.prototype.set = function(key, val){
	this.state[key] = val;
	if(!this.bindings[key]){
		//console.warn('Unknown key for binding:', key);
		return;
	}
	if(!this.root) return;
	//console.log('path', this.text_vars_paths[key], 'vars', this.nodes_vars);
	if(this.nodes_vars[this.text_vars_paths[key]]){
		var template = this.nodes_vars[this.text_vars_paths[key]]
		var new_str = template.replace(/\$([a-zA-Z0-9]*)/g, (_, key) => {
			return this.state[key];
		});
		this._setVarVal(key, new_str);
		this.bindings[key].textContent = new_str;
	} else {
		if(this.var_types[key]){
			switch(this.var_types[key].type){
				case 'IF':
					var struct = val 
					? this.var_types[key].struct.children 
					: this.var_types[key].struct.else_children.children;
					var html = toHTML({children: struct}, this.state);
					this.bindings[key].innerHTML = html;
					// @todo should be optimized! update bindings only for dependent vars!
					this.updateBindings();
				break;
				case 'ATTR':
					this.bindings[key].setAttribute(this.var_types[key].name, val);
				break;
				case 'STYLE':
					this.bindings[key].style[this.var_types[key].name] = val;
				break;
			}
		} else {
			this._setVarVal(key, val);
		}
	}
}
Ozenfant.xpOne = (path, node = document) => {
	//console.log('NODE', node);
	return document.evaluate(path, node, null, XPathResult.ANY_TYPE, null).iterateNext(); 
}

module.exports = Ozenfant;


},{"./config":6,"ooo_oo_o":5}],8:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],9:[function(require,module,exports){
module.exports = {
	syntax: {
		root_token: {
			children: [
				'>',
				{
					type: 'set'
				},
			]
		},
		set: {
			children: [
				'>',
				{
					type: 'operator',
					optional: true,
				},
				{
					type: 'item',
				},
				{
					type: 'item_with_comma',
					multiple: true,
					optional: true,
				}
			],
		},
		operator: {
			free_chars: true,
			regex: /^([\>\|\&|\/])+$/,
		},
		item_with_comma: {
			children: [
				'>',
				{ 
					type: 'comma'
				},
				{ 
					type: 'item'
				},
			],
		},
		item: {
			children: [
				'|', 
				{
					type: 'func',
					optional: true,
				},
				[
					'>',
					[
						'|',
						{ 
							type: 'quoted_cellname'
						},
						{ 
							type: 'cellname'
						},
						{
							type: 'bracket_extended'
						},
					],
					{
						type: 'cond',
						optional: true,
					}, 
					{
						type: 'pipe',
						optional: true,
					},
					{
						type: 'output',
						optional: true,
					},
					{
						type: 'quantifier',
						optional: true,
					}
				]
			]
		},
		bracket_extended: {
			children: [
				'>',
				{
					type: 'bracket',
				},
				{
					type: 'pipe',
					optional: true,
				},
				{
					type: 'output',
					optional: true,
				},
				{
					type: 'quantifier',
					optional: true,
				}
			],
		},
		bracket: {
			start: '(',
			children: [
				'>',
				{
					type: 'set',
				}
			],
			end: ')',
		},
		quoted_cellname: {
			start: '"',
			end: '"',
			free_chars: true,
		},
		cellname: {
			free_chars: true,
			regex: /^\s?([a-zA-Z0-9_\-])+\s?$/,
		},
		output: {
			start: '/',
			end: '/',
			children: [
				'>',
				[
					'|',
					{
						type: 'quoted_cellname'
					},
					{
						type: 'cellname'
					},
				], 
				{
					type: 'pipe',
					multiple: true,
					optional: true,
				}
			],
			regex: /^([a-zA-Z0-9_\-])+$/
		},
		pipe: {
			start: '|',
			free_chars: true,
			regex: /^([a-zA-Z0-9_\-])+$/
		},
		threedots: {
			str: '...',
		},
		cond: {
			start: '?',
			free_chars: true,
			regex: /^([a-zA-Z0-9_\-])+$/
		},
		comma: {
			free_chars: true,
			regex: /^[\,]+$/,
		},
		func: {
			children: [
				'>',
				{
					type: 'cellname',
				},
				{
					type: 'func_params',
				},
				{
					type: 'threedots',
					optional: true,
				},
				{
					type: 'pipe',
					optional: true,
				},
			]
		}, 
		func_params: {
			start: '(',
			free_chars: true,
			end: ')'
		},
		quantifier_char: {
			free_chars: true,
			regex: /^[\*\+]+$/,
		},
		quantifier_num: {
			free_chars: true,
			start: '{',
			end: '}',
		},
		quantifier: {
			children: [
				'|',
				{
					type: 'quantifier_char',
					optional: true,
				},
				{
					type: 'quantifier_num',
					optional: true,
				},
			]
		},
	},
	semantics: {
		root_token: {
			type: 'door',
		},
		bracket: {
			type: 'door',
		},
		bracket_extended: {
			func: function(struct, parser){
				var revolver = parser(struct.children[0].children[0]);
				var props = struct.children.slice(1);
				if(!props.length){
					return revolver;
				}
				if(revolver.subtype !== '|'){
					console.log('Useless quant or output - wrong revolver type', props);
					return revolver;
				}
				//console.log('OK, props' + revolver.subtype, props);
				for(let child of props){
					if(child.type === 'output'){
						revolver.output = parser(child);
					}
					if(child.type === 'pipe'){
						revolver.pipe = parser(child).chars;
					}
					if(child.type === 'quantifier'){
						var res = {}, quant = parser(child);
						//console.log('Found quantifier', quant);
						switch(quant.chars){
							case '*':
								res.min = 0;
							break;
							case '+':
								res.min = 1;
							break;
							default:
								if(quant.chars.indexOf(',') !== -1){
									var pieces = quant.chars.split(',');
									if(pieces[0]){
										res.min = Number(pieces[0]);
									}
									if(pieces[1]){
										res.max = Number(pieces[1]);
									}
								} else {
									// just one number, like {42}
									res.min = res.max = Number(quant.chars);
								}
							break;
						}
						revolver.quantifier = res;
					}
				}
				return revolver;
			}
			
			/*type: 'door',
			ret: 1,*/
		},
		quantifier: {
			type: 'door',
		},
		quantifier_char: {
			type: 'chars',
		},
		quantifier_num: {
			type: 'chars',
		},
		cond: {
			type: 'chars',
		},
		pipe: {
			type: 'chars',
		},
		set: {
			func: (struct, parser) => {
				var children = struct.children;
				if(children[0].type === 'operator'){
					return {
						type: 'revolver',
						subtype: children[0].chars,
						children: parser(children.slice(1)),
					}
				} else {
					if(children.length > 1){
						// ">" be default
						return {
							type: 'revolver',
							subtype: '>',
							children: parser(children),
						}
					} else {
						return parser(children[0]);
					}
				}
			}
		},
		output: {
			func: (struct) => {
				var self = {
					title: false,
					pipes: [],
				}
				for(let child of struct.children){
					switch(child.type){
						case 'cellname':
						case 'quoted_cellname':
							self.title = child.chars;
						break;
						default:
							self.pipes.push(child.chars);
						break;
					}
				}
				return self;
			}
		},
		func: {
			func: (struct, parser) => {
				//console.log('analyzing func!', struct, parser);
				var self = {
					name: struct.children[0].chars,
					params: struct.children[1].chars ? struct.children[1].chars : '',
					type: 'func',
					subtype: 'sync'
				};
				for(let child of struct.children){
					if(child.type === 'output'){
						self.output = parser(child);
					}
					if(child.type === 'pipe'){
						self.pipe = parser(child).chars;
					}
					if(child.type === 'cond'){
						self.cond = parser(child).chars;
					}
					if(child.type === 'threedots'){
						self.subtype = 'async';
					}
				}
				return self;
			}
		},
		item: {
			func: (struct, parser) => {
				var self = {};
				if(struct.children.length === 1){
					switch(struct.children[0].type){
						case 'cellname':
						case 'quoted_cellname':
							self.event = {
								name: struct.children[0].chars.trim(),
								type: 'cell',
							}
						break;
						default:
							return parser(struct.children[0]);
						break;

					}
				}
				switch(struct.children[0].type){
					case 'cellname':
					case 'quoted_cellname':
						self.event = {
							name: struct.children[0].chars.trim(),
							type: 'cell',
						}
					break;
					default:
						self.event = parser(struct.children[0]);
					break;

				}
				for(let child of struct.children){
					if(child.type === 'output'){
						self.output = parser(child);
					}
					if(child.type === 'quantifier'){
						var res = {}, quant = parser(child);
						//console.log('Found quantifier', quant);
						switch(quant.chars){
							case '*':
								res.min = 0;
							break;
							case '+':
								res.min = 1;
							break;
							default:
								if(quant.chars.indexOf(',') !== -1){
									var pieces = quant.chars.split(',');
									if(pieces[0]){
										res.min = Number(pieces[0]);
									}
									if(pieces[1]){
										res.max = Number(pieces[1]);
									}
								} else {
									// just one number, like {42}
									res.min = res.max = Number(quant.chars);
								}
							break;
						}
						self.quantifier = res;
					}
					if(child.type === 'pipe'){
						self.pipe = parser(child).chars;
					}
					if(child.type === 'cond'){
						self.cond = parser(child).chars;
					}
				}
				return self;
			}
		},
		item_with_comma: {
			type: 'door',
			ret: 2,
		}
	}
}
},{}],10:[function(require,module,exports){
var parserPackage = require('ooo_oo_o');
var config = require('./config');

var parser = parserPackage.get_parser(config);
var parsed_pool = {};

var get_subscriptions = function(struct, cells_set){
	if(struct.event) struct = struct.event;
	if(!struct.type){
		console.warn('No type', struct);
	}
	switch(struct.type){
		case 'revolver':
			switch(struct.subtype){
				case '|':
					for(var i = 0;i < struct.children.length; i++){
						var child = struct.children[i];
						if(child.event){
							child = child.event;
						}
						get_subscriptions(struct.children[i], cells_set);
					}
				break;
				case '>':
					var child = struct.children[0];
					if(child.event){
						child = child.event;
					}
					get_subscriptions(child, cells_set);
				break;
			}
		break;
		case 'cell':
			cells_set.add(struct.name);
		break;
	}
	return cells_set;
}

var output = function(){

}

function dripres(full_success = false, particular_success = false, value){
	return {full_success, particular_success, value};
}

var is_luck = (a) => {
	return a.full_success;
}
var has_particular_success = (a) => {
	return a.particular_success;
}
var get_value = (a) => {
	return a.value;
}

var is_multiple = (quant) => {
	return !!(quant && (quant.max !== 1));
}

var is_num = (a) => Number(a) == a;

var defaultStateMutator = function(state, key, val){
	if(val !== undefined){
		state[key] = val;
	}
	return state;
}


var Chex = function(struct, linking = {}, callbacks = []){
	this.struct = struct;
	this.onOutput = linking.onOutput;
	this.onSuccess = linking.onSuccess;
	this.stateMutator = linking.stateMutator ? linking.stateMutator : defaultStateMutator;
	this.callbacks = callbacks;
	this.state = {};
	this.mirror = {
		children: [],
	};
	this.refreshSubscriptions();
	this.activate_needed_events();
};

Chex.prototype.getStruct = function(struct){
	return this.struct;
}

Chex.prototype.__runCallback = function(pipe, value){
	var cb;
	if(is_num(pipe)){
		// its number
		--pipe; // because it's 1-based
		cb = this.callbacks[pipe];
	} else {
		cb = this.callbacks[0][pipe];
	}
	if(!(cb instanceof Function)){
		console.error('Callback should be a function!');
		return;
	}
	var new_state = cb(this.state, value);
	//console.log('Counting new state from', JSON.parse(JSON.stringify(this.state)), new_state);
	this.state = new_state;
	if(!this.state instanceof Object){
		console.error('New state should be an object too!', this.state);
	}
}

Chex.prototype.absorb = function(struct, mirror_struct, cellname, value){
	//console.log('checking children', struct.children);
	var res;
	var check = (i) => {
		let child = struct.children[i];
		if(child.event){
			child = child.event;
		}
		switch(child.type){
			case 'cell':
			case 'func':
				if(child.name === cellname){
					var cond = struct.children[i].cond;
					if(cond){
						--cond; // because it's 1-based
						if(!this.callbacks[cond]){
							console.error('No callback for cond:', cond);
						}
						var lakmus = this.callbacks[cond](this.state, value);
						if(!lakmus) return dripres();
					} 
					var state = mirror_struct.children[i];
						state.counter = state.counter ? state.counter + 1 : 1;
					var pipe = struct.children[i].pipe;
					var quant = struct.children[i].quantifier;
					if(quant && quant.max !== undefined && quant.max < state.counter){
						// counter exceeded
						return dripres();
					}
					if(pipe){
						this.__runCallback(pipe, value);
					} else {
						// regular join
						var as_array = is_multiple(quant);
						if(as_array){
							if(!this.state[cellname]){
								this.state[cellname] = [];
							}
							this.state[cellname].push(value);
						} else {
							this.stateMutator(this.state, cellname, value);
						}
					}
					if(quant){
						if(state.counter >= quant.min){
							return dripres(true, true, value);
						} else {
							return dripres();
						}
					} 
					return dripres(true, true, value);
				}
			break;
			case 'revolver':
				if(!mirror_struct.children[i]){
					mirror_struct.children[i] = {
						children: [],
						//type: child.subtype,
						//parent: mirror_struct,
					}
				}
				return this.absorb(child, mirror_struct.children[i], cellname, value);
			break;
		}
		return dripres();
	}
	var output = (output, val) => {
		var title = output.title;
		if(output.pipes.length){
			for(let cb_num of output.pipes){
				if(!this.callbacks[cb_num - 1]){
					console.error('No callback provided - ', cb_num);
					continue;
				}
				val = this.callbacks[cb_num - 1](this.state, val);
			}
		}
		this.onOutput(title, val);
	}
	if(!struct.subtype){
		struct = struct.event;
	}
	var luck_hapenned = false;
	switch(struct.subtype){
		case '|':
			for(let i in struct.children){
				//console.log('checking', struct.children[i]);
				res = check(i);
				if(is_luck(res)){
					if(struct.children[i].output){
						output(struct.children[i].output, get_value(res));
					}
					return dripres(true, true, value);;
				}
			}
		break;
		case '/':
			for(let i in struct.children){
				if(mirror_struct.successful_branch !== undefined && mirror_struct.successful_branch !== i){
					//console.log('now we skip it!', i);
					continue;
				}
				res = check(i);
				if(has_particular_success(res)){
					mirror_struct.successful_branch = i;
				}
				if(is_luck(res)){
					if(struct.children[i].output){
						output(struct.children[i].output, get_value(res));
					}
					return dripres(true, true, value);
				}
				if(mirror_struct.successful_branch === i){
					break;
				}
			}
		break;
		case '&':
			mirror_struct.count_all_counter = mirror_struct.count_all_counter || 0;
			mirror_struct.count_all_each_event = mirror_struct.count_all_each_event || {};
			for(let i in struct.children){
				//console.log('checking', struct.children[i], i, mirror_struct.count_all_counter);
				res = check(i);
				if(is_luck(res)){
					luck_hapenned = true;
					if(struct.children[i].output){
						output(struct.children[i].output, get_value(res));
					}
					if(!mirror_struct.count_all_each_event[i]){
						mirror_struct.count_all_counter++;
						if(mirror_struct.count_all_counter === struct.children.length){
							//console.log('Full success!');
							return dripres(true, true, value);
						}
					}
					mirror_struct.count_all_each_event[i] = true;
				}
			}
		break;
		case '>':
			var pos = mirror_struct.pos || 0;
			for(let i = pos; ; i++){
				if(!struct.children[i]){
					break;
				}
				res = check(i);
				var state = mirror_struct.children[i];
					state.counter = state.counter || 0;
				if(is_luck(res)){
					luck_hapenned = true;
					if(mirror_struct.counter === undefined){
						mirror_struct.counter = 0;
					}
					++mirror_struct.counter;
					if(struct.children[i].output){
						output(struct.children[i].output, get_value(res));
					}
					var next_pos = pos + 1;
					if(!struct.children[next_pos]){
						// revolver finished
						//console.log(struct.children, next_pos, '> REVOLVER SUCCESS!');
						return dripres(true, true, value);;
					} else {
						if(!struct.children[i].quantifier 
								|| mirror_struct.counter > struct.children[i].quantifier.max){
							//console.log(struct.children[i].quantifier, mirror_struct.counter);
							// if it's finite
							pos = i;
							++pos;
							mirror_struct.pos = pos;
						}
					}
				} else {
					if(
							struct.children[i].quantifier 
							&& struct.children[i].quantifier.min !== 0
							&& state.counter < struct.children[i].quantifier.min
					){
						break;
					}
				}
				if(!struct.children[i].quantifier || !is_multiple(struct.children[i].quantifier)){
					//console.log('should break', struct.children[i].quantifier);
					break;
				}
				if(
						struct.children[i].quantifier 
						&& struct.children[i].quantifier.max !== undefined
						&& mirror_struct.counter < struct.children[i].quantifier.max
				){
					//console.log);
					// struct.children[i].quantifier.max < mirror_struct.counter
					//console.log('should break', struct.children[i].quantifier);
					break;
				}
			}
		break;
		default:
			console.log('Unknown revolver type:', struct.subtype);
		break;
	}
	return dripres(false, luck_hapenned);
}

Chex.prototype.refreshSubscriptions = function(){
	var subscr = new Set;
	this.subscriptions = get_subscriptions(this.getStruct(), subscr);
}

Chex.prototype.sleep = function(){
	this.mirror = {
		children: [],
	};
	this.state = {};
	this.sleeping = true;
}

Chex.prototype.awake = function(){
	this.sleeping = false;
}

Chex.prototype.activate_needed_events = function(){
	var cells_and_funcs = this.get_active_cells_and_funcs(null, null, this.struct, this.mirror);
	this.needed_events = cells_and_funcs[0];
	var cb = function(fnc, done, value){
		this.drip(fnc.name, value);
	}
	for(let fnc of cells_and_funcs[1]){
		var subtype = fnc.subtype;
		if(fnc.mirror.run){
			// already run
			continue;
		}
		if(subtype === 'sync'){
			var value = this.callbacks[0][fnc.name](this.state);
			cb.call(this, fnc, true, value);
		} else {
			if(!this.callbacks[0]){
				console.error('You should provide a callback object with "' + fnc.name + '" key!');
			}
			if(!(this.callbacks[0][fnc.name] instanceof Function)){
				console.error('Expecting ' + fnc.name + ' to be a function, given', typeof this.callbacks[0][fnc.name], 'instead!');
			}
			this.callbacks[0][fnc.name](this.state, cb.bind(this, fnc));
		}
		fnc.mirror.run = true;
	}
	// @todo: check for linked chex' and activate them
}

Chex.prototype.get_active_cells_and_funcs = function(parent, parent_mirror, branch, mirror, cells = new Set, funcs = new Set){
	var res = [];
	if(branch.type === 'func'){
		cells.add(branch.name);
		funcs.add(Object.assign({parent_mirror: parent_mirror, mirror: mirror, parent: parent}, branch));
		return [cells, funcs];
	}
	if(branch.type === 'revolver'){
		if(!mirror.children){
			mirror.children = [];
		}
		switch(branch.subtype){
			case '>':
				mirror.pos = mirror.pos || 0;
				if(!branch.children[mirror.pos]){
					// revolver finished
					return [cells, funcs];
				}
				
				var p = mirror.pos;
				do {
					if(!mirror.children[p]) mirror.children[p] = {children: []};
					//console.log('traversing >', branch.children, p);
					this.get_active_cells_and_funcs(branch, mirror, branch.children[p], mirror.children[p], cells, funcs);
					p++;
				} while(
					(
						branch.children[p - 1] && !(!branch.children[p - 1].quantifier || branch.children[p-1].max)
					)
					||
					branch.children[p - 1].type === 'func'
				)
			break;
			default:
				for(let p in branch.children){
					if(!mirror.children[p]){
						mirror.children[p] = {
							children: [],
							//parent: mirror,
							//type: branch.subtype,
							//id: ++mirids
						};
					}
					this.get_active_cells_and_funcs(branch, mirror, branch.children[p], 
					mirror.children[p], cells, funcs);
				}
				//console.log('Activate each part of revolver');
			break;
		}
	} else {
		if(!branch.event){
			console.log('So what is it?', branch);
		}
		switch(branch.event.type){
			case 'cell':
				cells.add(branch.event.name);
			break;
			case 'revolver':
				/*if(!mirror.children[0]){
					console.log('~~~~~~~ ADD CHILD TO MIRROR___________', mirids+1, branch, mirror);
					mirror.children[0] = {
						children: [],
						parent: mirror,
						type: branch.event.subtype,
						id: ++mirids
					};
				}*/
				this.get_active_cells_and_funcs(branch, mirror, branch.event, 
				mirror, cells, funcs);
			break;
		}
	}
	return [cells, funcs];
}

Chex.prototype.drip = function(cellname, val){
	//console.log('dripping', cellname);
	if(this.finished){
		//console.log('No way, it\'s over!');
		return;
	}
	if(this.sleeping){
		//console.log('No, I\'m sleeping!');
		return;
	}
	if(!this.needed_events.has(cellname)){
		//console.log('We are not interested in this event now', cellname);
		return;
	}
	var res = this.absorb(this.struct, this.mirror, cellname, val);
	this.activate_needed_events();
	//console.log('____dripped', this.needed_events);
	if(is_luck(res)){
		// pattern done
		//console.log('________ FINISH!');
		this.finished = true;
		this.mirror = {
			children: [],
		};
		if(this.onSuccess){
			this.onSuccess();
		}
	}
}

module.exports = {
	create: function(che_expression, linking, ...callbacks){
		var struct;
		if(parsed_pool[che_expression]){
			struct = parsed_pool[che_expression];
		} else {
			struct = parsed_pool[che_expression] = parser(che_expression);
		}
		//console.log('Sem', struct.semantics);
		var state = new Chex(struct.semantics, linking, callbacks);
		return state;
	},
}
},{"./config":9,"ooo_oo_o":5}],11:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],12:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require("v3go1D"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":11,"inherits":3,"v3go1D":8}],13:[function(require,module,exports){
var Firera = require('../firera');
var che = require('shche');
var Ozenfant = require('ozenfant');
var assert = require('assert');
var $ = require('jquery');

var id = a => a;
var not = a => !a;
var always = function(a){ 
	return function(){
		return a;
	}
}


	var ttimer_pool = {};
	var ttimer = {
			start: function(key){
					if(!ttimer_pool[key]){
							ttimer_pool[key] = {
									sum: 0,
							}
					}
					ttimer_pool[key].current = performance.now();
			},
			stop: function(key){
					ttimer_pool[key].sum += performance.now() - ttimer_pool[key].current;
			},
	}

var decorate = (fnc, msg) => {
	return function(){
		console.log("@", msg, arguments);
		return fnc.apply(null, arguments);
	}
}

(function(){
	window.performance = window.performance || {};
	performance.now = (function() {
	  return performance.now       ||
			 performance.mozNow    ||
			 performance.msNow     ||
			 performance.oNow      ||
			 performance.webkitNow ||
			 function() { return new Date().getTime(); };
	})();
	var pool = {};
	var Timer = function(name){
		this.name = name;
		this.start = performance.now();
		this.time = 0;
	};

	Timer.prototype.pause = function(){
		if(this.paused){
			//console.log('already paused!');
		}
		var end  = performance.now();
		this.time = this.time + (end - this.start);
		this.paused = true;
	}
	Timer.prototype.resume = function(){
		if(!this.paused){
			//console.log('IS NOT paused!');
		}
		this.start = performance.now();
		this.paused = false;
	}
	Timer.prototype.stop = function(){
		if(!this.paused){
			var end  = performance.now();
			this.time = this.time + (end - this.start);
		}
		this.stopped = true;
		console.log(this.name, 'took', this.time, 'ms');
		delete pool[this.name];
	}

	window.timer = function(name) {
		if(name == 'stop_all'){
			for(var i in pool){
				pool[i].stop();
				delete pool[i];
			}
			return;
		}
		if(!pool[name] || (pool[name].stopped == true)){
			//console.log('creating new timer', name);
			pool[name] = new Timer(name);
		}
		return pool[name];
	};
})()

var prop = (key) => {
	return (a) => {
		return a instanceof Object ? a[key] : undefined;
	}
}
var adder = (a) => {
	return (b) => {
		return b+a;
	}
}
var second = (__, a) => a;

var as = (propName, defValues = {}) => {
	return (val) => {
		if(val === undefined) return;
		var obj = {};
		obj[propName] = val;
		return Object.assign(obj, defValues);
	}
}

var ind = function(index = 0){
	return (arr) => {
		return arr instanceof Object ? arr[index] : null;
	}
}

window.triggerEnter = (el) => {
	var e = $.Event("keyup");
	e.which = 13; //choose the one you want
	e.keyCode = 13;
	el.trigger(e);
}

var fromMap = function(map, def){
	return (val) => {
		return (map[val] !== undefined) ? map[val] : def;
	}
}

describe('Basic Firera functionality', function () {
    /*it('Testing simple values conversion', function () {
        var pb = {
            'a': 10,
            'b': 32,
            'c': ['+', 'a', 'b']
        }
        var pbs = Firera.func_test_export.parse_pb(pb).plain_base;
        assert.deepEqual(pbs.$init, {
            a: 10,
            b: 32,
        });
        assert.equal(pbs.c[1](1, 2), 3);
    });*/
    it('Testing simple grid', function () {
        var app = Firera({
            __root: {
				a: 10,
				b: 32,
                'c': ['+', 'a', 'b']
            },
            'todo': {},
        });
        assert.equal(app.get('c'), 42);
        app.set('a', 20);
        assert.equal(app.get('c'), 52);
    });
    it('Testing nested fexpr', function () {
        var app = Firera({
            __root: {
				a: 10,
				b: 20,
				c: 12,
                d: ['+', ['-', 'b', 'c'], 'a']
            },
            'todo': {},
        });
        assert.equal(app.get('d'), 18);
        app.set('a', 20);
        assert.equal(app.get('d'), 28);
    });
    it('Testing async', function () {
        var handler = function(e, cb){
            cb($(this).val());
        }
        var app = Firera({
            __root: {
                '$el': $(".dummy"),
                'inp': ['async', function (done, [$prev_el, $now_el]) {
                        //console.log('ATTACHING HANDLERS', $now_el);
                        if($prev_el){
                            $prev_el.unbind('keyup');
                        }
                        $now_el.bind('keyup', function(){
                            done($(this).val());
                            console.log('KEYUP', app);
                        });
                    }, '^$el']
            }
        });
        //console.log('SETTING VALUES FROM DOM');
        app.set('$el', $(".async-ex input"));
        //console.log(app.root);
    });
    it('Testing passive listening', function () {
        var app = Firera({
            __root: {
				'a': 10,
				'b': 32,
                'c': ['+', 'a', '-b']
            }
        });
        assert.equal(app.get('c'), 42);
        app.set('a', 20);
        assert.equal(app.get('c'), 52);
        app.set('b', 42);
        assert.equal(app.get('c'), 52);
        app.set('a', 30);
        assert.equal(app.get('c'), 72);
    });
    it('Testing map dependency', function () {
        var app = Firera({
            __root: {
				'a': 10,
				'b': 32,
                'c': ['map', {
                    a: function(z){ return z + 1;}, 
                    b: function(z){ return z*(-1);
                }}]
            }
        });
        app.set('a', 20);
        assert.equal(app.get('c'), 21);
        app.set('b', 42);
        assert.equal(app.get('c'), -42);
    });
    it('Testing FUNNEL dependency', function () {
        var app = Firera({
            __root: {
				'a': 10,
				'b': 32,
                'c': ['funnel', function(cellname, val){
                    //console.log('got FUNNEL', arguments); 
                    return cellname + '_' + val;
                }, 'a', 'b']
            }
        });
        app.set('a', 20);
        assert.equal(app.get('c'), 'a_20');
        app.set('b', 42);
        assert.equal(app.get('c'), 'b_42');
    });
    it('Testing basic html functionality: visibility', function () {
        var app = Firera({
            __root: {
                $el: $(".test-html"),
                'someval': [id, 'input|getval'],
                '.blinker|visibility': [(a) => (a && a.length%2), 'someval']
            },
			$packages: ['simpleHtmlTemplates', 'htmlCells']
        });
        $('.test-html input').val('ololo').keyup();
        assert.equal(app.get('someval'), 'ololo');
    });
    it('Testing basic html functionality: click', function () {
		var c = 0;
        var app = Firera({
            __root: {
                $el: $(".test-html"),
                'foo': [() => {
						++c;
				}, '.a > *:nth-child(2) div span|click']
            },
			$packages: ['simpleHtmlTemplates', 'htmlCells']
        });
        $('span').click();
        $('span').click();
        $('span').click();
        assert.equal(c, 3);
    });
    it('Testing nested hashes', function () {
        var str = false;
        var app = Firera({
            __root: {
                $el: $(".test-nested"),
                someval: [id, 'todo/completed'],
                $child_todo: 'item',
            },
            'item': {
				$init: {
					completed: str,
				},
            	completed: ['map', {
            		'.done|click': true,
            	}]
            }
        });
        //$('.test-html input').val('ololo').keyup();
        assert.equal(app.get('someval'), str);
        app.set('completed', true, 'todo');
        assert.equal(app.get('someval'), true);
    });
    it('Testing multiple children', function () {
        var str = false;
        var app = Firera({
            __root: {
                $el: $(".test-nested"),
                completed_counter: ['closure', function(){
                        var c = 0;
                        return function(arr){
							if(!arr) return;
                            var key = arr[0];
                            var prev_val = arr[1][0];
                            var val = arr[1][1];
                            if(prev_val === undefined) return c;
                            if(val) {
                                c++;
                            } else { 
                                c--; 
                            }
                            return c;
                        }
                }, '*/changes'],
                $children: {
                    1: 'item',
                    2: 'item',
                    3: 'item',
                },
            },
            'item': {
				$init: {
					completed: str,
				},
            	completed: ['map', {
            		'.done|click': true,
            	}],
                'changes': ['^completed'],
            }
        });
        app.set('completed', true, '2');
        assert.equal(app.get('completed_counter'), 1);
        app.set('completed', true, '1');
        app.set('completed', true, '3');
        app.set('completed', false, '2');
        assert.equal(app.get('completed_counter'), 2);
        //console.log('Now completed', app.get('completed_counter'));
    });
    it('Testing nested cells', function () {
        var app = Firera({
            __root: {
                a: 42,
                foo: ['nested', function(cb, a){
                        if(a % 2){
                            cb('odd', a);
                        } else {
                            cb('even', a);
                        }
                }, ['odd', 'even'], 'a'],
            }
        });
        assert.equal(app.get('foo.even'), 42);
        assert.equal(app.get('foo.odd'), null);
        
        app.set('a', 13);
        assert.equal(app.get('foo.even'), 42);
        assert.equal(app.get('foo.odd'), 13);
    });
    var add = (a, b) => a + b;
    /*it('Testing curcular dependency', function () {
        var app = Firera({
            __root: {
                a: [add.bind(null, 10), 'b'],
                b: [add.bind(null, 20), 'c'],
                c: ['+', 'a', 'd'],
                d: 42,
            }
        });
    });*/
    
    var get_by_selector = function(name, $el){
        //console.info("GBS", arguments);
        return $el ? $el.find('[data-fr=' + name + ']') : null;
    }
    
    /*it('Testing HTML package', function () {
        var app = Firera({
            __root: {
                a: 42,
                b: [add.bind(null, 20), 'a'],
                $child_item: 'person',
            },
			$packages: ['simpleHtmlTemplates', 'htmlCells'],
            person: {
				'name': 'John',
				'surname': 'Kovalenko',
                '$el': [get_by_selector, '$name', '../$el'],
                'dummy': [id, '$writer'],
                'dummy2': [id, '$writer'],
                'dummy3': [id, 'dummy']
            }
        });
        // if $el in root is empty, it's <body> by default
        assert.equal(
			app.get('$el').get()[0], 
			$('body').get()[0]
		);
        assert.equal(
            app.get('$el', 'item').get()[0], 
            $('div[data-fr=item]').get()[0]
        );

        app.set('name', 'Mykola', 'item');
    });*/

    it('Testing dynamic $children members', function () {
        var app = Firera({
        	__root: {
        		registered: false,
	        	val: [id, 'block/foo'],
	        	$child_block: [
					always(
						[{
							$init: {
								foo: 'bar'
							}
						}, {

						}]
					), 
					'registered'
				],
        	},
        })
        assert.equal(app.get('val'), 'bar');
        app.set('registered', true);
    });
    it('Testing hash linking', function () {
        var app = Firera({
        	__root: {
				registered: false,
				val: null,
	        	$child_block: [always(
						[{
							$init: {
								foo: 'bar',
								boo: null
							}
						}, {
							'val': 'foo'
						},
						{
							'boo': 'registered'
						}]
					), 'registered'
				],
        	},
        })
        assert.equal(app.get('val'), 'bar');
        assert.equal(app.get('boo', 'block'), false);
        app.set('registered', true);
        assert.equal(app.get('boo', 'block'), true);
    });
    it('Testing deltas, arrays', function () {
        var app = Firera({
        	__root: {
				show: 'all',
				numbers: ['just', [1, 2, 3]],
                arr_changes: ['arr_deltas', 'numbers']
        	}
        })
        app.set('numbers', [1, 2, 5, 5]);
        
        var deltas = app.get('arr_changes');
        assert.deepEqual(deltas, [["add","3",5],["change","2",5]]);
        app.set('numbers', []);
        
        deltas = app.get('arr_changes');
        assert.deepEqual(deltas, [["remove","0"],["remove","1"],["remove","2"],["remove","3"]]);
        app.set('numbers', [1, 2, 5, 5]);
    });
    
    var add = function(vals){
        if(vals){
            return [['add', null, as('text')(vals)]];
        }
    }
    
    var second = (__, a) => a;
	var get = (i) => {
		return (a) => {
			if(a && a[i] !== undefined) return a[i];
		}
	}
    
    it('Testing html val set & get', function(){
        var app = Firera({
            __root: {
                $el: ['just', $(".test-input-setget")],
                "foo": [(a) => { console.log('New todo:', a)}, 'new_todo'],
                "new_todo": [second, 'input|press(Enter,Esc)', '-input|getval'],
                "input|setval": [always(''), 'new_todo']
            },
            'item': {
				text: '',
                completed: ['map', {
					'.done|click': true
				}, false]
            }
        })
        
    });
	var mk_logger = (a) => {
		return (b) => {
			console.log(a, b);
			return b;
		}
	}
    var logger = (varname, a) => {
        console.log(varname, ':', a);
        return a;
    }
    it('Testing removing from list', function(){
        var $root = $(".test-list-remove");
        var app = Firera({
			$packages: ['simpleHtmlTemplates', 'htmlCells'],
            __root: {
                $child_todos: ['list', {
					type: 'item',
					push: [as('text'), '../new_todo'],
					pop: [function(a){
						if(a && a[0] !== undefined) return a[0];
					}, '*/remove'],
					self: {
						completed_number: ['count', 'completed']
					},
				}],
                $el: $root,
                todos_number: ['todos/$arr_data.length'],
                "new_todo": [second, 'button.add-todo|click', '-input|getval'],
                "input|setval": [always(''), 'new_todo']
            },
            'item': {
				text: '',
				$template: `
					<div class="td-item">
						<input type="checkbox" name="completed" /> - completed
						<div data-fr="text">
						</div>
						<div class="to-right">
							<a href="#" class="remove">Remove</a>
						</div>
						<div class="clearfix"></div>
					</div>
				`,
				remove: [(e) => {
					return e;
				}, '.remove|click'],
                completed: ['input[type=checkbox]|getval']
            }
        })
		var add_item = function(str = 'ololo'){
			$root.find('input[type=text]').val(str).change();
			$root.find('button').click();
		}
		//console.log('app', app);
		add_item();
        assert.equal(app.get('$arr_data.length', 'todos'), 1);
        assert.equal(app.get('completed_number', 'todos'), 0);
		add_item('ol');
		add_item('al');
        assert.equal(app.get('$arr_data.length', 'todos'), 3);
        assert.equal(app.get('completed_number', 'todos'), 0);
		
		$root.find('input[type=checkbox]').click();
        assert.equal(app.get('completed_number', 'todos'), 3);
		
		$root.find('[data-fr=todos] > *:first-child .remove').click();
        assert.equal($root.find('input[type=checkbox]:checked').length, 2);
        assert.equal(app.get('completed_number', 'todos'), 2);
		$root.find('[data-fr=todos] > *:first-child .remove').click();
        assert.equal(app.get('completed_number', 'todos'), 1);
        assert.equal($root.find('input[type=checkbox]:checked').length, 1);
		add_item();
        assert.equal(app.get('completed_number', 'todos'), 1);
        assert.equal($root.find('input[type=checkbox]:checked').length, 1);
    });
    
    it('Testing async', function(done){
        var app = Firera({
            __root: {
                b: ['just', 42],
                a: ['async', function(cb, b){
                        setTimeout(() => {
                            //console.log('setting b');
                            cb(b);
                        }, 1);
                }, 'b']
            }
        })
        assert.equal(app.get('a'), Firera.undef);
        setTimeout(() => {
            assert.equal(app.get('a'), 42);
            done();
        }, 10)
    })
	
	var arr_real_length = (a) => Object.keys(a).length;
	
	it('Casting list as array', function(){
        var $root = $(".test-trains");
		var add_item = () => {
			$root.find('button').click();
		}
		var app = Firera({
			$packages: ['simpleHtmlTemplates', 'htmlCells'],
			__root: {
				$el: $(".test-trains"),
				$child_trains: ['list', {
					type: 'train',
					push: ['../add_train'],
					pop: [get(0), '*/.remove|click'],
					self: {
						arr: ['asArray', ['name']]
					},
				}],
				add_train: ['is', (a) => {
					if(a !== undefined){
						return {};
					}
				}, '.add-train|click'],
			},
			train: {
				$template: `
					<div>Some train</div>
					<input> - enter name
					<div><a href="#" class="remove">Del</a></div>
				`,
				name: ['input|getval'],
			}
		})
		add_item();
		add_item();
		assert.equal(app.get('arr', 'trains').length, 2);
		
		$root.find('[data-fr=trains] > *:first-child .remove').click();
		//console.log('TRAINS', app.get('arr', 'trains'));
		assert.equal(arr_real_length(app.get('arr', 'trains')), 1);
		
		var inp = $root.find('[data-fr=trains] > *:first-child input');
		inp.val('ololo').keyup();
		assert.deepEqual(app.get('arr', 'trains'), [{
				name: 'ololo'
		}]);
	})
	
	it('$datasource', function(){
		var app = Firera({
			__root: {
				$child_people: ['list', {
					type: 'human',
					datasource: ['../people'],
					self: {people_ages: ['asArray', ['name', 'age']]},
				}],
				people: ['just', [
					{
						name: 'Ivan',
						age: 35,
						gender: 'male'
					}, {
						name: 'Pylyp',
						age: 93,
						gender: 'male'
					}, {
						name: 'Yavdokha',
						age: 91,
						gender: 'female'
					}
				]]
			},
			human: {
				
			}
		})
		assert.equal(app.get('$arr_data.length', 'people'), 3);
		
		app.set('people', [{
			name: 'Ivan',
			age: 36
		}, {
			name: 'Pylyp',
			age: 94,
		}, {
			name: 'Yavdokha',
			age: 92,
		}]);
	
		
		assert.deepEqual(app.get('people_ages', 'people'), [{
			name: 'Ivan',
			age: 36
		}, {
			name: 'Pylyp',
			age: 94,
		}, {
			name: 'Yavdokha',
			age: 92,
		}]);
	
		app.set('$arr_data.length', [], 'people');
		assert.equal(app.get('$arr_data.length', 'people'), 0);
	})
	
	it('Reduce(position-free)', function(){
		// tbd...
		var app = Firera({
			__root: {
				$child_people: ['list', {
					type: 'human', 
					datasource: ['../people'],
					self: { 
						sum_age: ['reduce', 'age', {
							add: (a, sum) => {
								return sum + a;
							},
							remove: (a, sum) => sum - a,
							change: (a, prev_a, sum) => {
								return (a - prev_a) + sum;
							},
							def: 0,
						}]
					}
				}],
				people: ['just', [{
						name: 'Ivan',
						age: 35
					}, {
						name: 'Pylyp',
						age: 93,
					}, {
						name: 'Yavdokha',
						age: 91,
					}]
				],
			},
			human: {
				
			}
		})
		assert.equal(app.get('sum_age', 'people'), 219);
		app.set('age', 36, 'people/0');
		assert.equal(app.get('sum_age', 'people'), 220);
	})
	
	it('Simple templates with Ozenfant', function(done){
        var app = Firera({
            __root: {
				$el: $(".test-ozenfant"),
				text: 'This is Ozenfant!',
				$template: `
				.
					form
						h1
							"Hello!"
						.
						.text$

				`
            },
			$packages: ['ozenfant_new', 'htmlCells']
        });
		setTimeout(() => {
			app.set('text', 'ololo');
			assert.equal($('.test-ozenfant .text').html(), 'ololo');
			done();
		}, 10)
	})
	it('Nested templates with Ozenfant', function(){
        var app = Firera({
            __root: {
                $init: {
                    $el: $(".test-ozenfant-nested"),
					people_arr: [{name: 'John'}, {name: 'Ivan'}, {name: 'Semen'}],
					$template: `
					.
						h1
							"People"
						ul.people$
					
					`
                },
				$child_people: ['list', {type: 'human', datasource: ['../people_arr']}],
            },
			human: {
				$template: `
				.
					"Hello, "
					span$name
					"!"
					`
			},
			$packages: ['ozenfant_new', 'htmlCells']
        });
		console.log('app', app);
		app.set('text', 'ololo');
		var ex_res = `Hello,Ivan!`;
		var res = $.trim($('.test-ozenfant-nested > * > ul > *:nth-child(2) > div').text()).replace(/(\t|\s)/g, "");
		assert.equal(res, ex_res);
	})
	
	it('Testing indices predicate', function(){
		var $root = $(".test-indices");
		var app = Firera({
			$packages: ['ozenfant_new', 'htmlCells'],
			__root: {
				$init: {
					undone_num: 0,
				},
				$el: $root,
				add_new: ['.add-todo|click'],
				$template: `
					.
						"todo list"
						ul$todos
						.add-todo
							"Add todo"
						.
							"Undone:"
							span.undone_num$
				`,
				undone_num: [prop('size'), 'todos/undone'],
				$child_todos: ['list', {
					type: 'todo',
					push: [always({text: 'Do something', completed: false}), '../add_new'],
					self: { 
						undone: ['indices', not, 'completed']
					},
				}]
			},
			todo: {
				$template: `
					li
						.$text
						.complete
							"Complete!"
				`,
				completed: [always(true), '.complete|click'],
			}
		})
		$root.find('.add-todo').click();
		$root.find('.add-todo').click();
		$root.find('.add-todo').click();
		$root.find('.add-todo').click();
		$root.find('ul > *:nth-child(3) .complete').click();
		//console.log('app', app);
		assert.equal($root.find('.undone_num').html(), '3');
		
		
	})
	
	it('Getting data from arrays by index', function(){
		var app = Firera({
			__root: {
				$template: `
						h1
							"Trains"
						.trains$
						.
							.
								"Edit train"
							.edit-train-form$edit_train_form
				`,
				$el: $(".test-trains2"),
				trains_arr: ['just', [
					{
						number: 117,
						id: 1,
					},
					{
						number: 148,
						id: 2,
					},
					{
						number: 49,
						id: 3,
					},
				]],
				$children: {
					trains: ['list', 'train', '../trains_arr'],
					edit_train_form: {
						type: 'edit_train_form',
						add: 'edit_train',
						remove: 'edit_train_form/close'
					}
				},
				edit_train: [
					function(a) {
						console.log('Click!', a);
					}, 'trains/*/edit_train'
				]
			},
			edit_train_form: {
				$template: `
				.
					"editing train..."
					a.close(href: ololo)
						"Close"
				`,
				close: ['.close|click']
			},
			train: {
				$template: `
					li
						.
							"Train #"
							span.number$
						.
							a.edit(href: #)
								"Edit"
					`,
				edit_train: ['second', '.edit|click', '-$real_values']
			},
			$packages: ['ozenfant_new', 'htmlCells']
		})
		//console.log('app', app);
	})
	it('Testing new $child interface', function(){
		var app = Firera({
			__root: {
				a: 10,
				b: 20,
				$child_todo: 'todo',
				c: ['+', 'a', 'b'],
			},
			todo: {
				d: [adder(12), '../c'],
			}
		})
		assert.equal(app.get('d', 'todo'), 42);
	})
	it('Testing new $child interface', function(){
		var app = Firera({
			__root: {
				a: 10,
				b: 20,
				$child_todo: 'todo',
				c: ['+', 'a', 'b'],
			},
			todo: {
				d: [adder(12), '../c'],
			}
		})
		assert.equal(app.get('d', 'todo'), 42);
	})
	it('Testing new $child interface 2', function(){
		var app = Firera({
			__root: {
				a: 10,
				b: 20,
				$child_todo: {
					d: [adder(12), '../c'],
				},
				c: ['+', 'a', 'b'],
			},
		})
		assert.equal(app.get('d', 'todo'), 42);
	})
	it('Testing new $child interface 3: add and remove', function(){
		var app = Firera({
			__root: {
				a: 10,
				b: 20,
				$el: $(".test-new-children"),
				someval: ['todo/ololo'],
				$template: `
				.
					a.add(href: #)
						"Show todo"
				.
					a.remove(href: #)
						"Hide"
				.
					.$someval
				.
					.todo$
				`,
				$child_todo: ['map', {
					'.add|click': 'todo',
					'.remove|click': false,
				}],
				c: ['+', 'a', 'b'],
			},
			todo: {
				ololo: 42,
				$template: `
					.todosya( background-color: green, 
							width: 300px, 
							height: 50px, 
							margin: 10px, 
							border-radius: 10px, 
							padding: 10px, 
							color: white 
						)
						"todo"
				`,
			},
			$packages: ['ozenfant_new', 'htmlCells']
		})
		$(".test-new-children .add").click();
		console.log('app', app);
		assert.equal($(".test-new-children .todosya").length, 1);
		$(".test-new-children .remove").click();
		assert.equal($(".test-new-children .todosya").length, 0);
	})
	it('Test todo mvc', function(){
		var $root = $(".test-todo-mvc");
		var type = (str) => {
			$root.find('input[type=text]').val(str);
		}
		var enter = () => {
			triggerEnter($root.find('input[type=text]'));
		}
		var main_template = `
			h1 
				"Todo MVC"
			.
				"Todos"
			ul$todos
			.
				"Display:"
				ul.display
					.all
						"All"
					.done
						"Done"
					.undone
						"Undone"
			.
				span
					"Completed: "
					span.completed_number$
			.
				span
					"Total: "
					span.all_number$
			.
				a.clear-completed(href: #)
					"Clear completed"
			.
				h2
					"Add todo"
				.
					text.new-todo-text
		`;
		var todo_template = `
			.
				"This is todo"
			.$text
			.
				a.complete(href: #)
					"Complete"
			.
				a.remove(href: #)
					"Remove"
		`;
		var app = Firera({
			__root: {
				$template: main_template,
				$el: $root,
				$child_todos: ['list', {
					type: 'todo',
					push: [
						as('text', {complete: false}), 
						'../new_todos'
					],
					pop: ['join', 
						'done', 
						[ind(0), '*/.remove|click'], 
						[(a, b) => {
							return a ? b : a;
						}, '../remove_done', '-completed_indices']
					],
					self: {
						'display': [fromMap({
							all: '*',
							undone: true,
							done: false,
						}), '../display'],
						'completed_indices': ['indices', 'complete'],
					}
				}],
				'remove_done': ['.clear-completed|click'],
				'new_todos': ['.new-todo-text|enterText'],
				'display': ['.display > *|click|attr(class)'],
				'.new-todo-text|setval': [always(''), 'new_todos'],
				'completed_number': ['count', 'todos/complete'],
				'all_number': ['count', 'todos/*'],
			},
			todo: {
				'|visibility': ['!=', '../display', 'complete'],
				'|hasClass(completed)': ['complete'],
				$template: todo_template,
				complete: ['.complete|click'],
				'c': ['+', 'a', 'b']
			},
			$packages: ['ozenfant_new', 'htmlCells']
		})
		console.log('app', app, $root.find('input[type=text]'));
		type('Do something useful');
		enter();

		type('Have a rest');
		enter();

		type('Write some tests');
		enter();

		$root.find('ul > *:nth-child(2) .complete').click();

		type('Listen to music');
		enter();

		$root.find('ul > *:nth-child(1) .complete').click();

		assert.equal(Number($root.find('span.completed_number').html()), 2);
		assert.equal(Number($root.find('span.all_number').html()), 4);

		$root.find('.clear-completed').click();

		assert.equal(Number($root.find('span.completed_number').html()), 0);
		assert.equal(Number($root.find('span.all_number').html()), 2);

		$root.find('.clear-completed').click();

		assert.equal(Number($root.find('span.completed_number').html()), 0);
		assert.equal(Number($root.find('span.all_number').html()), 2);
		
	})
	
	it('Dynamic dependency', () => {
		// @tbd
		var app = Firera({
			__root: {
				a1: 10,
				a2: 20,
				a3: 45,
				b1: -1,
				b2: 9,
				b3: 3,
				flag: 'a',
				val: ['dynamic', (letter) => {
					return [(a, b, c) => {
						//console.log('computing sum');
						return a + b + c;
					}, letter + '1', letter + '2', letter + '3']
				}, 'flag']
			},
			$packages: ['ozenfant_new', 'htmlCells']
		})
		assert.equal(app.get('val'), 75);
		app.set('a1', 12);
		assert.equal(app.get('val'), 77);
		app.set('flag', 'b');
		assert.equal(app.get('val'), 11);
	})
	
	it('Multi-layer grid benchmark', function(){
		var grid = {
			a0: 10,
			b0: 20,
			c0: 30,
			d0: 42
		}
		for(var i = 1; i <= 1000; i++){
			var prev = i - 1;
			grid['a' + i] = ['b' + prev];
			grid['b' + i] = ['-', 'a' + prev, 'c' + prev];
			grid['c' + i] = ['+', 'b' + prev, 'd' + prev];
			grid['d' + i] = ['c' + prev];
		}
		
		timer('Initing app');
		var app = Firera({__root: grid});
		timer('Initing app').stop();
		
		timer('Updating app');
		app.set({'a0': 3, 'b0': 10, 'c0': 35, 'd0': 14});
		timer('stop_all');
		
		timer('Updating app 2');
		app.set({'a0': 10, 'b0': -20, 'c0': 45, 'd0': 37});
		timer('Updating app 2').stop();
		//console.log(i+':', app.get('a' + (i - 1)), app.get('b' + (i - 1)), app.get('c' + (i - 1)), app.get('d' + (i - 1)));
	})
	
	it('Accum', () => {
		var app = Firera({
			__root: {
				a: 42,
				b: [(val) => {
					return val%2 ? val : Firera.noop;	
				}, 'a'],
				c: ['accum', 'b']
			},
		})
		app.set('a', 3);
		app.set('a', 4);
		app.set('a', 5);
		app.set('a', 6);
		assert.deepEqual(app.get('c'), [3, 5]);
	})
	it('TransistA', () => {
		var app = Firera({
			__root: {
				a: false,
				b: 42,
				c: ['transist', 'a', '-b']
			},
		})
		app.set('b', 35);
		app.set('a', true);
		assert.equal(app.get('c'), 35);
		app.set('b', 42);
		assert.equal(app.get('c'), 35);
		app.set('a', false);
		app.set('a', true);
		assert.equal(app.get('c'), 42);
	})
	
	it('Wrong linking', () => {
		var app = Firera({
			__root: {
				a: 42,
				$child_foo: 'bar'
			},
			bar: {
				b: ['z']
			}
		})
		var st = app.getStruct();
		console.log('ST', st); 
	})
	it('"data" for list', () => {    
		var get_fields_map = function(){
			var map = {};
			return ([key, val]) => {
				map[key] = val;
				return val;
			}
		} 
		var app = Firera({
			__root: {
				$template: `
				
						.
							"Blocks"
						.blocks$   
				`,
				$el: $(".test-nested-template-rendering"), 
				$child_blocks: ['list', {
						type: 'block',
						data: [{}, {}, {}],
						self: {
							templs: ['closure', get_fields_map, '*/$ozenfant_render']
						}
				}]
			},
			block: {
				$template: `
				
						.
							"Hello!"
				
				`
			},
			$packages: ['ozenfant_new', 'htmlCells']
		})
		console.log('app', app);  
	})
	it('Nested $init', () => {   
		var app = Firera({
			__root: {
				$init: {
					a: 10,
					b: 30,
					foo: 'bar',
					aaa: {
						bar: 'baz',
						c: 42,
						bbb: {
							city: 'New Tsynglok',
						}
					},
				},
				$child_aaa: 'nst',
				c: ['+', 'a', 'b']
			},
			nst: {
				$init: {
					a: 12,
					b: 30,
				},
				$child_bbb: 'nst2',
			},
			nst2: {
				
			}
		})
		assert.equal(app.get('c'), '40');
		assert.equal(app.get('foo'), 'bar');
		assert.equal(app.get('bar', 'aaa'), 'baz');
		assert.equal(app.get('city', 'aaa/bbb'), 'New Tsynglok');
		console.log('C = ', app.get('c'));
	})
	/*it('testing Once', () => {
		var app = Firera({
			__root: {
				$el: $(".test-once"),
				'input_blurred': ['once', 'input|blur'],
			}
			assert.equal(app.get('input_blurred'), undefined);
			$(".test-once input").blur();
			assert.equal(app.get('input_blurred') instanceof Object, true);
			
		})
		
	})*/
	it('** linking', () => {
		var $root =  $(".test-comments");
		var c = 0;
		var app = Firera({
			__root: {
				'$el': $root,
				'clicks': [() => {
					//console.log('BTN CLC!');
					++c;	
				}, '**/btn_click'],
				'comments_arr': ['just', [
						{
							user: 'Mikolalex',
							text: 'Nice photo!'
						},
						{
							user: 'geo14tr89',
							text: '+1'
						},
						{
							user: '2te116',
							text: 'Like!'
						},
				]],
				'$child_comments': ['list', {type: 'comment', datasource: ['../comments_arr']}],
				'$template': `
				.h1
					"Comments"
				ul.comments$
				`
			},
			comment: {
				'btn_click': ['.plus-one|click'],
				'$template': `
				li.comment
					.user$(font-weight: bold)
					.text$
					button.plus-one
						"+1"
				`,
			},
			$packages: ['ozenfant_new', 'htmlCells']
		})
		//console.log('**', app);
		$root.find('.comment .plus-one').click();
		assert.equal(c, 3);
	})
	it('^^ linking', () => {
		var $root =  $(".test-comments2");
		var c = 0;
		var app = Firera({
			__root: {
				'$el': $root,
				'comments_arr': ['just', [
						{
							user: 'Mikolalex',
							text: 'Nice photo!'
						},
						{
							user: 'geo14tr89',
							text: '+1'
						},
						{
							user: '2te116',
							text: 'Like!'
						},
				]],
				selectable: false,
				username: 'Mikolalex',
				'$child_comments': ['list', {type: 'comment', datasource: ['../comments_arr']}],
				'$template': `
				.h1
					"Comments"
				ul.comments$
				`
			},
			comment: {
				'.text|hasClass(my-comment)': ['==', '^^/username', 'user'],
				'|hasClass(active)': ['transist', '/selectable', ['valMap', '|click', 'other|click']],
				'$template': `
				li.comment
					.user$(font-weight: bold)
					.text$
					button.plus-one
						"+1"
				`,
			},
			$packages: ['ozenfant_new', 'htmlCells']
		})
		//console.log('^^', app);
		assert.equal($root.find('.comments').children().eq(0).find('.my-comment').length, 1);
		assert.equal($root.find('.comments').children().eq(1).find('.my-comment').length, 0);
		assert.equal($root.find('.comments').children().eq(2).find('.my-comment').length, 0);
		app.set('username', 'geo14tr89');
		assert.equal($root.find('.comments').children().eq(0).find('.my-comment').length, 0);
		assert.equal($root.find('.comments').children().eq(1).find('.my-comment').length, 1);
		assert.equal($root.find('.comments').children().eq(2).find('.my-comment').length, 0);
		
		//$root.find('.comments > *:nth-child(2) .text').click();
	})
	it('Form validate example', () => {
		/*var prop = (a) => {
			return (b) => {
				return b[a];
			}
		}
		var gt = (a) => {
			return (b) => {
				return b > a;
			}
		}
		var len_gt_2 = _.flow(prop(length), gt(2));
		/*var $root = $('#enter-name-and-email-form');
		var simple_email_regex = /\S+@\S+\.\S+/;
		var is_email_valid = simple_email_regex.test.bind(simple_email_regex);
		var app = {
			$el: $root,
			email_valid: [is_email_valid, 'input.email|getval'],
			name_entered: [(a) => { return a.length > 2 }, 'input.name|getval'],
			form_valid: ['&&', 'email_valid', 'name_entered'],
			form_data_to_send: ['transist', '-form_valid', '-#enter-name-and-email-form|formdata', 'button.send|click'],
			do_something: [(data) => {
				// do something useful with entered data, e.g. AJAX request
			}, 'form_data_to_send']
		};
		app = Firera({
			__root: app
		})
		*/
	})
})
describe('Che', function () {
	it('Simple example', function(){
		var app = Firera({
			__root: {
				$el: $(".test-che"),
				a: [always('A'), '.a|click'],
				b: [always('B'), '.b|click'],
				clicked_both: ['che', '& a, b']
			},
			$packages: ['htmlCells', 'simpleHtmlTemplates']
		})
		$(".test-che .a").click();
		$(".test-che .b").click();
		assert.deepEqual(app.get('clicked_both'), {a: 'A', b: 'B'})
	})
})


},{"../firera":1,"assert":2,"jquery":4,"ozenfant":7,"shche":10}],14:[function(require,module,exports){
/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

	var get_token = (type) => {
		return {
			type: type,
			children: [],
		}
	}
	var match_start = function(){

	}
	var empty_chars_default = [' ', '	', `
`];
	var head = (a) => {
		return a[0];
	}
	var tail = (a) => {
		return a.slice(1);
	}

	var parse_semantics = function(config, struct){
		if(struct instanceof Array){
			if(struct.length === 1){
				struct = struct[0];
			} else {
				var r = [];
				for(var i in struct){
					r.push(parse_semantics(config, struct[i]));
				}
				return r;
			}
		}
		if(!struct){
			console.warn('oops', config, struct);
			return;
		}
		var type = struct.type;
		var children = struct.children;
		var sem = config[type];
		if(!sem){
			console.error('No token semantic description', type, struct);
			return;
		}
		if(sem.type){
			switch(sem.type){
				case 'door':
					var to_parse = sem.ret ? children[sem.ret - 1] : children;
					return parse_semantics(config, to_parse);
				break;
				case 'chars':
					return {chars: struct.chars}
				break;
			}
		}
		if(sem.func){
			return sem.func(struct, parse_semantics.bind(null, config));
		}
	};

	var flatten = function(struct, arr){
		var get_children = function(struct, arr){
			if(struct.children){
				for(var i in struct.children){
					if(struct.children[i].type){
						var child = {
							type: struct.children[i].type,
							children: [],
						}
						if(struct.children[i].chars){
							child.chars = struct.children[i].chars;
						}
						arr.push(child);
						get_children(struct.children[i], child.children);
					} else {
						get_children(struct.children[i], arr);
					}
				}
			}
		}
		var res = [];
		get_children({children: [struct]}, res);
		return res[0];
	}

	var parse = function(config, str, debug){
		var is_empty_char = (char) => {
			var empty_chars = config.empty_chars || empty_chars_default;
			return empty_chars.indexOf(char) !== -1;
		}
		var parse_rec = function parse_rec(tt, str, pos){
			var original_pos = pos;
			var showpos = function(){
				return str.substr(0, pos) + '@@@' + str.substr(pos);
			}
			//console.log('Parsing', '___' + tt + '___', 'token from', pos, showpos());
			var children;
			var res = {
				children: [],
			};
			if(typeof tt === 'string'){
				res.type = tt;
				if(!config.syntax[tt]){
					console.error('Token not found:', tt);
				}
				var tk = config.syntax[tt];
				//console.log('Token props:', tk);
				if(tk.start !== undefined){
					var started = false;
					var start_pos = pos;
					while(++pos){
						var char = str[pos - 1];
						if(is_empty_char(char)){
							continue;
						}
						if(char !== tk.start){
							//console.log('parsing', tt, 'failed:', pos, 
							//str[pos], 'instead of', tk.start);
							return [false, start_pos];
						} else {
							break;
						}
					}
				}
				if(tk.children){
					children = tk.children;
				} else {
					if(tk.free_chars){
						//console.log('Parsing free chars');
						var start_pos = pos;
						if(tk.end || tk.regex){
							var started = false;
							var lag = 0;
							while(++pos){
								var char = str[pos - 1];
								if(char === undefined){
									// we reached the end!
									if(pos - start_pos > 1){
										//console.log('we reached the end!');
										res.chars = str.substr(start_pos, pos - start_pos - 1);
										return [res, pos - 1];
									} else {
										return false;
									}
									//return [res, pos + 1];
								}
								//console.log('parsing free chars', '"' + char + '"', 'as', tt);
								if(is_empty_char(char) && !started){
									++lag;
									continue;
								}
								if(tk.end && char === tk.end){
									res.chars = str.substr(start_pos, pos - start_pos - 1 + lag);
									return [res, pos];
								} else {
									if(tk.regex){
										var string_to_compare = str.substr(start_pos + lag, pos - start_pos - lag);
										var a1 = !!char.match(tk.regex);
										var a2 = !!string_to_compare.match(tk.regex);
										//console.log('matching regex', tk.regex, 'against', char, a1, string_to_compare, a2);
										//if(a1 !== a2){
										//console.log('Comparing', start_pos, a1, a2, tt, '"' + char + '"', 'vs.', '"' + string_to_compare + '".match(' + tk.regex + ')');
										//}
										if(!char || !(string_to_compare.match(tk.regex))){
											if(started){
												res.chars = str.substr(start_pos + lag, pos - start_pos - 1 - lag);
												//console.log('______________ success', res.chars);
												return [res, pos - 1];
											} else {
												//console.log('DED END!', char, tt);
												return [false, pos - 1 - lag];
											}
										}
									}
								}
								started = true;
							}
						} else {
							console.warn('Could not parse free chars without end!');
							return [false, pos];
						}
					} else if(tk.str){
						// just exact string
						var test_str = str.substr(pos, tk.str.length);
						if(test_str === tk.str){
							return [res, pos + tk.str.length];
						} else {
							return [false, pos];
						}
					} else {
						console.warn('No chars and no tokens - what to do?', tk);
					}
				}
			} else {
				children = tt;
			}
			if(!children) return res;
			var children_type = head(children);
			var rest_children = tail(children);
			//console.log('chtype', children_type, rest_children);
			switch(children_type){
				case '>':
					//console.log('parsing > children', tt);
					var p = pos;
					for(var b of rest_children){
						if(typeof b === 'string') continue;
						var r;
						var struct_to_parse = b instanceof Array ? b : b.type;
						var optional = b.optional;
						var multiple = b.multiple;
						if(struct_to_parse instanceof Array && typeof struct_to_parse[struct_to_parse.length - 1] === 'string'){
							optional = true;
							multiple = true;
						}
						while(true){
							//console.log('parsing multiple', struct_to_parse, 'as', tt, b);
							var rz = parse_rec(struct_to_parse, str, p);
							r = rz[0];
							p = rz[1];
							if(!r){
								if(optional){
										break;
								}
								return [false, p];
							}	
							pos = p;
							res.children.push(r);
							if(multiple){
								if(str[p] === undefined){
									break;
								}
							} else {
								break;
							}
						}
					}
				break;
				case '|':
					//console.log('parsing | children', children);
					for(var b of rest_children){
						if(typeof b === 'string') continue;
						var r;
						var struct_to_parse = b instanceof Array ? b : b.type;
						var rz = parse_rec(struct_to_parse, str, pos);
						r = rz[0];
						p = rz[1];
						if(!r){
							continue;
						} else {
							res.children.push(r);
							pos = p;
							break;
						}
						return [false, pos];
					}
					if(!res.children.length){
						//console.log('Nothing found', tt);
						return [false, pos];
					}
				break;
				default:
					console.error('Unknown children type:', children_type);
				break;
			}
			if(tk && tk.end){
				var pp = pos;
				while(++pp){
					var char = str[pp - 1];
					if(is_empty_char(char)){
						continue;
					}
					if(char === tk.end){
						pos = pp;
					}
					break;
				}
			}
			return [res, pos];
		}
		var struct = parse_rec('root_token', str, 0);
		struct = flatten(struct[0]);
		// sematic parsing
		var semantics = parse_semantics(config.semantics, struct);
		return {syntax: struct, semantics};
	}
	module.exports = {
		get_parser: (config) => {
			return parse.bind(null, config);
		},
		dump: function(struct){
			var rec = function(struct, level){
				if(!struct) return;
				var res = [];
				if(struct.type){
					res.push('Type: ' + struct.type);
				}
				if(struct.chars){
					res.push('Str: ' + struct.chars);
				}
				if(struct.children){
					var r = [];
					for(var i in struct.children){
						r.push(rec(struct.children[i], level+1));
					}
					res.push('<div>' + r.join('	') + '</div>');
				}
				return '<div>' + res.join('<br>') + '</div>';
			}
			return rec(struct, 0);
		}
	}

},{}],15:[function(require,module,exports){
var fields = ['classnames', 'tagname', 'str', 'quoted_str'];
var init_if_empty = function(obj/*key, val, key1, val1, ... */) {
	for(let i  = 1; ;i = i + 2){
		var key = arguments[i];
		var val = arguments[i + 1];
		if(!key) break;

		if(obj[key] === undefined){
			obj[key] = val;
		}
		obj = obj[key];
	}
	return obj;
}
module.exports = {
	empty_chars: [' '],
	syntax: {
		root_token: {
			children: [
				'>',
				{
					type: 'item',
					multiple: true,
					optional: true,
				},
			]
		},
		item: {
			children: [
				'>',
				{
					type: 'indent',
					optional: true,
				},
				[
					'|',
					{
						type: 'new_if',
							optional: true,
					},
					{
						type: 'new_elseif',
							optional: true,
					},
					{
						type: 'new_else',
							optional: true,
					},
					{
						type: 'ternary_else',
					},
					[
						'>',
						{
							type: 'tagname',
							optional: true,
						},
						{
							type: 'classnames',
							optional: true,
						},
						[
							'|', 
							{
								type: 'quoted_str',
								optional: true,
							}, {
								type: 'variable',
								optional: true,
							},
							'optional'
						],
						{
							type: 'bracket',
							optional: true,
						},
						{
							type: 'str',
							optional: true,
						},
					],
				],
				{
					type: 'lineend',
				}
			]
		},
		comma: {
			regex: /^\,\s?$/,
			free_chars: true,
		},
		bracket: {
			start: '(',
			children: [
				'>',
				{
					type: 'assign',
					optional: true,
				},
				[
					'>',
					{
						type: 'comma',
					},
					{
						type: 'assign'
					},
					'optional'
				]

			],
			end: ')',
		},
		assign: {
			free_chars: true,
			regex: /^[^\)^\,]*$/
		},
		quoted_str: {
			start: '"',
			end: '"',
			free_chars: true,
		},
		variable: {
			children: [
				'>',
				{
					type: 'varname',
				},
				{
					type: 'ternary_if',
					optional: true,
				}
			]
		},
		ternary_if: {
			regex: /^\?$/,
			free_chars: true,
		},
		ternary_else: {
			regex: /^\:$/,
			free_chars: true,
		},
		new_if: {
			regex: /^\?\s?(.*)?$/,
			free_chars: true,
		},
		new_elseif: {
			regex: /^\*\s?(.*)?$/,
			free_chars: true,
		},
		new_else: {
			regex: /^\:$/,
			free_chars: true,
		},
		varname: {
			regex: /^\$[a-zA-Z0-9\-\_]*$/,
			free_chars: true,
		},
		indent: {
			regex: /^\t+$/,
			free_chars: true,
		},
		classnames: {
			regex: /^\.[\\.a-zA-Z0-9\-\_]*$/,
			free_chars: true,
		},
		tagname: {
			regex: /^[a-zA-Z0-9]+$/,
			free_chars: true,
		},
		str: {
			regex: /^[^\n]+$/,
			free_chars: true,
		},
		lineend: {
			regex: /\n$/,
			free_chars: true,
		},
	},
	semantics: {
		root_token: {
			func: (struct, parser) => {

				var res = {children: []};
				var last_of_level = {
					"-1": res,
				}
				var che_results = parser(struct.children);
				//console.log('Results', che_results);
				var max_level = 0;
				var last_if = [];
				for(let i in che_results){
					let child = che_results[i];
					if(!child.tagname && !child.classnames && !child.quoted_str && !child.variable && !child.type) {
						continue;
					}
					if(child.type === 'IF'){
						last_if.push(child);
					}
					if(child.type === 'ELSE'){
						var lif = last_if.pop();
						lif.else_children = child;
					}
					var lvl = child.level || 0;
					if(lvl > max_level){
						max_level = lvl;
					}
					var put_to = lvl - 1;
					child.children = [];
					if(!last_of_level[put_to]){
						for(;put_to--;put_to > -2){
							if(last_of_level[put_to]) break;
						}
						if(!last_of_level[put_to]){
							continue;
						}
					}
					//console.log('putting', child, put_to, 'to', last_of_level[put_to]);
					last_of_level[put_to].children.push(child);
					last_of_level[lvl] = child;
					if(lvl + 1 < max_level){
						//console.log('lvl', lvl+1, max_level);
						var j = lvl + 1;
						for(var j = lvl + 1;j <= max_level;j++){
							if(!last_of_level[j]) break;
							//console.log('delete', last_of_level[j]);
							delete last_of_level[j];
						}
					}
				}
				return res.children;
			}
		},
		item: {
			func: (struct, parser) => {
				var res = {};
				for(let child of struct.children){
					switch(child.type){
						case 'variable':
							res.varname = child.children[0].chars.slice(1);
							if(child.children[1]){
								res.type = "IF";
							}
						break;
						case 'ternary_else':
							res.type = "ELSE";
						break;
						case 'new_if':
							var chars = child.chars;
							res.varname = chars.match(/\$([^\s]*)/)[1];
							res.expr = chars.replace(/\?\s?/, '').replace('$' + res.varname, 'ctx.' + res.varname);
							res.type = child.type.toUpperCase();
						break;
						case 'new_elseif':
							var chars = child.chars;
							res.varname = chars.match(/\$([^\s]*)/)[1];
							res.expr = chars.replace(/\*\s?/, '').replace('$' + res.varname, 'ctx.' + res.varname);
							res.type = child.type.toUpperCase();
						break;
						case 'new_else':
							res.type = child.type.toUpperCase();
						break;
						case 'indent':
							res.level = child.chars.length;
							//console.log('INDEX', res.level);
						break;
						case 'bracket':
							res.assignments = [];
							for(let child1 of child.children){
								if(child1.type === 'assign'){
									var assign = child1.chars.split(':');
									var key = assign[0].trim();
									var val = assign[1].trim();
									if(val[0] === '$'){
										// its var
										let varname = val.length === 1 ? key : val.substr(1);
										init_if_empty(res, 'attrStyleVars', []).push([varname, key]);
									}
									res.assignments.push([key, val]);
								}
							}
							//console.log('INDEX', res.level);
						break;
					}
					if(fields.indexOf(child.type) !== -1){
						res[child.type] = child.chars;
					}
				}
				return res;
			}
		},
		indent: {
			type: 'chars',
		}
	}
}

},{}],16:[function(require,module,exports){
var ozenfant_config = require('./config');
var parser = require('../ooo_oo_o/parser').get_parser(ozenfant_config);

var init_if_empty = function(obj/*key, val, key1, val1, ... */) {
	for(let i  = 1; ;i = i + 2){
		var key = arguments[i];
		var val = arguments[i + 1];
		if(!key) break;

		if(obj[key] === undefined){
			obj[key] = val;
		}
		obj = obj[key];
	}
	return obj;
}

var html_attrs = new Set(['href', 'src', 'style', 'target', 'id', 'class', 'rel', 'type', 'value'])
var is_attr = (str) => {
	return html_attrs.has(str) || str.match(/^data\-/);
}

var text_var_regexp = /\{\{([a-zA-Z0-9]*)\}\}/g;///\$([a-zA-Z0-9]*)/g;

var Ozenfant = function(str){
	if(str instanceof Object){
		this.struct = str;// compiled struct
		this.node_vars_paths = this.struct.node_vars_paths;
		this.text_vars_paths = this.struct.text_vars_paths;
		this.nodes_vars = this.struct.nodes_vars;
		this.var_types = this.struct.var_types;
		this.varname_pool = this.struct.varname_pool;
		this.if_else_tree = this.struct.if_else_tree;
	} else {
		this.struct = parser(str + `
`);
		this.node_vars_paths = {};
		this.text_vars_paths = {};
		this.nodes_vars = {};
		this.var_types = {};
		this.varname_pool = {
			vars: {},
			var_aliases: {},
		};
		this.if_else_tree = {str_to_func: {}, var_funcs: {}};
		get_vars({children: this.struct.semantics, root: true}
			, this.node_vars_paths
			, this.text_vars_paths
			, this.nodes_vars
			, '.'
			, this.var_types
			, []
			, this.varname_pool
			, this.if_else_tree
		);
	}
	this.state = {};
	this.bindings = {};

	this.getIfElseVarsIndex();
};

var create_func = (str, condition) => {
	var body = "'" + str + "'";
	if(condition){
		body = condition + ' ? ' + body + ' : false';
	}
	return new Function('ctx', 'return ' + body + ';');
}

Ozenfant.prepare = (str) => {
	var struct = parser(str + `
`);
	struct.node_vars_paths = {};
	struct.text_vars_paths = {};
	struct.nodes_vars = {};
	struct.var_types = {};
	struct.varname_pool = {
		vars: {},
		var_aliases: {},
	};
	struct.func = create_func(toFunc({children: struct.semantics}));
	struct.if_else_tree = {str_to_func: {}, var_funcs: {}};
	get_vars({children: struct.semantics, root: true}
		, struct.node_vars_paths
		, struct.text_vars_paths
		, struct.nodes_vars
		, '.'
		, struct.var_types
		, []
		, struct.varname_pool
		, struct.if_else_tree
	);
	
	return struct;
}

var get_varname = (node) => {
	var key = node.varname;
	if(!key.length){
		if(node.classnames){
			key = node.classnames.substr(1).split('.')[0];
		} else {
			console.warn('Incorrect statement: variable without name and default class!');
		}
	}
	return key;
}

var register_varname = (varname, varname_pool, if_else_deps, if_else_tree) => {
	if(varname_pool.vars[varname]){
		// already exists!
		init_if_empty(varname_pool.var_aliases, varname, []);
		var new_name = 'ololo@!@!#_' + varname + '_' + varname_pool.var_aliases[varname].length;
		varname_pool.var_aliases[varname].push(new_name);
		varname = new_name;
	} else {
		varname_pool.vars[varname] = true;
	}
	var deps = if_else_deps.length ? ('(' + if_else_deps.join(') && (') + ')') : false;
	if(deps){
		if(if_else_tree.str_to_func[deps]){
			if_else_tree.var_funcs[varname] = if_else_tree.str_to_func[deps];
		} else {
			if_else_tree.var_funcs[varname] = if_else_tree.str_to_func[deps] = new Function('ctx', 'return ' + deps);
		}
	}
	return varname;
}

var add_to_if_else_pool = (pools, varname, path) => {
	for(var pool of pools){
		pool[varname] = path;
	}
}

var is_new_if = (a) => {
	return ['NEW_ELSE', 'NEW_ELSEIF', 'NEW_IF'].indexOf(a.type) !== -1;
}

var get_partial_func = (node) => {
	if(node.partial_func) {
		return node.partial_func;
	} else {
		if(node.root){
			return 'USE_ROOT_FUNC';
		}
	}
	
}

var get_vars = (node, node_pool, text_pool, path_pool, path, types, if_else_deps, varname_pool, if_else_tree) => {
	if(node === undefined) debugger;
	//if_else_deps = [...if_else_deps];
	if(node.children){
		var nodes_lag = 0;
		var text_lag = 0;
		var resigtered_vars = {};
		for(var i in node.children){
			var zild = node.children[i];
			var new_path = path;
			if(!is_new_if(zild)){
				if(!zild.tagname && !zild.classnames){
						++nodes_lag;
				} else {
						++text_lag;
				}
				new_path = path + '/*[' + (Number(i) + 1 - nodes_lag) + ']';
			}
			if(zild.type && (
					zild.type === 'ELSE' 
					|| zild.type === 'IF'
					|| zild.type === 'NEW_IF'
					|| zild.type === 'NEW_ELSEIF'
					|| zild.type === 'NEW_ELSE')){
				if(zild.type === 'NEW_IF'){
					var varname = register_varname(get_varname(zild), varname_pool, if_else_deps, if_else_tree);
					resigtered_vars[varname] = true;
					node_pool[varname] = new_path;
					types[varname] = get_partial_func(node);
					var my_if_else_deps = [...if_else_deps];
					my_if_else_deps.push(zild.expr)
					get_vars(zild, node_pool, text_pool, path_pool, new_path, types, my_if_else_deps, varname_pool, if_else_tree);
					continue;
				}
				if(zild.type === 'NEW_ELSEIF' || zild.type === 'NEW_ELSE'){
					var varname = get_varname(zild);
					if(!resigtered_vars[varname]){
						register_varname(varname, varname_pool, if_else_deps, if_else_tree);
					}
					types[varname] = get_partial_func(node);
					node_pool[varname] = new_path;
					var my_if_else_deps = [...if_else_deps];
					my_if_else_deps.push(zild.real_expr)
					get_vars(zild, node_pool, text_pool, path_pool, new_path, types, my_if_else_deps, varname_pool, if_else_tree);
					continue;
				}
				if(zild.type === 'ELSE'){
					return;
				}
				if(zild.type === 'IF'){
					var varname = register_varname(get_varname(zild), varname_pool, if_else_deps, if_else_tree);
					node_pool[varname] = new_path;
					types[varname] = {
						type: 'IF',
						struct: zild,
						if_pool,
						else_pool,
					};
					get_vars(zild, node_pool, text_pool, path_pool, new_path, types, [...if_else_deps], varname_pool, if_else_tree);
					if(zild.else_children){
						get_vars(zild.else_children, node_pool, text_pool, path_pool, new_path, types, [...if_else_deps], varname_pool, if_else_tree);
					}
				} else {
					get_vars(zild, node_pool, text_pool, path_pool, new_path, types, if_else_deps, varname_pool, if_else_tree);
				}
			} else {
				if(zild.varname !== undefined){
					var varname = register_varname(get_varname(zild), varname_pool, if_else_deps, if_else_tree);
					node_pool[varname] = new_path;
				}
				if(zild.attrStyleVars){
					for(let [varname, attrname] of zild.attrStyleVars){
						varname = register_varname(varname, varname_pool, if_else_deps, if_else_tree);
						node_pool[varname] = new_path;
						let as_type = is_attr(attrname) ? 'ATTR' : 'STYLE';
						types[varname] = {
							type: as_type,
							name: attrname,
						}
					}
					get_vars(zild, node_pool, text_pool, path_pool, new_path, types, [...if_else_deps], varname_pool, if_else_tree);
				} 
				if(zild.quoted_str){
					//console.log('str!', node.children[i].quoted_str);
					zild.quoted_str.replace(text_var_regexp, (_, key) => {
						var text_path = path + '/text()[' + (Number(i) + 1 - text_lag) + ']';
						varname = register_varname(key, varname_pool, if_else_deps, if_else_tree);
						if(!path_pool[text_path]){
							path_pool[text_path] = zild.quoted_str;
						}
						text_pool[varname] = text_path;
						//console.log('text key found', key, text_path);
					})
				} 
				get_vars(zild, node_pool, text_pool, path_pool, new_path, types, [...if_else_deps], varname_pool, if_else_tree);
			}
		}
	}
}

var input_types = new Set(['text', 'submit', 'checkbox', 'radio']);

var toHTML = function(node, context, parent_tag){
	var indent = `
` + new Array(node.level).join('	');
	//indent = '';// !
	var res1 = [], res2 = [], after = '';
	if(node.type === 'ELSE'){
		return '';
	}
	var childs = node.children;
	if(node.type === 'IF'){
		if(!context[node.varname]){
			// "ELSE" part
			if(node.else_children){
				childs = node.else_children.children;
			} else {
				childs = [];
			}
		}
	}
	if(node.tagname || node.classnames || !parent_tag){
		// it's a node
		var tag;
		if(node.tagname){
			if(input_types.has(node.tagname)) {
				node.assignments = node.assignments || [];
				node.assignments.push(['type', node.tagname]);
				tag = 'input';
			} else {
				tag = node.tagname;
			}
		} else {
			switch(parent_tag){
				case 'ol':
				case 'ul':
					tag = 'li';
				break;
				case 'tr':
					tag = 'td';
				break;
				default:
					tag = 'div';
				break;
			}
		}
		for(let child of childs){
			res1.push(toHTML(child, context, tag));
		}
		if(parent_tag){
			res2.push(indent + '<' + tag);
			if(node.classnames && node.classnames.length > 1){
				res2.push(' class="' + node.classnames.substr(1).replace(/\./g, " ") + '"');
			}
			if(node.assignments){
				var styles = [];
				for(let ass of node.assignments){
					var [key, val] = ass;
					if(val[0] === '$'){
						// its variable, lets take its val from context
						var real_key = val.length === 1 ? key : val.substr(1);
						val = context[real_key] !== undefined ? context[real_key] : '';
					}
					if(is_attr(key)){
						res2.push(' ' + key + '="' + val + '"');
					} else {
						styles.push(key + ': ' + val + ';');
					}
				}
				if(styles.length){
					res2.push(' style="' + styles.join('') + '"');
				}
			}
			res2.push('>');
			if(node.varname !== undefined && !node.type){
				var key = get_varname(node);
				res2.push(indent + '	' + (context[key] !== undefined ? context[key] : ''));
			} else {
				res2.push(res1.join(' '));
			}
			res2.push(indent + '</' + tag + '>');
			return res2.join('');
		}
	} else {
		// its var of text node
		if(node.quoted_str){
			return indent + node.quoted_str.replace(text_var_regexp, function(_, key){
				//console.log('Found!', key, context[key]);
				return context[key] !== undefined ? context[key] : '';
			});
		}
		if(node.variable){
			return indent + node.variable;
		}
	}
	return res1.join(' ');
}

var getvar = (key) => {
	return "' + (ctx." + key + " || '') + '";
}

var get_children_html = (childs, parent_tag, if_stack, pp) => {
	var res1 = [];
	for(let child of childs){
		res1.push(toFunc(child, parent_tag, if_stack, pp));
	}
	return res1.join('');
}

var toFunc = function(node, parent_tag, if_stack = {}, partial_pool = false){
	node.parent = parent;
	var childs = node.children;
	var indent = ` ' + 
'` + new Array(node.level).join('	');
	//indent = '';// !
	var res1 = [], res2 = [], after = '', res_final;
	var childs_html = '';
	var need_partial_func = false;
	var pp = false;
	for(let child of childs){
		if(is_new_if(child)){
			need_partial_func = true;
			pp = [];
			break;
		}
	}
	if(node.type === 'ELSE' || is_new_if(node)){
		switch(node.type){
			case 'ELSE':
				res1.push(indent + "' + (!ctx." + node.varname + " ? ('");
				childs_html = get_children_html(childs, parent_tag, if_stack, pp);
				res1.push(childs_html);
				res1.push(indent + "') : '' ) + '");
				res1.push(node.after);
			break;
			case 'NEW_IF':
				//console.log('IF STACK', if_stack);
				if_stack[node.level] = [node.varname, node.expr, []];
				res1.push(indent + "' + (" + node.expr + " ? ('");
				childs_html = get_children_html(childs, parent_tag, if_stack, pp);
				res1.push(childs_html);
				res1.push(indent + "') : '' ) + '");
			break;
			case 'NEW_ELSEIF':
				var [varname, expr, elifs] = if_stack[node.level];
				if_stack[node.level][2].push(node.expr);
				node.real_expr = node.expr + " && !(" + expr + ")";
				res1.push(indent + "' + ((" + node.expr + " && !(" + expr + ")) ? ('");
				childs_html = get_children_html(childs, parent_tag, if_stack, pp);
				res1.push(childs_html);
				res1.push(indent + "') : '' ) + '");
			break;
			case 'NEW_ELSE':
				var [varname, expr, elifs] = if_stack[node.level];
				node.varname = varname;
				node.real_expr = "!(" + expr + "" + (elifs.length ? ' || ' + elifs.join(' || ') : '') + ")";
				res1.push(indent + "' + (!(" + expr + "" + (elifs.length ? ' || ' + elifs.join(' || ') : '') + ") ? ('");
				childs_html = get_children_html(childs, parent_tag, if_stack, pp);
				res1.push(childs_html);
				res1.push(indent + "') : '' ) + '");
			break;
		}
	} else if (node.tagname || node.classnames || !parent_tag || node.type === 'IF'){
		// it's a node
		var tag;
		if(node.tagname){
			if(input_types.has(node.tagname)) {
				node.assignments = node.assignments || [];
				node.assignments.push(['type', node.tagname]);
				tag = 'input';
			} else {
				tag = node.tagname;
			}
		} else {
			switch(parent_tag){
				case 'ol':
				case 'ul':
					tag = 'li';
				break;
				case 'tr':
					tag = 'td';
				break;
				default:
					tag = 'div';
				break;
			}
		}
		
		if(node.type === 'IF'){
			//childs = childs.concat(node.else_children.children);
			//console.log('IF!', node);
			if(node.else_children){
				node.else_children.varname = node.varname;
			}
			res1.push(indent + "' + (ctx." + node.varname + " ? ('");
			for(let child of childs){
				res1.push(toFunc(child, tag, if_stack, pp));
			}
			res1.push(indent + "') : '' ) + '");
		} else {
			childs_html = get_children_html(childs, tag, if_stack, pp);
			res1.push(childs_html);
		}
		if(parent_tag){
			res2.push(indent + '<' + tag);
			if(node.classnames && node.classnames.length > 1){
				res2.push(' class="' + node.classnames.substr(1).replace(/\./g, " ") + '"');
			}
			if(node.assignments){
				var styles = [];
				for(let ass of node.assignments){
					var [key, val] = ass;
					if(val[0] === '$'){
						// its variable, lets take its val from context
						var real_key = val.length === 1 ? key : val.substr(1);
						val = getvar(real_key);
					}
					if(is_attr(key)){
						res2.push(' ' + key + '="' + val + '"');
					} else {
						styles.push(key + ': ' + val + ';');
					}
				}
				if(styles.length){
					res2.push(' style="' + styles.join('') + '"');
				}
			}
			res2.push('>');
			if(node.varname !== undefined && !node.type){
				var key = get_varname(node);
				res2.push(indent + getvar(key));
			} else {
				res2.push(res1.join(' '));
			}
			if(node.type === 'IF' && node.else_children){
				node.else_children.after = indent + '</' + tag + '>';
			} else {
				res2.push(indent + '</' + tag + '>');
			}
			res_final = res2.join('');
		}
	} else {
		// its var of text node
		if(node.quoted_str){
			res_final = indent + node.quoted_str.replace(text_var_regexp, function(_, key){
				//console.log('Found!', key, context[key]);
				return "' + ctx." + key + " + '";
			});
		}
		if(node.variable){
			res_final = indent + node.variable;
		}
	}
	res_final = res_final || res1.join('');
	if(need_partial_func){
		if(partial_pool){
			partial_pool.push(node);
			if(pp){
				for(let nd of pp){
					partial_pool.push(nd);
				}
			}
		} else {
			node.partial_func = create_func(childs_html);
			if(pp){
				for(let nd of pp){
					nd.partial_func = node.partial_func;
				}
			}
		}
	}
	return res_final;
}

Ozenfant.prototype.toHTML = function(context){
	if(context){
		this.state = context;
	} else {
		context = {};
	}
	if(!this.struct.func){
		var func_body = " return '" + toFunc({children: this.struct.semantics, root: true}) + "';";
		this.struct.func = new Function('ctx', func_body);
	}
	var a = this.struct.func(context);
	//var a = toHTML({children: this.struct.semantics}, context = context);
	return a;
}

Ozenfant.prototype.searchByPath = function(path){
	return Ozenfant.xpOne(path, this.root);
}

Ozenfant.prototype.getIfElseVarsIndex = function(){
	this.if_else_vars = {};
	for(var one in this.var_types){
		if(!(this.var_types[one] instanceof Object)) continue;
		for(var varname in this.var_types[one].if_pool){
			var path = this.var_types[one].if_pool[varname];
			init_if_empty(this.if_else_vars, varname, {}, one, true);
		}
		for(var varname in this.var_types[one].else_pool){
			var path = this.var_types[one].if_pool[varname];
			init_if_empty(this.if_else_vars, varname, {}, one, false);
		}
		for(var varname in this.var_types[one].my_pool){
			var path = this.var_types[one].my_pool[varname];
			var expr = this.var_types[one].struct.real_expr || this.var_types[one].struct.expr;
			init_if_empty(this.if_else_vars, varname, {}, one, expr);
		}
	}
}

Ozenfant.prototype.updateBindings = function(){
	this.bindings = {};
	for(let varname in this.node_vars_paths){
		if(this.if_else_vars[varname]){
			var breaker = false;
			for(let vn in this.if_else_vars[varname]){
				var expected_val = this.if_else_vars[varname][vn];
				var real_val = this.state[vn];
				// XOR
				if(!((expected_val && real_val) || !(expected_val || real_val))){
					breaker = true;
					break;
				}
			}
			if(breaker) { 
				continue;
			}
		}
		this.bindings[varname] = this.searchByPath(this.node_vars_paths[varname]);
		if(!this.bindings[varname]){
			//console.warn('No node found for var', varname, 'in path:', this.node_vars_paths[varname], 'in context', this.root, ', context', this.state);
		}
	}
	for(let varname in this.text_vars_paths){
		this.bindings[varname] = this.searchByPath(this.text_vars_paths[varname]);
		if(!this.bindings[varname]){
			console.warn('No node found for path:', this.text_vars_paths[varname], 'in context', this.root);
		}
	}
}
Ozenfant.prototype.render = function(node, context = false){
	this.root = node;
	if(context){
		this.state = context;
	}
	node.innerHTML = this.toHTML(this.state);
	this.updateBindings();
}
Ozenfant.prototype.getTokenStruct = function(node, level = 1){
	var start = !node;
	if(!node){
		node = this.struct.syntax;
	}
	var arr = [new Array(level).join('	') + node.type];
	if(node.children){
		for(var child of node.children){
			arr.push(this.getTokenStruct(child, level + 1));
		}
	}
	return (start ? `
` : '') + arr.join(`
`);
}

Ozenfant.prototype.getHTML = function(context = false){
	if(context) { 
		this.state = context;
	}
	return this.toHTML(this.state);
}
Ozenfant.prototype.setRoot = function(node){
	this.root = node;
	return this;
}
Ozenfant.prototype._setVarVal = function(key, val){
	if(this.if_else_vars[key]){
		//console.log('ifelsevar', key, this.if_else_vars[key]);
		for(var varname in this.if_else_vars[key]){
			var flag = this.if_else_vars[key][varname] ? this.state[varname] : !this.state[varname];
			if(!flag) {
				// this var is in inactive block
				return;
			}
		}
	}
	if(val instanceof Object) return;
	this.bindings[key].textContent = val;
}
Ozenfant.prototype.set = function(key, val){
	if(this.state[key] === val){
		return; 
	} 
	this.state[key] = val;
	if(this.varname_pool.var_aliases[key]){
		for(let k of this.varname_pool.var_aliases[key]){
			this.set(k, val);
		}
	}
	if(!this.bindings[key]){
		return;
	}
	if(!this.root) return;
	//console.log('path', this.text_vars_paths[key], 'vars', this.nodes_vars);
	if(this.if_else_tree.var_funcs[key]){
		//console.log('should check the func first!', key);
		if(!this.if_else_tree.var_funcs[key](this.state)){
			// no need to update anything in DOM - it's not an active branch
			return;
		}
	}
	if(this.nodes_vars[this.text_vars_paths[key]]){
		var template = this.nodes_vars[this.text_vars_paths[key]];
		//console.log('template!', template);
		var new_str = template.replace(text_var_regexp, (_, key) => {
			return this.state[key];
		});
		this._setVarVal(key, new_str);
		this.bindings[key].innerHTML = new_str;
	} else {
		if(this.var_types[key]){
			switch(this.var_types[key].type){
				case 'IF':
					var val;
					if(val){
						var struct = this.var_types[key].struct.children;
					} else {
						if(this.var_types[key].struct.else_children){
							var struct = this.var_types[key].struct.else_children.children;
						} else {
							this.updateBindings();
							return;
						}
					}
					var html = toHTML({children: struct}, this.state);
					this.bindings[key].innerHTML = html;
					// @todo should be optimized! update bindings only for dependent vars!
					this.updateBindings();
				break;
				case 'ATTR':
					this.bindings[key].setAttribute(this.var_types[key].name, val);
				break;
				case 'STYLE':
					this.bindings[key].style[this.var_types[key].name] = val;
				break;
				default:
					var func;
					if(this.var_types[key] === 'USE_ROOT_FUNC'){
						func = this.struct.func;
					}
					if(this.var_types[key] instanceof Function){
						func = this.var_types[key];
					}
					var html = func(this.state);
					//console.log('run func', func, 'of', key, 'val', val, /*'with state', JSON.stringify(this.state),*/ 'if_else_deps____html', html, 'to', this);
					this.bindings[key].innerHTML = html;
					this.updateBindings();
				break;
			}
		} else {
			this._setVarVal(key, val);
		}
	}
}
Ozenfant.xpOne = (path, node = document) => {
	//console.log('NODE', node);
	return document.evaluate(path, node, null, XPathResult.ANY_TYPE, null).iterateNext(); 
}

module.exports = Ozenfant;


},{"../ooo_oo_o/parser":14,"./config":15}],17:[function(require,module,exports){
module.exports=require(9)
},{}],18:[function(require,module,exports){
module.exports=require(5)
},{}],19:[function(require,module,exports){
module.exports=require(10)
},{"./config":17,"ooo_oo_o":18}]},{},[13])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6XFxQcm9qZWN0c1xcZmZhbWlseVxcZmlyZXJhXFxub2RlX21vZHVsZXNcXGJyb3dzZXItcGFja1xcX3ByZWx1ZGUuanMiLCJGOi9Qcm9qZWN0cy9mZmFtaWx5L2ZpcmVyYS9maXJlcmEuanMiLCJGOi9Qcm9qZWN0cy9mZmFtaWx5L2ZpcmVyYS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYXNzZXJ0L2Fzc2VydC5qcyIsIkY6L1Byb2plY3RzL2ZmYW1pbHkvZmlyZXJhL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwiRjovUHJvamVjdHMvZmZhbWlseS9maXJlcmEvbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIkY6L1Byb2plY3RzL2ZmYW1pbHkvZmlyZXJhL25vZGVfbW9kdWxlcy9vb29fb29fby9wYXJzZXIuanMiLCJGOi9Qcm9qZWN0cy9mZmFtaWx5L2ZpcmVyYS9ub2RlX21vZHVsZXMvb3plbmZhbnQvY29uZmlnLmpzIiwiRjovUHJvamVjdHMvZmZhbWlseS9maXJlcmEvbm9kZV9tb2R1bGVzL296ZW5mYW50L296ZW5mYW50LmpzIiwiRjovUHJvamVjdHMvZmZhbWlseS9maXJlcmEvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIkY6L1Byb2plY3RzL2ZmYW1pbHkvZmlyZXJhL25vZGVfbW9kdWxlcy9zaGNoZS9jb25maWcuanMiLCJGOi9Qcm9qZWN0cy9mZmFtaWx5L2ZpcmVyYS9ub2RlX21vZHVsZXMvc2hjaGUvc2hjaGUuanMiLCJGOi9Qcm9qZWN0cy9mZmFtaWx5L2ZpcmVyYS9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIkY6L1Byb2plY3RzL2ZmYW1pbHkvZmlyZXJhL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJGOi9Qcm9qZWN0cy9mZmFtaWx5L2ZpcmVyYS90ZXN0L3Rlc3QuanMiLCJGOi9Qcm9qZWN0cy9mZmFtaWx5L29vb19vb19vL3BhcnNlci5qcyIsIkY6L1Byb2plY3RzL2ZmYW1pbHkvb3plbmZhbnQvY29uZmlnLmpzIiwiRjovUHJvamVjdHMvZmZhbWlseS9vemVuZmFudC9vemVuZmFudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxMkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1K1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25XQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3ZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzc3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeFNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgT3plbmZhbnQgPSByZXF1aXJlKCcuLi9vemVuZmFudC9vemVuZmFudCcpO1xyXG52YXIgY2hlID0gcmVxdWlyZSgnLi4vc2hjaGUvc2hjaGUnKTtcclxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcclxuXHJcbnZhciBfRiA9IHt9O1xyXG5cclxudmFyIGFsd2F5cyA9IF9GLmFsd2F5cyA9IChhKSA9PiB7XHJcblx0cmV0dXJuICgpID0+IGE7XHJcbn1cclxuXHJcbnZhciBpbml0X2lmX2VtcHR5ID0gX0YuaW5pdF9pZl9lbXB0eSA9IGZ1bmN0aW9uKG9iai8qa2V5LCB2YWwsIGtleTEsIHZhbDEsIC4uLiAqLykge1xyXG5cdGZvcihsZXQgaSAgPSAxOyA7aSA9IGkgKyAyKXtcclxuXHRcdHZhciBrZXkgPSBhcmd1bWVudHNbaV07XHJcblx0XHR2YXIgdmFsID0gYXJndW1lbnRzW2kgKyAxXTtcclxuXHRcdGlmKCFrZXkpIGJyZWFrO1xyXG5cclxuXHRcdGlmKG9ialtrZXldID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRvYmpba2V5XSA9IHZhbDtcclxuXHRcdH1cclxuXHRcdG9iaiA9IG9ialtrZXldO1xyXG5cdH1cclxuXHRyZXR1cm4gb2JqO1xyXG59XHJcblxyXG5cclxudmFyIHRocm90dGxlID0gX0YudGhyb3R0bGUgPSBmdW5jdGlvbih0aHVuaywgdGltZSl7XHJcblx0dmFyIGlzX3Rocm90dGxlZCA9IGZhbHNlO1xyXG5cdHZhciBwZW5kaW5nID0gZmFsc2U7XHJcblx0cmV0dXJuICgpID0+IHtcclxuXHRcdGlmKCFpc190aHJvdHRsZWQpe1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKCdydW4hJyk7XHJcblx0XHRcdHRodW5rKCk7XHJcblx0XHRcdGlzX3Rocm90dGxlZCA9IHRydWU7XHJcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdGlzX3Rocm90dGxlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdGlmKHBlbmRpbmcpe1xyXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncnVuIHBlbmRpbmchJyk7XHJcblx0XHRcdFx0XHR0aHVuaygpO1xyXG5cdFx0XHRcdFx0cGVuZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGltZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKCdza2lwIScpO1xyXG5cdFx0XHRwZW5kaW5nID0gdHJ1ZTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbnZhciBsb2cgPSAoKSA9PiB7fTsvLyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xyXG5cclxudmFyIGRlY29yYXRlID0gKGZuYywgbXNnKSA9PiB7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCl7XHJcblx0XHRjb25zb2xlLmxvZyhcIkBcIiwgbXNnLCBhcmd1bWVudHMpO1xyXG5cdFx0cmV0dXJuIGZuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG5cdH1cclxufVxyXG5cclxudmFyIG1rX2xvZ2dlciA9IChhKSA9PiB7XHJcblx0cmV0dXJuIChiKSA9PiB7XHJcblx0XHRjb25zb2xlLmxvZyhhLCBiKTtcclxuXHRcdHJldHVybiBiO1xyXG5cdH1cclxufVxyXG5cclxudmFyIGdyb3VwX2J5ID0gX0YuZ3JvdXBfYnkgPSAgKGFyciwgcHJvcF9vcl9mdW5jKSA9PiB7XHJcblx0dmFyIHJlcyA9IHt9O1xyXG5cdGZvcihsZXQgb2JqIG9mIGFycil7XHJcblx0XHRpbml0X2lmX2VtcHR5KHJlcywgcHJvcF9vcl9mdW5jIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBwcm9wX29yX2Z1bmMob2JqKSA6IG9ialtwcm9wX29yX2Z1bmNdLCBbXSkucHVzaChvYmopO1xyXG5cdH1cclxuXHRyZXR1cm4gcmVzO1xyXG59XHJcblxyXG52YXIgZnJvemVuID0gX0YuZnJvemVuID0gIChhKSA9PiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGEpKTtcclxuXHJcbnZhciBpZCA9IF9GLmlkID0gKGEpID0+IGE7XHJcbnZhciBpZHMgPSBfRi5pZHMgPSBmdW5jdGlvbigpe1xyXG5cdHJldHVybiBhcmd1bWVudHM7XHJcbn1cclxuXHJcbnZhciBhcnJfcmVtb3ZlID0gX0YuYXJyX3JlbW92ZSA9IChhcnIsIGVsKSA9PiB7XHJcblx0dmFyIHBvcyA9IGFyci5pbmRleE9mKGVsKTtcclxuXHRpZihwb3MgIT09IC0xKXtcclxuXHRcdGFyci5zcGxpY2UocG9zLCAxKTtcclxuXHR9XHJcbn1cclxuXHJcbnZhciBhcnJfZGlmZmVyZW50ID0gX0YuYXJyX2RpZmZlcmVudCA9IGZ1bmN0aW9uKGFycjEsIGFycjIsIGNiKXtcclxuXHRmb3IodmFyIGkgaW4gYXJyMSl7XHJcblx0XHRpZihhcnIyW2ldID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRjYihpKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxudmFyIGFycl9jb21tb24gPSBfRi5hcnJfY29tbW9uID0gZnVuY3Rpb24oYXJyMSwgYXJyMiwgY2Ipe1xyXG5cdGZvcih2YXIgaSBpbiBhcnIxKXtcclxuXHRcdGlmKGFycjJbaV0gIT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdGNiKGkpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxudmFyIGFycl9kZWx0YXMgPSBfRi5hcnJfZGVsdGFzID0gKG9sZF9hcnIsIG5ld19hcnIpID0+IHtcclxuXHR2YXIgbmV3X29uZXMgPSBhcnJfZGlmZihuZXdfYXJyLCBvbGRfYXJyKTtcclxuXHR2YXIgcmVtb3ZlX29uZXMgPSBhcnJfZGlmZihvbGRfYXJyLCBuZXdfYXJyKTtcclxuXHR2YXIgY2hhbmdlZF9vbmVzID0gbmV3X2Fyci5tYXBGaWx0ZXIoKHYsIGspID0+IHtcclxuXHRcdGlmKG9sZF9hcnJba10gIT09IHYgJiYgb2xkX2FycltrXSAhPT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0IHJldHVybiBrO1xyXG5cdFx0fVxyXG5cdH0pXHJcblx0Ly9jb25zb2xlLmxvZygnQ0hBTkdFRCBPTkVTJywgY2hhbmdlZF9vbmVzKTtcclxuXHR2YXIgZGVsdGFzID0gW10uY29uY2F0KFxyXG5cdFx0IG5ld19vbmVzLm1hcCgoa2V5KSA9PiBbJ2FkZCcsIGtleSwgbmV3X2FycltrZXldXSksXHJcblx0XHQgcmVtb3ZlX29uZXMubWFwKChrZXkpID0+IFsncmVtb3ZlJywga2V5XSksXHJcblx0XHQgY2hhbmdlZF9vbmVzLm1hcCgoa2V5KSA9PiBbJ2NoYW5nZScsIGtleSwgbmV3X2FycltrZXldXSlcclxuXHQpXHJcblx0cmV0dXJuIGRlbHRhcztcclxufVxyXG5cclxudmFyIGFycl9maXhfa2V5cyA9IF9GLmFycl9maXhfa2V5cyA9IChhKSA9PiB7XHJcblx0dmFyIGZpeGVkX2FyciA9IFtdO1xyXG5cdGZvcihsZXQgaSBvZiBhKXtcclxuXHRcdGlmKGkgIT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdGZpeGVkX2Fyci5wdXNoKGkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZml4ZWRfYXJyO1xyXG59XHJcblxyXG52YXIgYXJyX2RpZmYgPSBfRi5hcnJfZGlmZiA9IGZ1bmN0aW9uKGEsIGIpe1xyXG5cdHZhciBkaWZmID0gW107XHJcblx0Zm9yKHZhciBpIGluIGEpe1xyXG5cdFx0aWYoIWJbaV0pIGRpZmYucHVzaChpKTtcclxuXHR9XHJcblx0cmV0dXJuIGRpZmY7XHJcbn1cclxuXHJcbnZhciBzZWNvbmQgPSBfRi5zZWNvbmQgPSAoX18sIGEpID0+IGE7XHJcblxyXG52YXIgcGF0aF9jZWxsbmFtZSA9IChhKSA9PiBhLnNwbGl0KCcvJykucG9wKCk7XHJcblxyXG52YXIgaXNfc3BlY2lhbCA9IChhKSA9PiB7XHJcblx0cmV0dXJuICgoYS5pbmRleE9mKCcvJykgIT09IC0xKSB8fCAoYS5pbmRleE9mKCd8JykgIT09IC0xKSB8fCBhID09PSAnKicgfHwgYVswXSA9PT0gJyQnKTsgXHJcbn1cclxudmFyIGJtcyA9IHt9O1xyXG53aW5kb3cuYm0gPSB7XHJcblx0c3RhcnQ6IChicmFuY2gsIHRhZywgaWQpID0+IHtcclxuXHRcdGluaXRfaWZfZW1wdHkoYm1zLCBicmFuY2gsIHt9LCB0YWcsIHtzdW06IDB9LCAnaWRzJywge30sIGlkLCBwZXJmb3JtYW5jZS5ub3coKSk7XHJcblx0fSxcclxuXHRzdG9wOiAoYnJhbmNoLCB0YWcsIGlkKSA9PiB7XHJcblx0XHRibXNbYnJhbmNoXVt0YWddLmlkc1tpZF0gPSBwZXJmb3JtYW5jZS5ub3coKSAtIGJtc1ticmFuY2hdW3RhZ10uaWRzW2lkXTtcclxuXHR9LFxyXG5cdHJlcG9ydDogZnVuY3Rpb24obG9nZ2VyID0gZmFsc2Upe1xyXG5cdFx0aWYoIWxvZ2dlcil7XHJcblx0XHRcdGxvZ2dlciA9IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XHJcblx0XHR9XHJcblx0XHRmb3IobGV0IGIgaW4gYm1zKXtcclxuXHRcdFx0dmFyIGJyYW5jaCA9IGJtc1tiXTtcclxuXHRcdFx0dmFyIGJyYW5jaF9zdW0gPSAwO1xyXG5cdFx0XHRmb3IobGV0IHQgaW4gYnJhbmNoKXtcclxuXHRcdFx0XHR2YXIgdGFnID0gYnJhbmNoW3RdO1xyXG5cdFx0XHRcdGZvcih2YXIgdHQgaW4gdGFnLmlkcyl7XHJcblx0XHRcdFx0XHR2YXIgdGltZSA9IHRhZy5pZHNbdHRdO1xyXG5cdFx0XHRcdFx0dGFnLnN1bSArPSB0aW1lO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRicmFuY2hfc3VtICs9IHRhZy5zdW07XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yKGxldCB0IGluIGJyYW5jaCl7XHJcblx0XHRcdFx0dmFyIHRhZyA9IGJyYW5jaFt0XTtcclxuXHRcdFx0XHR0YWcucGVyYyA9IDEwMCoodGFnLnN1bS9icmFuY2hfc3VtKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyh0LCAndGFnIHN1bScsIHRhZy5zdW0sICdicmFuY2ggc3VtJywgYnJhbmNoX3N1bSwgJyUnLCB0YWcucGVyYyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGNvbnNvbGUubG9nKGJtcyk7XHJcblx0fVxyXG59XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgJ21hcCcsIHtcclxuXHRlbnVtZXJhYmxlOiBmYWxzZSxcclxuXHR3cml0YWJsZTogdHJ1ZSxcclxuXHR2YWx1ZTogZnVuY3Rpb24oZnVuYywgY29uZil7XHJcblx0XHR2YXIgcmVzID0ge307XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHR2YXIgZXhjZXB0aW9ucyA9IGNvbmYgPyBjb25mLmV4Y2VwdCA6IGZhbHNlO1xyXG5cdFx0Zm9yKGxldCBrZXkgaW4gc2VsZil7XHJcblx0XHRcdGlmKGV4Y2VwdGlvbnMgJiYgZXhjZXB0aW9ucy5pbmRleE9mKGtleSkgIT09IC0xKXtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXNba2V5XSA9IGZ1bmModGhpc1trZXldLCBrZXkpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlcztcclxuXHR9XHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgJ2VhY2gnLCB7XHJcblx0ZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG5cdHdyaXRhYmxlOiB0cnVlLFxyXG5cdHZhbHVlOiBmdW5jdGlvbihmdW5jKXtcclxuXHRcdGZvcih2YXIga2V5IGluIHRoaXMpe1xyXG5cdFx0XHRpZihmdW5jKHRoaXNba2V5XSwga2V5KSA9PT0gZmFsc2Upe1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsICdlYWNoS2V5Jywge1xyXG5cdGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuXHR3cml0YWJsZTogdHJ1ZSxcclxuXHR2YWx1ZTogZnVuY3Rpb24oZnVuYyl7XHJcblx0XHRmb3IodmFyIGtleSBpbiB0aGlzKXtcclxuXHRcdFx0aWYoZnVuYyhrZXkpID09PSBmYWxzZSl7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnbWFwRmlsdGVyJywge1xyXG5cdGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuXHR3cml0YWJsZTogdHJ1ZSxcclxuXHR2YWx1ZTogZnVuY3Rpb24oZnVuYyl7XHJcblx0XHR2YXIgcmVzID0gW107XHJcblx0XHRmb3IodmFyIGtleSBpbiB0aGlzKXtcclxuXHRcdFx0dmFyIGE7XHJcblx0XHRcdGlmKChhID0gZnVuYyh0aGlzW2tleV0sIGtleSkpICE9PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdHJlcy5wdXNoKGEpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzO1xyXG5cdH1cclxufSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICd1bmlxdWUnLCB7XHJcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYSA9IHRoaXMuY29uY2F0KCk7XHJcbiAgICAgICAgZm9yKHZhciBpPTA7IGk8YS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBmb3IodmFyIGo9aSsxOyBqPGEubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgICAgIGlmKGFbaV0gPT09IGFbal0pXHJcbiAgICAgICAgICAgICAgICAgICAgYS5zcGxpY2Uoai0tLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYTtcclxuICAgIH1cclxufSk7XHJcblxyXG52YXIgY29weSA9IF9GLmNvcHkgPSBmdW5jdGlvbihmcm9tLCB0byl7XHJcblx0Zm9yKHZhciBpIGluIGZyb20pe1xyXG5cdFx0dG8ucHVzaChmcm9tW2ldKTtcclxuXHR9XHJcbn1cclxudmFyIGtjb3B5ID0gX0Yua2NvcHkgPSBmdW5jdGlvbihmcm9tLCB0byl7XHJcblx0Zm9yKGxldCBpIGluIGZyb20pe1xyXG5cdFx0dG9baV0gPSBmcm9tW2ldO1xyXG5cdH1cclxufVxyXG52YXIgY2VsbF9saXN0ZW5pbmdfdHlwZSA9IGZ1bmN0aW9uKHN0cil7XHJcblx0aWYoIXN0ci5tYXRjaCkgZGVidWdnZXI7XHJcblx0dmFyIG0gPSBzdHIubWF0Y2goL14oXFw6fFxcLXxcXD0pLyk7XHJcblx0cmV0dXJuIFt7XHJcblx0XHQvLyc6JzogJ2NoYW5nZScsIFxyXG5cdFx0Jz0nOiAnc2tpcF9zYW1lJywgXHJcblx0XHQnLSc6ICdwYXNzaXZlJywgXHJcblx0XHQndmFsJzogJ25vcm1hbCdcclxuXHR9W20gPyBtWzFdIDogJ3ZhbCddLCBzdHIucmVwbGFjZSgvXihcXDp8XFwtfFxcPSkvLCAnJyldO1xyXG59XHJcbnZhciBnZXRfcmVhbF9jZWxsX25hbWUgPSBmdW5jdGlvbihzdHIpe1xyXG5cdHJldHVybiBzdHJbMF0gPT09ICctJyA/IHN0ci5zbGljZSgxKSA6IHN0cjtcclxufVxyXG5cclxudmFyIHJlYWxfY2VsbF9uYW1lID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoL14oXFw6fFxcLXxcXD0pLywgJycpO1xyXG5cclxudmFyIGlzX2RlZiA9IChhKSA9PiB7XHJcblx0cmV0dXJuIChhICE9PSB1bmRlZmluZWQpICYmIChhICE9PSBGaXJlcmEudW5kZWYpO1xyXG59XHJcblxyXG52YXIgUGFja2FnZVBvb2wgPSBmdW5jdGlvbihwcm90byA9IHt9LCBhcHBfaWQpe1xyXG5cdHRoaXMuYXBwX2lkID0gYXBwX2lkO1xyXG5cdHRoaXMuY2VsbE1hdGNoZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgcHJvdG8uY2VsbE1hdGNoZXJzKTtcclxuXHR0aGlzLnByZWRpY2F0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCBwcm90by5wcmVkaWNhdGVzKTtcclxuXHR0aGlzLmVhY2hIYXNoTWl4aW4gPSBPYmplY3QuYXNzaWduKHt9LCBwcm90by5lYWNoSGFzaE1peGluKTtcclxufVxyXG5QYWNrYWdlUG9vbC5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKHBhY2spe1xyXG5cdGlmKHR5cGVvZiBwYWNrID09PSAnc3RyaW5nJyl7XHJcblx0XHRpZighRmlyZXJhLnBhY2thZ2VzQXZhaWxhYmxlW3BhY2tdKXtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignUGFja2FnZSBub3QgZm91bmQhJywgcGFjayk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHBhY2sgPSBGaXJlcmEucGFja2FnZXNBdmFpbGFibGVbcGFja107XHJcblx0fVxyXG5cdGtjb3B5KHBhY2suY2VsbE1hdGNoZXJzLCB0aGlzLmNlbGxNYXRjaGVycyk7XHJcblx0a2NvcHkocGFjay5wcmVkaWNhdGVzLCB0aGlzLnByZWRpY2F0ZXMpO1xyXG5cdGlmKHBhY2suZWFjaEhhc2hNaXhpbil7XHJcblx0XHQvLyB1cGRhdGUgdGhlIG1peGluIGZvciBlYWNoIGhhc2ggY3JlYXRlZFxyXG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLmVhY2hIYXNoTWl4aW4sIHBhY2suZWFjaEhhc2hNaXhpbik7XHJcblx0fVxyXG5cdGlmKHBhY2sub25IYXNoQ3JlYXRlZCl7XHJcblx0XHRpbml0X2lmX2VtcHR5KG9uSGFzaENyZWF0ZWRTdGFjaywgdGhpcy5hcHBfaWQsIFtdKTtcclxuXHRcdG9uSGFzaENyZWF0ZWRTdGFja1t0aGlzLmFwcF9pZF0ucHVzaChwYWNrLm9uSGFzaENyZWF0ZWQpO1xyXG5cdH1cclxufVxyXG5cclxudmFyIExpbmtNYW5hZ2VyID0gZnVuY3Rpb24oYXBwKXtcclxuXHR0aGlzLmFwcCA9IGFwcDtcclxuXHR0aGlzLmxpbmtzID0gW107XHJcblx0dGhpcy5saW5rU3RydWN0ID0ge307XHJcblx0dGhpcy53b3JraW5nTGlua3MgPSB7fTtcclxuXHR0aGlzLnBvaW50ZXJzID0ge307XHJcblx0dGhpcy5kb3VibGVBc3RlcmlzayA9IHt9O1xyXG5cdHRoaXMucGF0aFRvSWQgPSB7fTtcclxufTtcclxuXHJcbkxpbmtNYW5hZ2VyLnByb3RvdHlwZS5vbk5ld0hhc2hBZGRlZCA9IGZ1bmN0aW9uKHBhcmVudF9oYXNoX2lkLCBjaGlsZF9pZCl7XHJcblx0dmFyIGNoaWxkX3BhdGggPSB0aGlzLmFwcC5nZXRHcmlkKGNoaWxkX2lkKS5wYXRoXHJcblx0Ly9jb25zb2xlLmxvZygnbmV3IGhhc2ggYWRkZWQgdG8nLCBwYXJlbnRfaGFzaF9pZCwgJ2FzJywgY2hpbGRfaWQsIGNoaWxkX3BhdGgpO1xyXG5cdC8vIGFkZCBkb3VibGVBc3RlcmlzayBsaW5rc1xyXG5cdGZvcihsZXQgcGF0aCBpbiB0aGlzLmRvdWJsZUFzdGVyaXNrKXtcclxuXHRcdGlmKGNoaWxkX3BhdGguaW5kZXhPZihwYXRoKSA9PT0gMCl7XHJcblx0XHRcdC8vIGl0J3MgYSBjaGlsZCBvZiBtYXN0ZXIgaGFzaFxyXG5cdFx0XHRmb3IodmFyIGNlbGxuYW1lIGluIHRoaXMuZG91YmxlQXN0ZXJpc2tbcGF0aF0pe1xyXG5cdFx0XHRcdHRoaXMuYWRkV29ya2luZ0xpbmsoY2hpbGRfaWQsIGNlbGxuYW1lLCB0aGlzLnBhdGhUb0lkW3BhdGhdLCAnKiovJyArIGNlbGxuYW1lLCAnKionLCBjaGlsZF9wYXRoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHQvL1xyXG5cdGZvcih2YXIgbGlua19pZCBpbiB0aGlzLnBvaW50ZXJzW3BhcmVudF9oYXNoX2lkXSl7XHJcblx0XHR0aGlzLmFjdHVhbGl6ZUxpbmsobGlua19pZCwgY2hpbGRfaWQpO1xyXG5cdH1cclxufVxyXG5cclxuTGlua01hbmFnZXIucHJvdG90eXBlLnJlZnJlc2hQb2ludGVycyA9IGZ1bmN0aW9uKGxpbmtfaWQpe1xyXG5cdGZvcihsZXQgaGFzaF9pZCBpbiB0aGlzLnBvaW50ZXJzKXtcclxuXHRcdHZhciBsaW5rcyA9IHRoaXMucG9pbnRlcnNbaGFzaF9pZF07XHJcblx0XHRmb3IobGV0IGkgaW4gbGlua3Mpe1xyXG5cdFx0XHRpZihsaW5rc1tpXSA9PSBsaW5rX2lkKXtcclxuXHRcdFx0XHRsaW5rcy5zcGxpY2UoaSwgMSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0dmFyIGRhdGEgPSB0aGlzLmxpbmtzW2xpbmtfaWRdO1xyXG5cdGZvcihsZXQgcG9pbnRlciBvZiBkYXRhLnBvaW50ZXJzKXtcclxuXHRcdGluaXRfaWZfZW1wdHkodGhpcy5wb2ludGVycywgcG9pbnRlci5oYXNoX2lkLCB7fSwgbGlua19pZCwgZGF0YS5wYXRoW3BvaW50ZXIucG9zXSk7XHJcblx0XHQvL2xvZygnY29uc2lkZXJpbmcgcG9pbnRlcicsIGxpbmtfaWQsIGRhdGEuc3RyLCBwb2ludGVyKTtcclxuXHR9XHJcbn1cclxuXHJcbkxpbmtNYW5hZ2VyLnByb3RvdHlwZS5jaGVja1VwZGF0ZSA9IGZ1bmN0aW9uKG1hc3Rlcl9oYXNoX2lkLCBtYXN0ZXJfY2VsbCwgdmFsKXtcclxuXHRpZih0aGlzLndvcmtpbmdMaW5rc1ttYXN0ZXJfaGFzaF9pZF0gJiYgdGhpcy53b3JraW5nTGlua3NbbWFzdGVyX2hhc2hfaWRdW21hc3Rlcl9jZWxsXSl7XHJcblx0XHRpZih2YWwgPT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdHZhbCA9IHRoaXMuYXBwLmdldEdyaWQobWFzdGVyX2hhc2hfaWQpLmdldChtYXN0ZXJfY2VsbCk7XHJcblx0XHR9XHJcblx0XHRpZih2YWwgPT09IEZpcmVyYS51bmRlZil7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHZhciBsbmtzID0gdGhpcy53b3JraW5nTGlua3NbbWFzdGVyX2hhc2hfaWRdW21hc3Rlcl9jZWxsXTtcclxuXHRcdGZvcih2YXIgc2xhdmVfaGFzaF9pZCBpbiBsbmtzKXtcclxuXHRcdFx0Zm9yKHZhciBzbGF2ZV9jZWxsbmFtZSBpbiBsbmtzW3NsYXZlX2hhc2hfaWRdKXtcclxuXHRcdFx0XHR2YXIgY2VsbF92YWwgPSB2YWw7XHJcblx0XHRcdFx0aWYobG5rc1tzbGF2ZV9oYXNoX2lkXSAmJiBsbmtzW3NsYXZlX2hhc2hfaWRdW3NsYXZlX2NlbGxuYW1lXSl7XHJcblx0XHRcdFx0XHR2YXIgbGlua19kYXRhID0gbG5rc1tzbGF2ZV9oYXNoX2lkXVtzbGF2ZV9jZWxsbmFtZV07XHJcblx0XHRcdFx0XHRpZihsaW5rX2RhdGEubGlua19pZCA9PT0gJyoqJyl7XHJcblx0XHRcdFx0XHRcdGNlbGxfdmFsID0gW2NlbGxfdmFsLCBsaW5rX2RhdGEucGF0aF07XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR2YXIgZGF0YSA9IHRoaXMubGlua3NbbGlua19kYXRhLmxpbmtfaWRdO1xyXG5cdFx0XHRcdFx0XHRpZihkYXRhKXtcclxuXHRcdFx0XHRcdFx0XHRmb3IodmFyIGkgPSBkYXRhLnBhdGgubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pe1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoZGF0YS5wYXRoW2ldID09PSAnKicpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdBJywgaSwgZGF0YS5wYXRoLCBsaW5rX2RhdGEucGF0aFtpKzFdKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y2VsbF92YWwgPSBbbGlua19kYXRhLnBhdGhbaSsxXSwgY2VsbF92YWxdO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyB0aGUgdmVyeSBtZWFuaW5nIG9mIHRoaXMgbWV0aG9kXHJcblx0XHRcdFx0dmFyIHNsYXZlX2dyaWQgPSB0aGlzLmFwcC5nZXRHcmlkKHNsYXZlX2hhc2hfaWQpO1xyXG5cdFx0XHRcdGlmKCFzbGF2ZV9ncmlkKXtcclxuXHRcdFx0XHRcdHZhciBsbmsgPSB0aGlzLmxpbmtzW2xpbmtfZGF0YS5saW5rX2lkXTtcclxuXHRcdFx0XHRcdGxvZygnb2Jzb2xldGUgbGluayEnLCBsbmspO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRsb2coJyFzZXQnLCBzbGF2ZV9jZWxsbmFtZSwgY2VsbF92YWwpO1xyXG5cdFx0XHRcdFx0c2xhdmVfZ3JpZC5zZXQoc2xhdmVfY2VsbG5hbWUsIGNlbGxfdmFsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcbn1cclxuXHJcbkxpbmtNYW5hZ2VyLnByb3RvdHlwZS5hZGRXb3JraW5nTGluayA9IGZ1bmN0aW9uKG1hc3Rlcl9oYXNoX2lkLCBtYXN0ZXJfY2VsbG5hbWUsIHNsYXZlX2hhc2hfaWQsIHNsYXZlX2NlbGxuYW1lLCBsaW5rX2lkLCBwYXRoKXtcclxuXHRpbml0X2lmX2VtcHR5KHRoaXMud29ya2luZ0xpbmtzLCBtYXN0ZXJfaGFzaF9pZCwge30sIG1hc3Rlcl9jZWxsbmFtZSwge30sIHNsYXZlX2hhc2hfaWQsIHt9LCBzbGF2ZV9jZWxsbmFtZSwge2xpbmtfaWQsIHBhdGh9KTtcclxuXHQvL3RoaXMuYXBwLmdldEdyaWQoc2xhdmVfaGFzaF9pZCkuc2V0KHNsYXZlX2NlbGxuYW1lLCB2YWwpO1xyXG5cdHRoaXMuYXBwLmdldEdyaWQobWFzdGVyX2hhc2hfaWQpLmluaXRJZlNpZGVFZmZlY3RDZWxsKG1hc3Rlcl9jZWxsbmFtZSk7XHJcblx0dGhpcy5jaGVja1VwZGF0ZShtYXN0ZXJfaGFzaF9pZCwgbWFzdGVyX2NlbGxuYW1lKTtcclxufVxyXG5cclxuTGlua01hbmFnZXIucHJvdG90eXBlLmFjdHVhbGl6ZUxpbmsgPSBmdW5jdGlvbihsaW5rX2lkLCBmaXJzdF9jaGlsZF9pZCl7XHJcblx0dmFyIGdyaWRuYW1lLCBjdXJyZW50X3BvaW50ZXI7XHJcblx0dmFyIGRhdGEgPSB0aGlzLmxpbmtzW2xpbmtfaWRdO1xyXG5cdHZhciBjdXJyX2hhc2hfaWQgPSBkYXRhLmhhc2hfaWQsIGN1cnJfaGFzaDtcclxuXHRcclxuXHR2YXIgbW92ZV9mdXJ0aGVyID0gKGN1cnJfaGFzaF9pZCwgaSwgc3RhcnRfcG9zLCBwYXRoKSA9PiB7XHJcblx0XHRpZighcGF0aCkgZGVidWdnZXI7XHJcblx0XHRwYXRoID0gcGF0aC5zbGljZSgpO1xyXG5cdFx0dmFyIGN1cnJfaGFzaCA9IHRoaXMuYXBwLmdldEdyaWQoY3Vycl9oYXNoX2lkKTtcclxuXHRcdGlmKHBhdGguaW5kZXhPZihjdXJyX2hhc2gubmFtZSkgIT09IC0xKXtcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnaG0nLCBwYXRoLCBjdXJyX2hhc2gubmFtZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwYXRoLnB1c2goY3Vycl9oYXNoLm5hbWUpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGdyaWRuYW1lID0gZGF0YS5wYXRoW2ldO1xyXG5cdFx0dmFyIG5leHRfaGFzaF9pZDtcclxuXHRcdGlmKCFkYXRhLnBhdGhbaSArIDFdKXtcclxuXHRcdFx0Ly9sb2coJ35+fiBzdWNjZXNzIScsIGRhdGEuc3RyLCBwYXRoKTtcclxuXHRcdFx0Ly8gaXRzIGNlbGxuYW1lXHJcblx0XHRcdGlmKCFkYXRhLnBvaW50ZXJzW3N0YXJ0X3Bvc10uZml4ZWQpe1xyXG5cdFx0XHRcdGRhdGEucG9pbnRlcnMuc3BsaWNlKHN0YXJ0X3BvcywgMSk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5hZGRXb3JraW5nTGluayhjdXJyX2hhc2hfaWQsIGdyaWRuYW1lLCBkYXRhLmhhc2hfaWQsIGRhdGEuc2xhdmVfY2VsbG5hbWUsIGxpbmtfaWQsIHBhdGgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoZ3JpZG5hbWUgPT09ICcuLicpe1xyXG5cdFx0XHQvLyBsb29raW5nIGZvciBwYXJlbnRcclxuXHRcdFx0bmV4dF9oYXNoX2lkID0gY3Vycl9oYXNoLnBhcmVudDtcclxuXHRcdH0gZWxzZSBpZihncmlkbmFtZSA9PT0gJyonKXtcclxuXHRcdFx0Ly8gYWxsIGNoaWxkcmVuXHJcblx0XHRcdGlmKGkgPT09IGN1cnJlbnRfcG9pbnRlci5wb3Mpe1xyXG5cdFx0XHRcdGlmKGZpcnN0X2NoaWxkX2lkICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdC8vbG9nKCctLS0gY2hlY2tpbmcgZmlyc3QgY2hpbGQnLCBkYXRhLnN0ciwgbGlua19pZCwgZmlyc3RfY2hpbGRfaWQpO1xyXG5cdFx0XHRcdFx0bW92ZV9mdXJ0aGVyKGZpcnN0X2NoaWxkX2lkLCBpKzEsIHN0YXJ0X3BvcywgcGF0aCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGRhdGEucG9pbnRlcnNbc3RhcnRfcG9zXS5maXhlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRkYXRhLnBvaW50ZXJzW3N0YXJ0X3Bvc10uaGFzaF9pZCA9IGN1cnJfaGFzaF9pZDtcclxuXHRcdFx0XHRcdC8vbG9nKCctLS0gd2hhdCB0byBkbyB0aGVuPycsIGxpbmtfaWQsIDEsIGN1cnJfaGFzaC5saW5rZWRfaGFzaGVzKTtcclxuXHRcdFx0XHRcdGZvcih2YXIgY2hpbGRfbmFtZSBpbiBjdXJyX2hhc2gubGlua2VkX2hhc2hlcyl7XHJcblx0XHRcdFx0XHRcdHZhciBjaGlsZF9pZCA9IGN1cnJfaGFzaC5saW5rZWRfaGFzaGVzW2NoaWxkX25hbWVdO1xyXG5cdFx0XHRcdFx0XHRtb3ZlX2Z1cnRoZXIoY2hpbGRfaWQsIGkrMSwgc3RhcnRfcG9zLCBwYXRoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly9sb2coJy0tLSByZW1vdmUgb2xkIHBvaW50ZXInLCBsaW5rX2lkLCBkYXRhLnN0ciwgaSwgZGF0YS5wb2ludGVyc1tzdGFydF9wb3NdLmZpeGVkKTtcclxuXHRcdFx0XHQvLyByZW1vdmUgb2xkIHBvaW50ZXJcclxuXHRcdFx0XHRpZighZGF0YS5wb2ludGVyc1tzdGFydF9wb3NdLmZpeGVkKXtcclxuXHRcdFx0XHRcdGRhdGEucG9pbnRlcnMuc3BsaWNlKHN0YXJ0X3BvcywgMSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGRhdGEucG9pbnRlcnMucHVzaCh7XHJcblx0XHRcdFx0XHRwb3M6IGksXHJcblx0XHRcdFx0XHRoYXNoX2lkOiBjdXJyX2hhc2hfaWQsXHJcblx0XHRcdFx0XHRmaXhlZDogdHJ1ZSxcclxuXHRcdFx0XHRcdHBhdGhcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdGZvcih2YXIgY2hpbGRfbmFtZSBpbiBjdXJyX2hhc2gubGlua2VkX2hhc2hlcyl7XHJcblx0XHRcdFx0XHR2YXIgY2hpbGRfaWQgPSBjdXJyX2hhc2gubGlua2VkX2hhc2hlc1tjaGlsZF9uYW1lXTtcclxuXHRcdFx0XHRcdG1vdmVfZnVydGhlcihjaGlsZF9pZCwgaSsxLCBzdGFydF9wb3MsIHBhdGgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmKGN1cnJfaGFzaC5saW5rZWRfaGFzaGVzICYmIChjdXJyX2hhc2gubGlua2VkX2hhc2hlc1tncmlkbmFtZV0gIT09IHVuZGVmaW5lZCkpe1xyXG5cdFx0XHRcdG5leHRfaGFzaF9pZCA9IGN1cnJfaGFzaC5saW5rZWRfaGFzaGVzW2dyaWRuYW1lXTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdfX19fX19fX19fX19fIE5PVCBGT1VORCcpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYobmV4dF9oYXNoX2lkICE9PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRtb3ZlX2Z1cnRoZXIobmV4dF9oYXNoX2lkLCBpKzEsIHN0YXJ0X3BvcywgcGF0aCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZvcih2YXIgcG9pbnRlcl9pbmRleCBpbiBkYXRhLnBvaW50ZXJzKXtcclxuXHRcdHZhciBjdXJyZW50X3BvaW50ZXIgPSBkYXRhLnBvaW50ZXJzW3BvaW50ZXJfaW5kZXhdO1xyXG5cdFx0bW92ZV9mdXJ0aGVyKFxyXG5cdFx0XHRcdGN1cnJlbnRfcG9pbnRlci5oYXNoX2lkLCBcclxuXHRcdFx0XHRjdXJyZW50X3BvaW50ZXIucG9zLCBcclxuXHRcdFx0XHRwb2ludGVyX2luZGV4LCBcclxuXHRcdFx0XHRjdXJyZW50X3BvaW50ZXIucGF0aFxyXG5cdFx0KTtcclxuXHR9XHJcblx0dGhpcy5yZWZyZXNoUG9pbnRlcnMobGlua19pZCk7XHJcbn1cclxuXHJcbkxpbmtNYW5hZ2VyLnByb3RvdHlwZS5pbml0TGluayA9IGZ1bmN0aW9uKGhhc2hfaWQsIGxpbmssIHNsYXZlX2NlbGxuYW1lKXtcclxuXHR2YXIgcGF0aCA9IGxpbmsuc3BsaXQoJy8nKTtcclxuXHRpZihwYXRoLmxlbmd0aCA9PSAyICYmIHBhdGhbMF0gPT09ICcuLicpe1xyXG5cdFx0Lyp2YXIgY3Vycl9oYXNoID0gdGhpcy5hcHAuZ2V0R3JpZChoYXNoX2lkKTtcclxuXHRcdHZhciBwYXJlbnQgPSBjdXJyX2hhc2gucGFyZW50O1xyXG5cdFx0aWYocGFyZW50ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ3BhcmVudCB1bmRlZmluZWQhIGNoaWxkJywgY3Vycl9oYXNoKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5hZGRXb3JraW5nTGluayhwYXJlbnQsIHBhdGhbMV0sIGN1cnJfaGFzaC5pZCwgbGluayk7XHJcblx0XHQvL2NvbnNvbGUubG9nKCdTaW1wbGUhJywgbGluaywgcGFyZW50KTtcclxuXHRcdC8vdHRpbWVyLnN0b3AoJ2lsYycpO1xyXG5cdFx0cmV0dXJuOyovXHJcblx0fVxyXG5cdGlmKHBhdGhbMF0gPT0gJyoqJyl7XHJcblx0XHRpZihwYXRoLmxlbmd0aCA+IDIpe1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdZb3UgY2Fubm90IGxpc3RlbiB0byBzdWNoIHBhdGgnLCBwYXRoLmpvaW4oJy8nKSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHZhciBjZWxsbmFtZSA9IHBhdGhbMV07XHJcblx0XHR2YXIgZ3JpZF9wYXRoID0gdGhpcy5hcHAuZ2V0R3JpZChoYXNoX2lkKS5wYXRoO1xyXG5cdFx0dGhpcy5wYXRoVG9JZFtncmlkX3BhdGhdID0gaGFzaF9pZDtcclxuXHRcdGluaXRfaWZfZW1wdHkodGhpcy5kb3VibGVBc3RlcmlzaywgZ3JpZF9wYXRoLCB7fSwgY2VsbG5hbWUsIHRydWUpO1xyXG5cdFx0Ly8gY2hlY2sgYWxyZWFkeSBhZGRlZCBncmlkc1xyXG5cdFx0dGhpcy5hcHAuZWFjaENoaWxkKGhhc2hfaWQsIChjaGlsZCkgPT4ge1xyXG5cdFx0XHR0aGlzLmFkZFdvcmtpbmdMaW5rKGNoaWxkLmlkLCBjZWxsbmFtZSwgaGFzaF9pZCwgJyoqLycgKyBjZWxsbmFtZSwgJyoqJywgY2hpbGQucGF0aCk7XHJcblx0XHR9KVxyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHRpZihwYXRoWzBdID09ICdeXicpe1xyXG5cdFx0aWYocGF0aC5sZW5ndGggPiAyKXtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignWW91IGNhbm5vdCBsaXN0ZW4gdG8gc3VjaCBwYXRoJywgcGF0aC5qb2luKCcvJykpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR2YXIgY2VsbG5hbWUgPSBwYXRoWzFdO1xyXG5cdFx0dGhpcy5hcHAuZWFjaFBhcmVudChoYXNoX2lkLCAoaGFzaCkgPT4ge1xyXG5cdFx0XHR0aGlzLmFkZFdvcmtpbmdMaW5rKGhhc2guaWQsIGNlbGxuYW1lLCBoYXNoX2lkLCAnXl4vJyArIGNlbGxuYW1lKTtcclxuXHRcdH0pXHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdGlmKHBhdGhbMF0gPT0gJycpe1xyXG5cdFx0aWYocGF0aC5sZW5ndGggPiAyKXtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignWW91IGNhbm5vdCBsaXN0ZW4gdG8gc3VjaCBwYXRoJywgcGF0aC5qb2luKCcvJykpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR2YXIgY2VsbG5hbWUgPSBwYXRoWzFdO1xyXG5cdFx0dmFyIGdyaWRfcGF0aCA9IHRoaXMuYXBwLmdldEdyaWQoaGFzaF9pZCkucGF0aDtcclxuXHRcdHRoaXMuYWRkV29ya2luZ0xpbmsodGhpcy5hcHAuaGFzaGVzWzFdLmlkLCBjZWxsbmFtZSwgaGFzaF9pZCwgJy8nICsgY2VsbG5hbWUpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHR2YXIgb2JqID0ge1xyXG5cdFx0cGF0aDogcGF0aCxcclxuXHRcdHRhcmdldDogcGF0aFtwYXRoLmxlbmd0aCAtIDFdLFxyXG5cdFx0cG9pbnRlcnM6IFt7XHJcblx0XHRcdHBvczogMCxcclxuXHRcdFx0cGF0aDogW10sXHJcblx0XHRcdGhhc2hfaWQsXHJcblx0XHRcdGZpeGVkOiBmYWxzZSxcclxuXHRcdH1dLFxyXG5cdFx0c3RyOiBsaW5rLFxyXG5cdFx0c2xhdmVfY2VsbG5hbWU6IHNsYXZlX2NlbGxuYW1lIHx8IGxpbmssXHJcblx0XHRoYXNoX2lkOiBoYXNoX2lkLFxyXG5cdFx0c3RhdHVzOiBudWxsLFxyXG5cdH07XHJcblx0aW5pdF9pZl9lbXB0eSh0aGlzLmxpbmtTdHJ1Y3QsIGhhc2hfaWQsIHt9KTtcclxuXHRpZih0aGlzLmxpbmtTdHJ1Y3RbaGFzaF9pZF1bbGlua10gPT0gdW5kZWZpbmVkKXtcclxuXHRcdHZhciBsaW5rX2lkID0gdGhpcy5saW5rcy5wdXNoKG9iaikgLSAxO1xyXG5cdFx0dGhpcy5saW5rU3RydWN0W2hhc2hfaWRdW2xpbmtdID0gbGlua19pZDtcclxuXHRcdHRoaXMuYWN0dWFsaXplTGluayhsaW5rX2lkKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhpcy5hY3R1YWxpemVMaW5rKHRoaXMubGlua1N0cnVjdFtoYXNoX2lkXVtsaW5rXSk7XHJcblx0fVxyXG5cdC8vdHRpbWVyLnN0b3AoJ2lsYycpO1xyXG59XHJcblxyXG5cclxuXHJcbnZhciByb290X3BhY2thZ2VfcG9vbCA9IG5ldyBQYWNrYWdlUG9vbCgpO1xyXG5cclxudmFyIGFwcHMgPSBbXTtcclxudmFyIGFwcElkcyA9IDA7XHJcbnZhciBBcHAgPSBmdW5jdGlvbihwYWNrYWdlcyl7XHJcblx0dGhpcy5pZCA9ICsrYXBwSWRzO1xyXG5cdHRoaXMucGFja2FnZVBvb2wgPSBuZXcgUGFja2FnZVBvb2wocm9vdF9wYWNrYWdlX3Bvb2wsIHRoaXMuaWQpO1xyXG5cdGlmKHBhY2thZ2VzKXtcclxuXHRcdGZvcihsZXQgcGFjayBvZiBwYWNrYWdlcyl7XHJcblx0XHRcdHRoaXMucGFja2FnZVBvb2wubG9hZChwYWNrKTtcclxuXHRcdH1cclxuXHR9XHJcblx0dGhpcy5oYXNoZXMgPSB7fTtcclxuXHR0aGlzLmhhc2hJZHMgPSAwO1xyXG5cdHRoaXMubGlua01hbmFnZXIgPSBuZXcgTGlua01hbmFnZXIodGhpcyk7XHJcbn07XHJcblxyXG5BcHAucHJvdG90eXBlLm9uQ2hhbmdlRmluaXNoZWQgPSBmdW5jdGlvbihjYil7XHJcblx0aWYoIXRoaXMub25DaGFuZ2VGaW5pc2hlZFN0YWNrKXtcclxuXHRcdHRoaXMub25DaGFuZ2VGaW5pc2hlZFN0YWNrID0gW107XHJcblx0fVxyXG5cdHRoaXMub25DaGFuZ2VGaW5pc2hlZFN0YWNrLnB1c2goY2IpO1xyXG59XHJcbkFwcC5wcm90b3R5cGUuY2hhbmdlRmluaXNoZWQgPSBmdW5jdGlvbigpe1xyXG5cdGlmKHRoaXMub25DaGFuZ2VGaW5pc2hlZFN0YWNrKXtcclxuXHRcdGZvcihsZXQgY2Igb2YgdGhpcy5vbkNoYW5nZUZpbmlzaGVkU3RhY2spe1xyXG5cdFx0XHRjYigpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxudmFyIG5vb3AgPSBmdW5jdGlvbigpe1xyXG5cdGNvbnNvbGUubG9nKCdOb29wIGlzIGNhbGxlZCEnKTtcclxufTtcclxuQXBwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihjZWxsLCBwYXRoKXtcclxuXHRyZXR1cm4gdGhpcy5yb290LmdldChjZWxsLCBwYXRoKTtcclxufVxyXG5BcHAucHJvdG90eXBlLmdldFN0cnVjdCA9IGZ1bmN0aW9uKCl7XHJcblx0cmV0dXJuIGdldF9hcHBfc3RydWN0KHRoaXMpO1xyXG59XHJcbkFwcC5wcm90b3R5cGUuZ2V0VmFscyA9IGZ1bmN0aW9uKCl7XHJcblx0cmV0dXJuIGdldF92YWxzKHRoaXMucm9vdCk7XHJcbn1cclxuQXBwLnByb3RvdHlwZS5nZXRHcmlkID0gZnVuY3Rpb24oaWQpe1xyXG5cdHJldHVybiB0aGlzLmhhc2hlc1tpZF07XHJcbn1cclxuQXBwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihjZWxsLCB2YWwsIGNoaWxkKXtcclxuXHR0aGlzLnJvb3Quc2V0KGNlbGwsIHZhbCwgY2hpbGQpO1xyXG59XHJcbkFwcC5wcm90b3R5cGUuZWFjaENoaWxkID0gZnVuY3Rpb24ocGFyZW50X2dyaWRfaWQsIGNiKXtcclxuXHR2YXIgZ3JpZCA9IHRoaXMuZ2V0R3JpZChwYXJlbnRfZ3JpZF9pZCk7XHJcblx0Zm9yKHZhciBsIGluIGdyaWQubGlua2VkX2hhc2hlcyl7XHJcblx0XHR2YXIgY2hpbGQgPSB0aGlzLmdldEdyaWQoZ3JpZC5saW5rZWRfaGFzaGVzW2xdKTtcclxuXHRcdGNiKGNoaWxkKTtcclxuXHRcdHRoaXMuZWFjaENoaWxkKGdyaWQubGlua2VkX2hhc2hlc1tsXSwgY2IpO1xyXG5cdH1cclxufVxyXG5BcHAucHJvdG90eXBlLmVhY2hQYXJlbnQgPSBmdW5jdGlvbihncmlkX2lkLCBjYil7XHJcblx0d2hpbGUoZ3JpZF9pZCl7XHJcblx0XHR2YXIgZ3JpZCA9IHRoaXMuZ2V0R3JpZChncmlkX2lkKTtcclxuXHRcdGNiKGdyaWQpO1xyXG5cdFx0Z3JpZF9pZCA9IGdyaWQucGFyZW50O1xyXG5cdH1cclxufVxyXG5cclxudmFyIGNiX3Byb3QgPSB7XHJcblx0Y2VsbF9wYXJlbnRzOiBmdW5jdGlvbihjZWxsKXtcclxuXHRcdHJldHVybiB0aGlzLmNlbGxfdHlwZXNbY2VsbF0gPyB0aGlzLmNlbGxfdHlwZXNbY2VsbF0ucGFyZW50cyA6IFtdO1xyXG5cdH0sXHJcblx0Y2VsbF9jaGlsZHJlbjogZnVuY3Rpb24oY2VsbCl7XHJcblx0XHRyZXR1cm4gdGhpcy5jZWxsX3R5cGVzW2NlbGxdID8gdGhpcy5jZWxsX3R5cGVzW2NlbGxdLmNoaWxkcmVuIDoge307XHJcblx0fSwgXHJcblx0c2V0TGV2ZWxzOiBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIGxldmVsID0gMTtcclxuXHRcdHRoaXMubGV2ZWxzID0ge307XHJcblx0XHR2YXIgbWF4X2xldmVsID0gMTtcclxuXHRcdHZhciBhbHJlYWR5X3NldCA9IG5ldyBTZXQoKTtcclxuXHRcdHZhciBwb29sID0gW107XHJcblx0XHRmb3IobGV0IGkgaW4gdGhpcy5jZWxsX3R5cGVzKXtcclxuXHRcdFx0aWYodGhpcy5jZWxsX3R5cGVzW2ldLnBhcmVudHMubGVuZ3RoID09PSAwKXtcclxuXHRcdFx0XHR0aGlzLmxldmVsc1tpXSA9IDE7XHJcblx0XHRcdFx0Zm9yKHZhciBqIGluIHRoaXMuY2VsbF90eXBlc1tpXS5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRwb29sLnB1c2goaik7XHJcblx0XHRcdFx0XHR0aGlzLnNldExldmVsc1JlYyhqLCBhbHJlYWR5X3NldCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR2YXIgYyA9IDA7XHJcblx0XHR3aGlsZShwb29sW2NdKXtcclxuXHRcdFx0dGhpcy5zZXRMZXZlbHNJdGVyYWJsZShwb29sW2NdLCBwb29sKTtcclxuXHRcdFx0YysrO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0c2V0TGV2ZWxzSXRlcmFibGU6IGZ1bmN0aW9uKGNlbGxuYW1lLCBwb29sKXtcclxuXHRcdHZhciBtYXhfbGV2ZWwgPSAxO1xyXG5cdFx0Zm9yKHZhciBjZWxsIG9mIHRoaXMuY2VsbF9wYXJlbnRzKGNlbGxuYW1lKSl7XHJcblx0XHRcdGNlbGwgPSByZWFsX2NlbGxfbmFtZShjZWxsKTtcclxuXHRcdFx0aWYodGhpcy5sZXZlbHNbY2VsbF0gPT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0aWYocG9vbC5pbmRleE9mKGNlbGwpID09PSAtMSl7XHJcblx0XHRcdFx0XHR0aGlzLnNldExldmVsc0l0ZXJhYmxlKGNlbGwsIHBvb2wpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZih0aGlzLmxldmVsc1tjZWxsXSA+IG1heF9sZXZlbCl7XHJcblx0XHRcdFx0bWF4X2xldmVsID0gdGhpcy5sZXZlbHNbY2VsbF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmKHRoaXMubGV2ZWxzW2NlbGxuYW1lXSl7XHJcblx0XHRcdGlmKG1heF9sZXZlbCArIDEgPiB0aGlzLmxldmVsc1tjZWxsbmFtZV0pe1xyXG5cdFx0XHRcdHRoaXMubGV2ZWxzW2NlbGxuYW1lXSA9IG1heF9sZXZlbCArIDE7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5sZXZlbHNbY2VsbG5hbWVdID0gbWF4X2xldmVsICsgMTtcclxuXHRcdH1cclxuXHRcdGZvcih2YXIgY2VsbCBpbiB0aGlzLmNlbGxfY2hpbGRyZW4oY2VsbG5hbWUpKXtcclxuXHRcdFx0aWYocG9vbC5pbmRleE9mKGNlbGwpID09PSAtMSl7XHJcblx0XHRcdFx0cG9vbC5wdXNoKGNlbGwpO1xyXG5cdFx0XHRcdC8vdGhpcy5zZXRMZXZlbHNSZWMoY2VsbCwgYWxyZWFkeV9zZXQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHRzZXRMZXZlbHNSZWM6IGZ1bmN0aW9uKGNlbGxuYW1lLCBhbHJlYWR5X3NldCl7XHJcblx0XHR2YXIgbWF4X2xldmVsID0gMTtcclxuXHRcdGZvcih2YXIgY2VsbCBvZiB0aGlzLmNlbGxfcGFyZW50cyhjZWxsbmFtZSkpe1xyXG5cdFx0XHRjZWxsID0gcmVhbF9jZWxsX25hbWUoY2VsbCk7XHJcblx0XHRcdC8vaWYoY2VsbFswXSA9PT0gJy0nKSBkZWJ1Z2dlcjtcclxuXHRcdFx0aWYodGhpcy5sZXZlbHNbY2VsbF0gPT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0Ly90aGlzLnNldExldmVsc1JlYyhjZWxsLCBhbHJlYWR5X3NldCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYodGhpcy5sZXZlbHNbY2VsbF0gPiBtYXhfbGV2ZWwpe1xyXG5cdFx0XHRcdG1heF9sZXZlbCA9IHRoaXMubGV2ZWxzW2NlbGxdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZih0aGlzLmxldmVsc1tjZWxsbmFtZV0pe1xyXG5cdFx0XHRpZihtYXhfbGV2ZWwgKyAxID4gdGhpcy5sZXZlbHNbY2VsbG5hbWVdKXtcclxuXHRcdFx0XHR0aGlzLmxldmVsc1tjZWxsbmFtZV0gPSBtYXhfbGV2ZWwgKyAxO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcih2YXIgY2VsbCBpbiB0aGlzLmNlbGxfY2hpbGRyZW4oY2VsbG5hbWUpKXtcclxuXHRcdFx0XHRpZih0aGlzLmxldmVsc1tjZWxsXSA8PSB0aGlzLmxldmVsc1tjZWxsbmFtZV0pe1xyXG5cdFx0XHRcdFx0YWxyZWFkeV9zZXQuYWRkKGNlbGwpO1xyXG5cdFx0XHRcdFx0dGhpcy5zZXRMZXZlbHNSZWMoY2VsbCwgYWxyZWFkeV9zZXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvKmlmKCEoYWxyZWFkeV9zZXQuaGFzKGNlbGwpKSl7XHJcblx0XHRcdFx0XHRsb2coJ1JFQyAxMTInKTtcclxuXHRcdFx0XHR9Ki9cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmxldmVsc1tjZWxsbmFtZV0gPSBtYXhfbGV2ZWwgKyAxO1xyXG5cdFx0fVxyXG5cdFx0Ly9jb25zb2xlLmxvZygnTmV3IGxldmVsIGZvcicsIGNlbGxuYW1lLCAnaXMnLCBtYXhfbGV2ZWwgKyAxKTtcclxuXHRcdGZvcih2YXIgY2VsbCBpbiB0aGlzLmNlbGxfY2hpbGRyZW4oY2VsbG5hbWUpKXtcclxuXHRcdFx0aWYoIShhbHJlYWR5X3NldC5oYXMoY2VsbCkpKXtcclxuXHRcdFx0XHRhbHJlYWR5X3NldC5hZGQoY2VsbCk7XHJcblx0XHRcdFx0dGhpcy5zZXRMZXZlbHNSZWMoY2VsbCwgYWxyZWFkeV9zZXQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5BcHAucHJvdG90eXBlLnBhcnNlX2NicyA9IGZ1bmN0aW9uKGEpe1xyXG5cdHZhciBlYWNoTWl4aW4gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBhY2thZ2VQb29sLmVhY2hIYXNoTWl4aW4pO1xyXG5cdHZhciByZXMgPSBPYmplY3QuY3JlYXRlKGNiX3Byb3QpO1xyXG5cdHJlcy5wbGFpbl9iYXNlID0gT2JqZWN0LmFzc2lnbihlYWNoTWl4aW4sIGEpOyBcclxuXHRyZXMuc2lkZV9lZmZlY3RzID0ge307XHJcblx0cmVzLmhhc2hlc190b19saW5rID0ge307XHJcblx0cmVzLm5vX2FyZ3NfY2VsbHMgPSB7fTtcclxuXHRcclxuXHRwYXJzZV9wYihyZXMsIHRoaXMucGFja2FnZVBvb2wpO1xyXG5cdGluaXRfaWZfZW1wdHkocmVzLnBsYWluX2Jhc2UsICckaW5pdCcsIHt9LCAnJG5hbWUnLCBudWxsKTtcclxuXHRyZXMuY2VsbF90eXBlcyA9IHBhcnNlX2NlbGxfdHlwZXMocmVzLnBsYWluX2Jhc2UpO1xyXG5cdHJlcy5zZXRMZXZlbHMoKTtcclxuXHRyZXR1cm4gcmVzO1xyXG59XHJcblxyXG5BcHAucHJvdG90eXBlLmxvYWRQYWNrYWdlID0gZnVuY3Rpb24ocGFjaykge1xyXG5cdHRoaXMucGFja2FnZVBvb2wubG9hZChwYWNrKTtcclxufVxyXG5cclxuQXBwLnByb3RvdHlwZS5zZXRIYXNoID0gZnVuY3Rpb24oaWQsIGhhc2gpe1xyXG5cdHRoaXMuaGFzaGVzW2lkXSA9IGhhc2g7XHJcbn1cclxuXHJcbkFwcC5wcm90b3R5cGUuY3JlYXRlSGFzaCA9IGZ1bmN0aW9uKHR5cGUsIGxpbmtfYXMsIGZyZWVfdmFscywgcGFyZW50X2lkKSB7XHJcblx0dmFyIHBhcmVudCA9IHRoaXMuZ2V0R3JpZChwYXJlbnRfaWQpO1xyXG5cdGZyZWVfdmFscyA9IHBhcmVudC5pbml0X3ZhbHVlc1tsaW5rX2FzXSBcclxuXHRcdFx0XHQ/IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudC5pbml0X3ZhbHVlc1tsaW5rX2FzXSwgZnJlZV92YWxzIHx8IHt9KSBcclxuXHRcdFx0XHQ6IGZyZWVfdmFscztcclxuXHR2YXIgcGFyZW50X3BhdGggPSBwYXJlbnQucGF0aDtcclxuXHR2YXIgcGF0aCA9IChwYXJlbnRfcGF0aCAhPT0gJy8nID8gcGFyZW50X3BhdGggKyAnLycgOiAnLycpICArIGxpbmtfYXM7XHJcblx0dmFyIGNoaWxkID0gbmV3IEhhc2godGhpcywgdHlwZSwgbGlua19hcywgZnJlZV92YWxzLCB0cnVlLCBwYXJlbnRfaWQsIHBhdGgpOyBcclxuXHRGaXJlcmEuaGFzaENyZWF0ZWQodGhpcywgY2hpbGQuaWQsIGNoaWxkLnBhdGgsIGNoaWxkLnBhcmVudCk7XHJcblx0Ly9jaGlsZC5zZXRMZXZlbHMoKTtcclxuXHRyZXR1cm4gY2hpbGQuaWQ7XHJcbn1cclxuXHJcbnZhciBzaG93X3BlcmZvcm1hbmNlID0gZnVuY3Rpb24oKXtcclxuXHR2YXIgcmVzID0gW107XHJcblx0Zm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSl7XHJcblx0XHRyZXMucHVzaChpICsgJzogJyArIChhcmd1bWVudHNbaV0gLSBhcmd1bWVudHNbaSAtIDFdKS50b0ZpeGVkKDMpKTtcclxuXHR9XHJcblx0cmVzLnB1c2goJ1RvdGFsOiAnICsgKGFyZ3VtZW50c1tpIC0gMV0gLSBhcmd1bWVudHNbMF0pLnRvRml4ZWQoMykpO1xyXG5cdHJldHVybiByZXMuam9pbignLCAnKTtcclxufVxyXG5cclxudmFyIGFkZF9keW5hbWljX2xpbmsgPSAocG9vbCwgY2VsbCwgZ3JpZCwgc2xhdmVfY2VsbCwgdHlwZSkgPT4ge1xyXG5cdGluaXRfaWZfZW1wdHkocG9vbCwgY2VsbCwge30sIGdyaWQsIFtdKTtcclxuXHR2YXIgbGlua3MgPSBwb29sW2NlbGxdW2dyaWRdO1xyXG5cdGZvcihsZXQgbG5rIG9mIGxpbmtzKXtcclxuXHRcdGlmKGxuay5jZWxsX25hbWUgPT09IHNsYXZlX2NlbGwgJiYgbG5rLnR5cGUgPT09IHR5cGUpe1xyXG5cdFx0XHQvLyBhbHJlYWR5IGV4aXN0c1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0fVxyXG5cdGxpbmtzLnB1c2goe1xyXG5cdFx0Y2VsbF9uYW1lOiBzbGF2ZV9jZWxsLFxyXG5cdFx0dHlwZTogdHlwZVxyXG5cdH0pXHJcbn1cclxuXHJcbnZhciBjcmVhdGVfcHJvdmlkZXIgPSAoYXBwLCBzZWxmKSA9PiB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHBvb2w6IHt9LFxyXG5cdFx0Y3JlYXRlOiBmdW5jdGlvbihzZWxmLCB0eXBlLCBsaW5rX2FzLCBmcmVlX3ZhbHMpe1xyXG5cdFx0XHR2YXIgY2hpbGRfaWQgPSBzZWxmLmFwcC5jcmVhdGVIYXNoKHR5cGUsIGxpbmtfYXMsIGZyZWVfdmFscywgc2VsZi5pZCk7XHJcblx0XHRcdGluaXRfaWZfZW1wdHkoc2VsZiwgJ2xpbmtlZF9oYXNoZXMnLCB7fSwgbGlua19hcywgY2hpbGRfaWQpO1xyXG5cdFx0XHR0aGlzLnNldChsaW5rX2FzLCBjaGlsZF9pZCk7XHJcblx0XHRcdHRoaXMuZ2V0KGxpbmtfYXMpLmxpbmtlZF9oYXNoZXNfcHJvdmlkZXIuc2V0KCcuLicsIHNlbGYuaWQpO1xyXG5cdFx0XHRhcHAubGlua01hbmFnZXIub25OZXdIYXNoQWRkZWQoc2VsZi5pZCwgY2hpbGRfaWQpO1xyXG5cdFx0XHRyZXR1cm4gY2hpbGRfaWQ7XHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbihuYW1lLCBoYXNoX2lkKXtcclxuXHRcdFx0dGhpcy5wb29sW25hbWVdID0gaGFzaF9pZDtcclxuXHRcdH0sXHJcblx0XHRpc0xpbmtlZDogZnVuY3Rpb24obmFtZSl7XHJcblx0XHRcdHJldHVybiAhIXRoaXMuZ2V0KG5hbWUpO1xyXG5cdFx0fSxcclxuXHRcdGdldDogZnVuY3Rpb24obmFtZSl7XHJcblx0XHRcdHZhciBpZCA9IHRoaXMucG9vbFtuYW1lXTtcclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiBpZCA/IGFwcC5oYXNoZXNbaWRdIDogZmFsc2U7XHJcblx0XHR9LFxyXG5cdFx0cmVtb3ZlOiBmdW5jdGlvbihuYW1lKXtcclxuXHRcdFx0dmFyIGlkID0gdGhpcy5wb29sW25hbWVdO1xyXG5cdFx0XHRkZWxldGUgdGhpcy5wb29sW25hbWVdO1xyXG5cdFx0XHRzZWxmLmFwcC5oYXNoZXNbaWRdLnNldCgnJHJlbW92ZScsIHRydWUpO1xyXG5cdFx0XHRkZWxldGUgc2VsZi5hcHAuaGFzaGVzW2lkXTtcclxuXHRcdH0sXHJcblx0XHRzZXRDZWxsVmFsdWVzOiBmdW5jdGlvbihjaGlsZE5hbWUsIHZhbHVlcyl7XHJcblx0XHRcdHRoaXMuZ2V0KGNoaWxkTmFtZSkuc2V0KHZhbHVlcyk7XHJcblx0XHR9LFxyXG5cdFx0aW5pdENoaWxkOiBmdW5jdGlvbihuYW1lKXtcclxuXHRcdFx0aWYoIXRoaXMuZ2V0KG5hbWUpLmluaXQpe1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdzdHJhbmdlJywgdGhpcywgbmFtZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5nZXQobmFtZSkuaW5pdCgpO1xyXG5cdFx0fSxcclxuXHRcdHVubGlua0NoaWxkQ2VsbHM6IGZ1bmN0aW9uKG5hbWUpe1xyXG5cdFx0XHR2YXIgaHNoID0gdGhpcy5nZXQobmFtZSk7XHJcblx0XHRcdGlmKCFoc2gpe1xyXG5cdFx0XHRcdC8vY29uc29sZS53YXJuKCdyZW1vdmluZyB1bmV4aXN0aW5nIGhhc2ghJywgbmFtZSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMucmVtb3ZlKG5hbWUpO1xyXG5cdFx0fSxcclxuXHRcdGdldExpbmtlZEhhc2hDZWxsVmFsdWU6IGZ1bmN0aW9uKGhhc2huYW1lLCBjZWxsbmFtZSl7XHJcblx0XHRcdHZhciBoYXNoID0gdGhpcy5nZXQoaGFzaG5hbWUpO1xyXG5cdFx0XHRyZXR1cm4gaGFzaCA/IGhhc2guY2VsbF92YWx1ZShjZWxsbmFtZSkgOiBmYWxzZTtcclxuXHRcdH0sXHJcblx0XHRsaW5rQW55VHdvQ2VsbHM6IGZ1bmN0aW9uKHNsYXZlLCBtYXN0ZXIpe1xyXG5cdFx0XHRpZihzbGF2ZS5pbmRleE9mKCcvJykgIT09IC0xKXtcclxuXHRcdFx0XHRhcHAubGlua01hbmFnZXIuaW5pdExpbmsoc2VsZi5pZCwgc2xhdmUpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFkZF9keW5hbWljX2xpbmsoc2VsZi5keW5hbWljX2NlbGxfbGlua3MsIHNsYXZlLCAnX19zZWxmJywgbWFzdGVyLCAnZHluYW1pYycpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdH1cclxufVxyXG5cclxudmFyIEhhc2ggPSBmdW5jdGlvbihhcHAsIHBhcnNlZF9wYl9uYW1lLCBuYW1lLCBmcmVlX3ZhbHMsIGluaXRfbGF0ZXIsIHBhcmVudF9pZCwgcGF0aCl7XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdHZhciBpZCA9ICsrYXBwLmhhc2hJZHM7XHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHQvL2JtLnN0YXJ0KCdpbml0JywgJzInLCBpZCk7XHJcblx0dGhpcy5wYXRoID0gcGF0aDtcclxuXHRhcHAuc2V0SGFzaChpZCwgdGhpcyk7XHJcblx0dGhpcy5pZCA9IGlkO1xyXG5cdHRoaXMucGFyZW50ID0gcGFyZW50X2lkO1xyXG5cdHRoaXMuYXBwID0gYXBwO1xyXG5cdHRoaXMubmFtZSA9IG5hbWUgfHwgJ19fcm9vdCc7XHJcblx0dmFyIHBhcnNlZF9wYjtcclxuXHR0aGlzLnBhcnNlZF9wYl9uYW1lID0gcGFyc2VkX3BiX25hbWU7XHJcblx0aWYodHlwZW9mIHBhcnNlZF9wYl9uYW1lID09PSAnc3RyaW5nJyl7XHJcblx0XHRwYXJzZWRfcGIgPSBhcHAuY2JzW3BhcnNlZF9wYl9uYW1lXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIGtleSA9ICckJCRfQEBAX3RhZyc7XHJcblx0XHRpZihwYXJzZWRfcGJfbmFtZVtrZXldKXtcclxuXHRcdFx0cGFyc2VkX3BiID0gcGFyc2VkX3BiX25hbWVba2V5XTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHBhcnNlZF9wYiA9IGFwcC5wYXJzZV9jYnMocGFyc2VkX3BiX25hbWUpO1xyXG5cdFx0XHRwYXJzZWRfcGJfbmFtZVtrZXldID0gcGFyc2VkX3BiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZighcGFyc2VkX3BiKXtcclxuXHRcdGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBmaW5kIGhhc2ggdG8gcGFyc2U6JywgcGFyc2VkX3BiX25hbWUpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHR0aGlzLmNlbGxfdHlwZXMgPSBwYXJzZWRfcGIuY2VsbF90eXBlcztcclxuXHR0aGlzLnNpZGVfZWZmZWN0cyA9IHBhcnNlZF9wYi5zaWRlX2VmZmVjdHM7XHJcblx0dGhpcy5oYXNoZXNfdG9fbGluayA9IHBhcnNlZF9wYi5oYXNoZXNfdG9fbGluaztcclxuXHR0aGlzLnBsYWluX2Jhc2UgPSBPYmplY3QuY3JlYXRlKHBhcnNlZF9wYi5wbGFpbl9iYXNlKTtcclxuXHR0aGlzLmxpbmtfY2hhaW5zID0gT2JqZWN0LmNyZWF0ZShwYXJzZWRfcGIubGlua19jaGFpbnMgfHwge30pO1xyXG5cdHRoaXMubGV2ZWxzID0gT2JqZWN0LmNyZWF0ZShwYXJzZWRfcGIubGV2ZWxzKTtcclxuXHQvL3RoaXMuc2V0TGV2ZWxzKCk7XHJcblx0dGhpcy5saW5rZWRfaGFzaGVzX3Byb3ZpZGVyID0gY3JlYXRlX3Byb3ZpZGVyKGFwcCwgc2VsZik7XHJcblx0dGhpcy5saW5rZWRfaGFzaGVzID0ge307XHJcblx0Ly8gZm9yIFwiY2xvc3VyZVwiIGNlbGwgdHlwZVxyXG5cdHRoaXMuY2VsbF9mdW5jcyA9IHt9O1xyXG5cdHRoaXMuZGlydHlDb3VudGVyID0ge307XHJcblx0dGhpcy5keW5hbWljX2NlbGxfbGlua3MgPSB7fTtcclxuXHR0aGlzLmR5bmFtaWNfY2VsbHNfcHJvcHMgPSB7fTtcclxuXHRpZih0aGlzLmNlbGxfdHlwZXNbJyonXSl7XHJcblx0XHQvKnZhciBvbWl0X2xpc3QgPSB0aGlzLmFsbF9jZWxsX2NoaWxkcmVuKCcqJyk7XHJcblx0XHRmb3IobGV0IGNlbGwgaW4gdGhpcy5jZWxsX3R5cGVzKXtcclxuXHRcdFx0aWYob21pdF9saXN0LmluZGV4T2YoY2VsbCkgPT09IC0xICYmIGNhbl9iZV9zZXRfdG9faHRtbChjZWxsLCB0aGlzLmFwcCkpe1xyXG5cdFx0XHRcdGFkZF9keW5hbWljX2xpbmsodGhpcy5keW5hbWljX2NlbGxfbGlua3MsIGNlbGwsICdfX3NlbGYnLCAnKicsICcnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSovXHJcblx0fVxyXG5cdHRoaXMuY2VsbF92YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBsYWluX2Jhc2UuJGluaXQgfHwge30pO1xyXG5cdHRoaXMuaW5pdF92YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBsYWluX2Jhc2UuJGluaXQsIGZyZWVfdmFscyB8fCB7fSk7XHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHQvL2JtLnN0b3AoJ2luaXQnLCAnMicsIGlkKTtcclxuXHQvL2JtLnN0YXJ0KCdpbml0JywgJzEnLCBpZCk7XHJcblx0dGhpcy5oYXNoZXNfdG9fbGluay5lYWNoKChoYXNoX25hbWUsIGxpbmtfYXMpID0+IHRoaXMubGlua0NoaWxkKGhhc2hfbmFtZSwgbGlua19hcykpO1xyXG5cdC8vIEB0b2RvOiByZWZhY3RvciwgbWFrZSB0aGlzIHNldCBpbiBvbmUgc3RlcFxyXG5cdC8vY29uc29sZS5sb2coJ1NldHRpbmcgJGluaXQgdmFsdWVzJywgdGhpcy5pbml0X3ZhbHVlcyk7XHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHQvL2JtLnN0b3AoJ2luaXQnLCAnMScsIGlkKTtcclxuXHQvL2JtLnN0YXJ0KCdpbml0JywgJzMnLCBpZCk7XHJcblxyXG5cdGlmKHRoaXMucGxhaW5fYmFzZS4kaW5pdCAmJiAhaW5pdF9sYXRlcil7XHJcblx0XHR0aGlzLmluaXQoKTtcclxuXHR9XHJcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHQvL2JtLnN0b3AoJ2luaXQnLCAnMycsIGlkKTtcclxuXHQvL2JtLnN0YXJ0KCdpbml0JywgJzQnLCBpZCk7XHJcblx0aWYocGFyc2VkX3BiLm5vX2FyZ3NfY2VsbHMpe1xyXG5cdFx0Ly90aGlzLnNldChwYXJzZWRfcGIubm9fYXJnc19jZWxscyk7XHJcblx0XHR2YXIgbWluX2xldmVsID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG5cdFx0dmFyIGNlbGxfdmFscyA9IHt9O1xyXG5cdFx0dGhpcy51cGRhdGVUcmVlKHBhcnNlZF9wYi5ub19hcmdzX2NlbGxzLCBmYWxzZSwgdHJ1ZSk7XHJcblx0fVxyXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblx0Ly9ibS5zdG9wKCdpbml0JywgJzQnLCBpZCk7XHJcblx0Ly9ibS5zdGFydCgnaW5pdCcsICc1JywgaWQpO1xyXG5cdGlmKHRoaXMubGlua19jaGFpbnMpe1xyXG5cdFx0Zm9yKGxldCBsaW5rIGluIHRoaXMubGlua19jaGFpbnMpe1xyXG5cdFx0XHR0aGlzLmluaXRMaW5rQ2hhaW4obGluayk7XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblx0Ly9ibS5zdG9wKCdpbml0JywgJzUnLCBpZCk7XHJcbn1cclxuXHJcbkhhc2gucHJvdG90eXBlLmNoYW5nZXNGaW5pc2hlZCA9IGZ1bmN0aW9uKCl7XHJcblx0dGhpcy5hcHAuY2hhbmdlRmluaXNoZWQoKTtcclxufVxyXG5cclxuSGFzaC5wcm90b3R5cGUuaW5pdElmU2lkZUVmZmVjdENlbGwgPSBmdW5jdGlvbihjZWxsKXtcclxuXHRpZighdGhpcy5jZWxsRXhpc3RzKGNlbGwpICYmIHVudXN1YWxfY2VsbChjZWxsKSl7XHJcblx0XHRwYXJzZV9jZWxsbmFtZShjZWxsLCB0aGlzLCAnZ2V0dGVyJywgdGhpcy5hcHAucGFja2FnZVBvb2wsIHRoaXMpO1xyXG5cdFx0dGhpcy5jZWxsX3R5cGVzID0gcGFyc2VfY2VsbF90eXBlcyh0aGlzLnBsYWluX2Jhc2UpO1xyXG5cdFx0dmFyIG1hdGNoZWQgPSBmaW5kTWF0Y2hlcihjZWxsLCB0aGlzLmFwcC5wYWNrYWdlUG9vbCk7XHJcblx0XHRpZihtYXRjaGVkKXtcclxuXHRcdFx0dGhpcy5jb21wdXRlKGNlbGwpO1xyXG5cdFx0fVxyXG5cdFx0Ly90aGlzLnNldExldmVscygpO1xyXG5cdH1cclxufVxyXG5cclxuSGFzaC5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbihuYW1lKXtcclxuXHRyZXR1cm4gdGhpcy5saW5rZWRfaGFzaGVzICYmIHRoaXMubGlua2VkX2hhc2hlc1tuYW1lXTtcclxufSBcclxuXHJcbkhhc2gucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpe1xyXG5cdGZvcihsZXQgY2VsbCBpbiB0aGlzLmluaXRfdmFsdWVzKXtcclxuXHRcdHBhcnNlX2NlbGxuYW1lKGNlbGwsIHRoaXMsICdzZXR0ZXInLCB0aGlzLmFwcC5wYWNrYWdlUG9vbCk7XHJcblx0fVxyXG5cdHRoaXMuc2V0KHRoaXMuaW5pdF92YWx1ZXMpO1xyXG59XHJcbkhhc2gucHJvdG90eXBlLnVwZGF0ZUNoaWxkRnJlZVZhbHVlcyA9IGZ1bmN0aW9uKGNoaWxkTmFtZSwgdmFsdWVzKXtcclxuXHR0aGlzLmxpbmtlZF9oYXNoZXNfcHJvdmlkZXIuc2V0Q2VsbFZhbHVlcyhjaGlsZE5hbWUsIHZhbHVlcyk7XHJcbn1cclxuXHJcbkhhc2gucHJvdG90eXBlLmluaXRMaW5rQ2hhaW4gPSBmdW5jdGlvbihsaW5rKXtcclxuXHR0aGlzLmFwcC5saW5rTWFuYWdlci5pbml0TGluayh0aGlzLmlkLCBsaW5rKTtcclxufVxyXG5cclxuSGFzaC5wcm90b3R5cGUubGlua0hhc2ggPSBmdW5jdGlvbihjZWxsbmFtZSwgdmFsKXtcclxuXHQvL2xvZygnUlVOTklORyBTSURFIEVGRkVDVCcsIHRoaXMsIHZhbCk7IFxyXG5cdHZhciBoYXNoLCBsaW5rMSwgbGluazIsIGZyZWVfdmFscztcclxuXHRjZWxsbmFtZSA9IGNlbGxuYW1lLnJlcGxhY2UoXCIkY2hpbGRfXCIsIFwiXCIpO1xyXG5cdGlmKHZhbCBpbnN0YW5jZW9mIEFycmF5KXtcclxuXHRcdC8vIGl0J3MgaGFzaCBhbmQgbGlua1xyXG5cdFx0aGFzaCA9IHZhbFswXTtcclxuXHRcdGxpbmsxID0gdmFsWzFdO1xyXG5cdFx0bGluazIgPSB2YWxbMl07XHJcblx0XHRmcmVlX3ZhbHMgPSB2YWxbM10gfHwge307XHJcblx0fSBlbHNlIHtcclxuXHRcdGhhc2ggPSB2YWw7XHJcblx0fVxyXG5cdGlmKCFoYXNoKXtcclxuXHRcdGNvbnNvbGUud2FybignVHJ5aW5nIHRvIGxpbmsgdW5kZWZpbmVkIGhhc2g6JywgaGFzaCk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdHZhciBjaGlsZF9pZCA9IHRoaXMubGlua0NoaWxkKGhhc2gsIGNlbGxuYW1lLCBmcmVlX3ZhbHMpO1xyXG5cdGlmKGxpbmsxKXtcclxuXHRcdC8vY29uc29sZS5pbmZvKCdMaW5raW5nIGJ5IGxpbmsxIGhhc2gnLCBsaW5rMSk7XHJcblx0XHRsaW5rMS5lYWNoKChoaXNfY2VsbCwgbXlfY2VsbCkgPT4ge1xyXG5cdFx0XHR0aGlzLmFwcC5saW5rTWFuYWdlci5pbml0TGluayh0aGlzLmlkLCBjZWxsbmFtZSArICcvJyArIGhpc19jZWxsLCBteV9jZWxsKTtcclxuXHRcdH0pXHJcblx0fVxyXG5cdGlmKGxpbmsyKXtcclxuXHRcdC8vY29uc29sZS5pbmZvKCdMaW5raW5nIGJ5IGxpbmsyIGhhc2gnLCBsaW5rMik7XHJcblx0XHRsaW5rMi5lYWNoKChoaXNfY2VsbCwgbXlfY2VsbCkgPT4ge1xyXG5cdFx0XHR0aGlzLmFwcC5saW5rTWFuYWdlci5pbml0TGluayhjaGlsZF9pZCwgJy4uLycgKyBoaXNfY2VsbCwgbXlfY2VsbCk7XHJcblx0XHR9KVxyXG5cdH1cclxufVxyXG5cclxuSGFzaC5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbihsaW5rX2FzKXtcclxuXHRyZXR1cm4gdGhpcy5hcHAuZ2V0R3JpZCh0aGlzLmxpbmtlZF9oYXNoZXNfcHJvdmlkZXIucG9vbFtsaW5rX2FzXSk7XHJcbn0gXHJcblxyXG5IYXNoLnByb3RvdHlwZS5saW5rQ2hpbGQgPSBmdW5jdGlvbih0eXBlLCBsaW5rX2FzLCBmcmVlX3ZhbHMpe1xyXG5cdGlmKHRoaXMubGlua2VkX2hhc2hlc19wcm92aWRlci5pc0xpbmtlZChsaW5rX2FzKSl7XHJcblx0XHR2YXIgcGIgPSB0aGlzLmdldENoaWxkKGxpbmtfYXMpLnBhcnNlZF9wYl9uYW1lO1xyXG5cdFx0aWYocGIgPT09IHR5cGUpe1xyXG5cdFx0XHR0aGlzLmdldENoaWxkKGxpbmtfYXMpLnNldChmcmVlX3ZhbHMpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5saW5rZWRfaGFzaGVzX3Byb3ZpZGVyLnBvb2xbbGlua19hc107XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnVubGlua0NoaWxkKGxpbmtfYXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHR2YXIgaWQgPSB0aGlzLmxpbmtlZF9oYXNoZXNfcHJvdmlkZXIuY3JlYXRlKHRoaXMsIHR5cGUsIGxpbmtfYXMsIGZyZWVfdmFscyk7XHJcblx0dGhpcy5saW5rZWRfaGFzaGVzX3Byb3ZpZGVyLmluaXRDaGlsZChsaW5rX2FzKTtcclxuXHRyZXR1cm4gaWQ7XHJcbn1cclxuXHJcbkhhc2gucHJvdG90eXBlLmNlbGxFeGlzdHMgPSBmdW5jdGlvbihjZWxsbmFtZSl7XHJcblx0cmV0dXJuIHRoaXMuY2VsbF90eXBlc1tjZWxsbmFtZV0gIT09IHVuZGVmaW5lZDtcclxufVxyXG5cclxuSGFzaC5wcm90b3R5cGUudW5saW5rQ2hpbGQgPSBmdW5jdGlvbihsaW5rX2FzKXtcclxuXHR0aGlzLmxpbmtlZF9oYXNoZXNfcHJvdmlkZXIudW5saW5rQ2hpbGRDZWxscyhsaW5rX2FzKTtcclxufVxyXG5cclxuSGFzaC5wcm90b3R5cGUuZG9SZWN1cnNpdmUgPSBmdW5jdGlvbihmdW5jLCBjZWxsLCBza2lwLCBwYXJlbnRfY2VsbCwgYWxyZWFkeV9jb3VudGVkX2NlbGxzID0ge30sIHJ1bl9hc3luYyl7XHJcblx0dmFyIGNiID0gdGhpcy5kb1JlY3Vyc2l2ZS5iaW5kKHRoaXMsIGZ1bmMpO1xyXG5cdGlmKCFza2lwKSB7XHJcblx0XHQvL2NvbnNvbGUubG9nKCctLUNvbXB1dGluZyBjZWxsJywgdGhpcy5jZWxsX3R5cGUoY2VsbCkpO1xyXG5cdFx0ZnVuYyhjZWxsLCBwYXJlbnRfY2VsbCk7XHJcblx0XHRhbHJlYWR5X2NvdW50ZWRfY2VsbHNbY2VsbF0gPSB0cnVlO1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvL3Rocm93IG5ldyBFcnJvcignU2tpcHBpbmchJywgYXJndW1lbnRzKTtcclxuXHR9XHJcblx0aWYodGhpcy5jZWxsX2hhc190eXBlKGNlbGwsICdhc3luYycpICYmICFydW5fYXN5bmMpIHtcclxuXHRcdC8vY29uc29sZS5sb2coJ1NraXBwaW5nIGNvdW50aW5nIGNoaWxkcmVuIG9mIGFzeW5jJyk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdHRoaXMuY2VsbF9jaGlsZHJlbihjZWxsKS5lYWNoS2V5KChjaGlsZF9jZWxsX25hbWUpID0+IHtcclxuXHRcdGlmKCFhbHJlYWR5X2NvdW50ZWRfY2VsbHNbY2hpbGRfY2VsbF9uYW1lXSl7XHJcblx0XHRcdGFscmVhZHlfY291bnRlZF9jZWxsc1tjaGlsZF9jZWxsX25hbWVdID0gdHJ1ZSxcclxuXHRcdFx0dGhpcy5kb1JlY3Vyc2l2ZShmdW5jLCBjaGlsZF9jZWxsX25hbWUsIGZhbHNlLCBjZWxsLCBPYmplY3QuY3JlYXRlKGFscmVhZHlfY291bnRlZF9jZWxscykpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly9jb25zb2xlLmVycm9yKCdDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kIScsIGNoaWxkX2NlbGxfbmFtZSwgYWxyZWFkeV9jb3VudGVkX2NlbGxzLCB0aGlzKTtcclxuXHRcdH1cclxuXHR9KTtcclxufVxyXG5cclxudmFyIHRvTG93ZXJDYXNlID0gKGEpID0+IGEudG9Mb3dlckNhc2UoKTtcclxuXHJcbnZhciBzcGxpdF9jYW1lbGNhc2UgPSAoc3RyKSA9PiB7XHJcblx0aWYoIXN0ci5tYXRjaCkgcmV0dXJuIGZhbHNlO1xyXG5cdHZhciBmaXJzdCA9IHN0ci5tYXRjaCgvXihbYS16MC05XSopLyk7XHJcblx0dmFyIG90aGVycyA9IChzdHIubWF0Y2goL1tBLVpdW2EtejAtOV0qL2cpIHx8IFtdKS5tYXAodG9Mb3dlckNhc2UpO1xyXG5cdHJldHVybiBbZmlyc3RbMV0sIC4uLm90aGVyc107XHJcbn1cclxuXHJcbkhhc2gucHJvdG90eXBlLmNvbXB1dGUgPSBmdW5jdGlvbihjZWxsLCBwYXJlbnRfY2VsbF9uYW1lKXtcclxuXHRsb2coJ2NvbXB1dGUnLCBjZWxsKTtcclxuXHR2YXIgcmVhbF9jZWxsX25hbWUgPSB0aGlzLnJlYWxfY2VsbF9uYW1lKGNlbGwpO1xyXG5cdHZhciB2YWw7XHJcblx0dmFyIHByb3BzID0gdGhpcy5jZWxsX3R5cGVfcHJvcHMoY2VsbCk7XHJcblx0dmFyIHBhcmVudHMgPSB0aGlzLmNlbGxfcGFyZW50cyhyZWFsX2NlbGxfbmFtZSk7XHJcblx0dmFyIGR5bmFtaWMgPSBwYXJlbnRzLmluZGV4T2YocGFyZW50X2NlbGxfbmFtZSkgPT0gLTE7XHJcblx0dmFyIGZ1bmMgPSB0aGlzLmNlbGxfZnVuYyhyZWFsX2NlbGxfbmFtZSk7XHJcblx0dmFyIGFyZ19udW0gPSB0aGlzLmNlbGxfYXJnX251bShyZWFsX2NlbGxfbmFtZSk7XHJcblx0aWYocHJvcHMuZHluYW1pYyAmJiBkeW5hbWljKXtcclxuXHRcdHZhciByZWFsX3Byb3BzID0gdGhpcy5keW5hbWljX2NlbGxzX3Byb3BzW2NlbGxdO1xyXG5cdFx0ZnVuYyA9IHJlYWxfcHJvcHMuZnVuYztcclxuXHRcdHBhcmVudHMgPSByZWFsX3Byb3BzLnBhcmVudHM7XHJcblx0XHRwcm9wcyA9IHtkeW5hbWljOiB0cnVlfTtcclxuXHRcdGFyZ19udW0gPSBwYXJlbnRzLmxlbmd0aDtcclxuXHRcdC8vY29uc29sZS5sb2coJ2NvbXB1dGluZyBkeW5hbWljIGNlbGwgdmFsJywgcGFyZW50cyk7XHJcblx0fVxyXG5cdC8vIGdldHRpbmcgZnVuY1xyXG5cdGlmKHByb3BzLmhhc093blByb3BlcnR5KCdtYXAnKSAmJiBwcm9wcy5tYXApe1xyXG5cdFx0aWYoIXBhcmVudF9jZWxsX25hbWUpe1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjYWxjdWxhdGUgbWFwIGNlbGwgdmFsdWUgLSBubyBwYXJlbnQgY2VsbCBuYW1lIHByb3ZpZGVkIScpO1xyXG5cdFx0fVxyXG5cdFx0aWYoZnVuY1twYXJlbnRfY2VsbF9uYW1lXSA9PT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY29tcHV0ZSBNQVAgY2VsbDogcGFyZW50IGNlbGwgZnVuYyB1bmRlZmluZWQgb3Igbm90IGZ1bmN0aW9uIScpO1xyXG5cdFx0fVxyXG5cdFx0ZnVuYyA9IGZ1bmNbcGFyZW50X2NlbGxfbmFtZV07XHJcblx0fSBlbHNlIGlmKHByb3BzLmNsb3N1cmUpe1xyXG5cdFx0aWYoIXRoaXMuY2VsbF9mdW5jc1tyZWFsX2NlbGxfbmFtZV0pe1xyXG5cdFx0XHR2YXIgbmV3X2Z1bmMgPSBmdW5jKCk7XHJcblx0XHRcdC8vY29uc29sZS5sb2coJ1NldHRpbmcgY2xvc3VyZSBmdW5jdGlvbicsIG5ld19mdW5jKTtcclxuXHRcdFx0dGhpcy5jZWxsX2Z1bmNzW3JlYWxfY2VsbF9uYW1lXSA9IG5ld19mdW5jO1xyXG5cdFx0fVxyXG5cdFx0ZnVuYyA9IHRoaXMuY2VsbF9mdW5jc1tyZWFsX2NlbGxfbmFtZV07XHJcblx0fVxyXG5cdC8vIGdldHRpbmcgYXJndW1lbnRzXHJcblx0dmFyIGFyZ3M7XHJcblx0c3dpdGNoKGFyZ19udW0pe1xyXG5cdFx0Y2FzZSAxOlxyXG5cdFx0XHRhcmdzID0gW3RoaXMuY2VsbF92YWx1ZShnZXRfcmVhbF9jZWxsX25hbWUocGFyZW50c1swXSkpXTtcclxuXHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAyOlxyXG5cdFx0XHRhcmdzID0gW1xyXG5cdFx0XHRcdHRoaXMuY2VsbF92YWx1ZShnZXRfcmVhbF9jZWxsX25hbWUocGFyZW50c1swXSkpLFxyXG5cdFx0XHRcdHRoaXMuY2VsbF92YWx1ZShnZXRfcmVhbF9jZWxsX25hbWUocGFyZW50c1sxXSkpXHJcblx0XHRcdF07XHJcblx0XHRicmVhaztcclxuXHRcdGNhc2UgMzpcclxuXHRcdFx0YXJncyA9IFtcclxuXHRcdFx0XHR0aGlzLmNlbGxfdmFsdWUoZ2V0X3JlYWxfY2VsbF9uYW1lKHBhcmVudHNbMF0pKSxcclxuXHRcdFx0XHR0aGlzLmNlbGxfdmFsdWUoZ2V0X3JlYWxfY2VsbF9uYW1lKHBhcmVudHNbMV0pKSxcclxuXHRcdFx0XHR0aGlzLmNlbGxfdmFsdWUoZ2V0X3JlYWxfY2VsbF9uYW1lKHBhcmVudHNbMl0pKVxyXG5cdFx0XHRdO1xyXG5cdFx0YnJlYWs7XHJcblx0XHRjYXNlIDQ6XHJcblx0XHRcdGFyZ3MgPSBbXHJcblx0XHRcdFx0dGhpcy5jZWxsX3ZhbHVlKGdldF9yZWFsX2NlbGxfbmFtZShwYXJlbnRzWzBdKSksXHJcblx0XHRcdFx0dGhpcy5jZWxsX3ZhbHVlKGdldF9yZWFsX2NlbGxfbmFtZShwYXJlbnRzWzFdKSksXHJcblx0XHRcdFx0dGhpcy5jZWxsX3ZhbHVlKGdldF9yZWFsX2NlbGxfbmFtZShwYXJlbnRzWzJdKSksXHJcblx0XHRcdFx0dGhpcy5jZWxsX3ZhbHVlKGdldF9yZWFsX2NlbGxfbmFtZShwYXJlbnRzWzNdKSlcclxuXHRcdFx0XTtcclxuXHRcdGJyZWFrO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0dmFyIGFyZ3MgPSB0aGlzLmNlbGxfcGFyZW50cyhyZWFsX2NlbGxfbmFtZSkubWFwKChwYXJlbnRfY2VsbF9uYW1lKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuY2VsbF92YWx1ZShnZXRfcmVhbF9jZWxsX25hbWUocGFyZW50X2NlbGxfbmFtZSkpXHJcblx0XHRcdH0pO1xyXG5cdFx0YnJlYWs7XHJcblx0fVxyXG5cdGlmKHByb3BzLmZ1bm5lbCl7XHJcblx0XHRpZighcGFyZW50X2NlbGxfbmFtZSl7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNhbGN1bGF0ZSBtYXAgY2VsbCB2YWx1ZSAtIG5vIHBhcmVudCBjZWxsIG5hbWUgcHJvdmlkZWQhJyk7XHJcblx0XHR9XHJcblx0XHRwYXJlbnRfY2VsbF9uYW1lID0gZ2V0X3JlYWxfY2VsbF9uYW1lKHBhcmVudF9jZWxsX25hbWUpO1xyXG5cdFx0YXJncyA9IFtwYXJlbnRfY2VsbF9uYW1lLCB0aGlzLmNlbGxfdmFsdWUocGFyZW50X2NlbGxfbmFtZSldO1xyXG5cdH1cclxuXHRpZihwcm9wcy5uZXN0ZWQpe1xyXG5cdFx0YXJncy51bnNoaWZ0KChjZWxsLCB2YWwpID0+IHtcclxuXHRcdFx0dmFyIGNlbGxfdG9fdXBkYXRlID0gcmVhbF9jZWxsX25hbWUgKyAnLicgKyBjZWxsO1xyXG5cdFx0XHR0aGlzLnNldF9jZWxsX3ZhbHVlKGNlbGxfdG9fdXBkYXRlLCB2YWwpO1xyXG5cdFx0XHR0aGlzLmRvUmVjdXJzaXZlKHRoaXMuY29tcHV0ZS5iaW5kKHRoaXMpLCBjZWxsX3RvX3VwZGF0ZSwgdHJ1ZSk7XHJcblx0XHR9KTtcclxuXHR9IGVsc2UgaWYocHJvcHMuYXN5bmMpe1xyXG5cdFx0YXJncy51bnNoaWZ0KCh2YWwpID0+IHtcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnQVNZTkMgY2FsbGJhY2sgY2FsbGVkIScsdmFsKTsgXHJcblx0XHRcdHRoaXMuc2V0X2NlbGxfdmFsdWUocmVhbF9jZWxsX25hbWUsIHZhbCk7XHJcblx0XHRcdHRoaXMuZG9SZWN1cnNpdmUodGhpcy5jb21wdXRlLmJpbmQodGhpcyksIHJlYWxfY2VsbF9uYW1lLCB0cnVlLCBudWxsLCB7fSwgdHJ1ZSk7XHJcblx0XHRcdHRoaXMuY2hhbmdlc0ZpbmlzaGVkKCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0Lypmb3IodmFyIG4gb2YgYXJncyl7XHJcblx0XHRpZihuID09PSBGaXJlcmEudW5kZWYpe1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKCdVTkRFRiBGT1VORCEnLCBjZWxsKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdH0qL1xyXG5cdC8vIGNvdW50aW5nIHZhbHVlXHJcblx0aWYocHJvcHMuaGFzT3duUHJvcGVydHkoJ21hcCcpICYmIHByb3BzLm1hcCl7XHJcblx0XHR2YXIgdmFsID0gZnVuYyBpbnN0YW5jZW9mIEZ1bmN0aW9uIFxyXG5cdFx0XHRcdFx0ICA/IGZ1bmModGhpcy5jZWxsX3ZhbHVlKGdldF9yZWFsX2NlbGxfbmFtZShwYXJlbnRfY2VsbF9uYW1lKSkpXHJcblx0XHRcdFx0XHQgIDogZnVuYztcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIHZhbDtcclxuXHRcdHN3aXRjaChhcmdzLm51bSl7XHJcblx0XHRcdGNhc2UgMTpcclxuXHRcdFx0XHR2YWwgPSBmdW5jKGFyZ3NbMF0pO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSAyOlxyXG5cdFx0XHRcdHZhbCA9IGZ1bmMoYXJnc1swXSwgYXJnc1sxXSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIDM6XHJcblx0XHRcdFx0dmFsID0gZnVuYyhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRcdGRlZmF1bHQ6IFxyXG5cdFx0XHRcdHZhbCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZih2YWwgPT09IEZpcmVyYS5ub29wKXtcclxuXHRcdC8vY29uc29sZS5sb2coJ3NraXBwaW5nIHVwZGF0ZScpO1xyXG5cdFx0cmV0dXJuIEZpcmVyYS5ub29wO1xyXG5cdH1cclxuXHRpZihwcm9wcy5hc3luYyB8fCBwcm9wcy5uZXN0ZWQpe1xyXG5cdFx0XHJcblx0fSBlbHNlIGlmKHByb3BzLmR5bmFtaWMgJiYgIWR5bmFtaWMpIHtcclxuXHRcdHZhciBmcyA9IHBhcnNlX2Fycl9mdW5jc3RyaW5nKHZhbCwgY2VsbCwge3BsYWluX2Jhc2U6e319LCB0aGlzLmFwcC5wYWNrYWdlUG9vbCk7XHJcblx0XHRwYXJzZV9jZWxsX3R5cGUoY2VsbCwgZnMsIHRoaXMuZHluYW1pY19jZWxsc19wcm9wcywgW10pO1xyXG5cdFx0cGFyZW50cyA9IHRoaXMuZHluYW1pY19jZWxsc19wcm9wc1tjZWxsXS5wYXJlbnRzO1xyXG5cdFx0Zm9yKGxldCBwYXJlbnRfY2VsbCBvZiBwYXJlbnRzKXtcclxuXHRcdFx0dGhpcy5saW5rZWRfaGFzaGVzX3Byb3ZpZGVyLmxpbmtBbnlUd29DZWxscyhwYXJlbnRfY2VsbCwgY2VsbCk7XHJcblx0XHR9XHJcblx0XHR0aGlzLnNldExldmVsKGNlbGwsIHBhcmVudHMuY29uY2F0KHRoaXMuY2VsbF9wYXJlbnRzKHJlYWxfY2VsbF9uYW1lKSkpO1xyXG5cdFx0dGhpcy5jb21wdXRlKGNlbGwpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR0aGlzLnNldF9jZWxsX3ZhbHVlKHJlYWxfY2VsbF9uYW1lLCB2YWwpO1xyXG5cdH1cclxufVxyXG5cclxuSGFzaC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oY2VsbCwgY2hpbGQpe1xyXG5cdGlmKGNoaWxkKXtcclxuXHRcdC8vIHNldHRpbmcgdmFsdWUgZm9yIHNvbWUgbGlua2VkIGNoaWxkIGhhc2hcclxuXHRcdC8vbG9nKCdUcnlpbmcgdG8gc2V0JywgY2hpbGQsIGNlbGwsIHZhbCk7XHJcblx0XHR2YXIgcGF0aCA9IGNoaWxkLnNwbGl0KCcvJyk7XHJcblx0XHR2YXIgY2hpbGRuYW1lID0gcGF0aFswXTtcclxuXHRcdHZhciBjaGlsZCA9IHRoaXMubGlua2VkX2hhc2hlc19wcm92aWRlci5nZXQoY2hpbGRuYW1lKTtcclxuXHRcdGlmKCFjaGlsZCl7XHJcblx0XHRcdGNvbnNvbGUud2FybignQ2Fubm90IGdldCAtIG5vIHN1Y2ggcGF0aCcsIHBhdGgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR2YXIgY2hpbGRfcGF0aCA9IHBhdGhbMV0gPyBwYXRoLnNsaWNlKDEpLmpvaW4oJy8nKSA6IHVuZGVmaW5lZDtcclxuXHRcdHJldHVybiBjaGlsZC5nZXQoY2VsbCwgY2hpbGRfcGF0aCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHZhciB2YWwgPSB0aGlzLmNlbGxfdmFsdWVzW2NlbGxdO1xyXG5cdFx0cmV0dXJuIHZhbCA9PT0gdW5kZWZpbmVkID8gKHRoaXMuY2VsbF92YWx1ZXMuaGFzT3duUHJvcGVydHkoY2VsbCkgPyB2YWwgOiBGaXJlcmEudW5kZWYpIDogdmFsO1xyXG5cdH1cclxufVxyXG5cclxuSGFzaC5wcm90b3R5cGUuc2V0TGV2ZWwgPSBmdW5jdGlvbihjZWxsLCBwYXJlbnRzKXtcclxuXHQvL2NvbnNvbGUubG9nKCdnb3QgcGFyZW50cycsIHBhcmVudHMpO1xyXG5cdHZhciBtYXhfbGV2ZWwgPSAwO1xyXG5cdGZvcihsZXQgcHJudCBvZiBwYXJlbnRzKXtcclxuXHRcdHZhciBsdmwgPSB0aGlzLmxldmVsc1twcm50XTtcclxuXHRcdGlmKGx2bCA+IG1heF9sZXZlbCl7XHJcblx0XHRcdG1heF9sZXZlbCA9IGx2bDtcclxuXHRcdH1cclxuXHR9XHJcblx0dGhpcy5sZXZlbHNbY2VsbF0gPSBtYXhfbGV2ZWwgKyAxO1xyXG5cdC8vY29uc29sZS5sb2coJ2dvdCBtYXggbGV2ZWwnLCBtYXhfbGV2ZWwpO1xyXG59XHJcblxyXG5IYXNoLnByb3RvdHlwZS51cGRhdGVUcmVlID0gZnVuY3Rpb24oY2VsbHMsIG5vX2FyZ3MgPSBmYWxzZSwgY29tcHV0ZSA9IGZhbHNlKXtcclxuXHR2YXIgc2V0ID0gT2JqZWN0LmtleXMoY2VsbHMpO1xyXG5cdHZhciBzdGFydF9sZXZlbCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuXHR2YXIgbGV2ZWxzID0ge307XHJcblx0Zm9yKGxldCBjZWxsIGluIGNlbGxzKXtcclxuXHRcdGlmKGNvbXB1dGUpe1xyXG5cdFx0XHR0aGlzLmNvbXB1dGUoY2VsbCk7XHJcblx0XHR9XHJcblx0XHRpZighbm9fYXJncyl7XHJcblx0XHRcdHZhciB2YWwxID0gY29tcHV0ZSA/IHRoaXMuY2VsbF92YWx1ZXNbY2VsbF0gOiBjZWxsc1tjZWxsXTtcclxuXHRcdFx0dGhpcy5zZXRfY2VsbF92YWx1ZShjZWxsLCB2YWwxKTtcclxuXHRcdH1cclxuXHRcdHZhciBsdmwgPSB0aGlzLmxldmVsc1tjZWxsXTtcclxuXHRcdGlmKGx2bCA8IHN0YXJ0X2xldmVsKXtcclxuXHRcdFx0c3RhcnRfbGV2ZWwgPSB0aGlzLmxldmVsc1tjZWxsXTtcclxuXHRcdH1cclxuXHRcdGlmKCFsZXZlbHNbbHZsXSl7XHJcblx0XHRcdGxldmVsc1tsdmxdID0gbmV3IFNldCgpO1xyXG5cdFx0fVxyXG5cdFx0bGV2ZWxzW2x2bF0uYWRkKGNlbGwpO1xyXG5cdH1cclxuXHR2YXIgYWxyZWFkeSA9IG5ldyBTZXQoKTtcclxuXHR2YXIgeCA9IHN0YXJ0X2xldmVsO1xyXG5cdHZhciBwYXJlbnRzID0ge307XHJcblx0d2hpbGUobGV2ZWxzW3hdICE9PSB1bmRlZmluZWQpe1xyXG5cdFx0Zm9yKGxldCBjZWxsIG9mIGxldmVsc1t4XSl7XHJcblx0XHRcdHZhciBza2lwID0gZmFsc2U7XHJcblx0XHRcdHZhciBuZWVkZWRfbHZsID0geCsxO1xyXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNlbGxfY2hpbGRyZW4oY2VsbCk7XHJcblx0XHRcdHZhciBjdCA9IHRoaXMuY2VsbF90eXBlKGNlbGwpO1xyXG5cdFx0XHRpZihcclxuXHRcdFx0XHQhdGhpcy5jZWxsX2hhc190eXBlKGNlbGwsICdmcmVlJylcclxuXHRcdFx0XHQmJiAoY2VsbHNbY2VsbF0gPT09IHVuZGVmaW5lZCB8fCBub19hcmdzKVxyXG5cdFx0XHRcdCYmIHRoaXMuY2VsbF90eXBlc1tjZWxsXS5mdW5jXHJcblx0XHRcdCl7XHJcblx0XHRcdFx0dmFyIHJlcyA9IHRoaXMuY29tcHV0ZShjZWxsLCBwYXJlbnRzW2NlbGxdKTtcclxuXHRcdFx0XHRpZihyZXMgPT09IEZpcmVyYS5ub29wKXtcclxuXHRcdFx0XHRcdHNraXAgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZih0aGlzLmNlbGxfaGFzX3R5cGUoY2VsbCwgJ2FzeW5jJykgfHwgc2tpcCkge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcih2YXIgY2hpbGQgaW4gY2hpbGRyZW4pe1xyXG5cdFx0XHRcdHZhciBsdmwgPSB0aGlzLmxldmVsc1tjaGlsZF07XHJcblx0XHRcdFx0aWYoIWxldmVsc1tsdmxdKXtcclxuXHRcdFx0XHRcdGxldmVsc1tsdmxdID0gbmV3IFNldCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZighY2VsbHNbY2hpbGRdKXtcclxuXHRcdFx0XHRcdGxldmVsc1tsdmxdLmFkZChjaGlsZCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHBhcmVudHNbY2hpbGRdID0gY2VsbDtcclxuXHRcdFx0XHRmb3IodmFyIGogPSBsdmwgLSAxOyBqID4geDsgai0tKXtcclxuXHRcdFx0XHRcdGlmKCFsZXZlbHNbal0pe1xyXG5cdFx0XHRcdFx0XHRsZXZlbHNbal0gPSBuZXcgU2V0KCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKGFscmVhZHkuaGFzKGNoaWxkKSl7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnc2tpcHBpbmcyJywgY2hpbGQpO1xyXG5cdFx0XHRcdFx0Ly9jb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHgrKztcclxuXHR9XHJcbn1cclxuXHJcbkhhc2gucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGNlbGxzLCB2YWwsIGNoaWxkLCBub19hcmdzKXtcclxuXHRpZihjaGlsZCl7XHJcblx0XHQvLyBzZXR0aW5nIHZhbHVlIGZvciBzb21lIGxpbmtlZCBjaGlsZCBoYXNoXHJcblx0XHR2YXIgcGF0aCA9IGNoaWxkLnNwbGl0KCcvJyk7XHJcblx0XHR2YXIgY2hpbGRuYW1lID0gcGF0aFswXTtcclxuXHRcdHZhciBjaGlsZCA9IHRoaXMubGlua2VkX2hhc2hlc19wcm92aWRlci5nZXQoY2hpbGRuYW1lKTtcclxuXHRcdGlmKCFjaGlsZCl7XHJcblx0XHRcdGNvbnNvbGUud2FybignQ2Fubm90IHNldCAtIG5vIHN1Y2ggcGF0aCcsIHBhdGgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR2YXIgY2hpbGRfcGF0aCA9IHBhdGhbMV0gPyBwYXRoLnNsaWNlKDEpLmpvaW4oJy8nKSA6IHVuZGVmaW5lZDtcclxuXHRcdGNoaWxkLnNldChjZWxscywgdmFsLCBjaGlsZF9wYXRoKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0aWYoIShjZWxscyBpbnN0YW5jZW9mIE9iamVjdCkpe1xyXG5cdFx0dmFyIGEgPSB7fTtcclxuXHRcdGFbY2VsbHNdID0gdmFsO1xyXG5cdFx0Y2VsbHMgPSBhO1xyXG5cdH1cclxuXHR0aGlzLnVwZGF0ZVRyZWUoY2VsbHMsIG5vX2FyZ3MpO1xyXG59IFxyXG5cclxuSGFzaC5wcm90b3R5cGUuc2V0MiA9IGZ1bmN0aW9uKGNlbGwsIHZhbCwgY2hpbGQpe1xyXG5cdGlmKGNoaWxkKXtcclxuXHRcdC8vIHNldHRpbmcgdmFsdWUgZm9yIHNvbWUgbGlua2VkIGNoaWxkIGhhc2hcclxuXHRcdC8vbG9nKCdUcnlpbmcgdG8gc2V0JywgY2hpbGQsIGNlbGwsIHZhbCk7XHJcblx0XHR2YXIgcGF0aCA9IGNoaWxkLnNwbGl0KCcvJyk7XHJcblx0XHR2YXIgY2hpbGRuYW1lID0gcGF0aFswXTtcclxuXHRcdHZhciBjaGlsZCA9IHRoaXMubGlua2VkX2hhc2hlc19wcm92aWRlci5nZXQoY2hpbGRuYW1lKTtcclxuXHRcdGlmKCFjaGlsZCl7XHJcblx0XHRcdGNvbnNvbGUud2FybignQ2Fubm90IHNldCAtIG5vIHN1Y2ggcGF0aCcsIHBhdGgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR2YXIgY2hpbGRfcGF0aCA9IHBhdGhbMV0gPyBwYXRoLnNsaWNlKDEpLmpvaW4oJy8nKSA6IHVuZGVmaW5lZDtcclxuXHRcdGNoaWxkLnNldChjZWxsLCB2YWwsIGNoaWxkX3BhdGgpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHRpZihjZWxsIGluc3RhbmNlb2YgT2JqZWN0KXtcclxuXHRcdC8vIGJhdGNoIHVwZGF0ZVxyXG5cdFx0Ly9jb25zb2xlLmxvZygnQ29tcHV0aW5nIGJhdGNoIHVwZGF0ZScsIGNlbGwpO1xyXG5cdFx0Y2VsbC5lYWNoS2V5KFxyXG5cdFx0XHQoa2V5KSA9PiB7XHJcblx0XHRcdFx0dGhpcy5mb3JjZV9zZXQoa2V5LCBjZWxsW2tleV0sIHRydWUpO1xyXG5cdFx0XHRcdHRoaXMuZG9SZWN1cnNpdmUoKGNlbGwpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuZGlydHlDb3VudGVyW2NlbGxdIFxyXG5cdFx0XHRcdFx0XHQ/IHRoaXMuZGlydHlDb3VudGVyW2NlbGxdKysgXHJcblx0XHRcdFx0XHRcdDogKHRoaXMuZGlydHlDb3VudGVyW2NlbGxdID0gMSk7XHJcblx0XHRcdFx0fSwga2V5KVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZygnZGlydHkgY291bnRlcicsIHRoaXMuZGlydHlDb3VudGVyKTtcclxuXHRcdGNlbGwuZWFjaEtleSh0aGlzLmRvUmVjdXJzaXZlLmJpbmQodGhpcywgKGNlbGwyLCBwYXJlbnRfY2VsbF9uYW1lKSA9PiB7XHJcblx0XHRcdGlmKC0tdGhpcy5kaXJ0eUNvdW50ZXJbY2VsbDJdID09PSAwICYmIGNlbGxbY2VsbDJdID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ0NvbXB1dGluZyBhZnRlciBiYXRjaCBjaGFuZ2UnLCBjZWxsMiwgY2VsbCk7XHJcblx0XHRcdFx0dGhpcy5jb21wdXRlKGNlbGwyLCBwYXJlbnRfY2VsbF9uYW1lKTtcclxuXHRcdFx0Ly99IGVsc2Uge1xyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ0NlbGwgJywgY2VsbDIsICdpcyBub3QgcmVhZHknLCB0aGlzLmRpcnR5Q291bnRlcltjZWxsMl0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vY29uc29sZS5sb2coJ1NFVFQnLCBhcmd1bWVudHMpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZygnU2V0dGluZyBjZWxsIHZhbHVlJywgY2VsbCwgdmFsKTtcclxuXHRcdGlmKCF0aGlzLmNlbGxfdHlwZShjZWxsKSA9PT0gJ2ZyZWUnKXtcclxuXHRcdFx0dGhyb3cgRXhjZXB0aW9uKCdDYW5ub3Qgc2V0IGRlcGVuZGVudCBjZWxsIScpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5mb3JjZV9zZXQoY2VsbCwgdmFsKTtcclxuXHRcdC8vdGhpcy5kb1JlY3Vyc2l2ZSh0aGlzLmNvbXB1dGUuYmluZCh0aGlzKSwgY2VsbCk7XHJcblx0XHQvL2NvbnNvbGUubG9nKCdDZWxsIHZhbHVlcyBhZnRlciBzZXQnLCB0aGlzLmNlbGxfdmFsdWVzKTtcclxuXHR9XHJcbn1cclxuSGFzaC5wcm90b3R5cGUuZm9yY2Vfc2V0ID0gZnVuY3Rpb24oY2VsbCwgdmFsLCBvbWl0X3VwZGF0aW5nX2NoaWxkcmVuKXtcclxuXHR0aGlzLnNldF9jZWxsX3ZhbHVlKGNlbGwsIHZhbCk7XHJcblx0aWYob21pdF91cGRhdGluZ19jaGlsZHJlbikgcmV0dXJuO1xyXG5cdHRoaXMuY2VsbF9jaGlsZHJlbihjZWxsKS5lYWNoS2V5KChjaGlsZF9jZWxsX25hbWUpID0+IHtcclxuXHRcdHRoaXMuZG9SZWN1cnNpdmUodGhpcy5jb21wdXRlLmJpbmQodGhpcyksIGNoaWxkX2NlbGxfbmFtZSwgZmFsc2UsIGNlbGwpO1xyXG5cdH0pO1xyXG59XHJcbkhhc2gucHJvdG90eXBlLmNlbGxfcGFyZW50cyA9IGZ1bmN0aW9uKGNlbGwpe1xyXG5cdHJldHVybiB0aGlzLmNlbGxfdHlwZXNbY2VsbF0gPyB0aGlzLmNlbGxfdHlwZXNbY2VsbF0ucGFyZW50cyA6IFtdO1xyXG59XHJcbkhhc2gucHJvdG90eXBlLmNlbGxfYXJnX251bSA9IGZ1bmN0aW9uKGNlbGwpe1xyXG5cdHJldHVybiB0aGlzLmNlbGxfdHlwZXNbY2VsbF0gPyB0aGlzLmNlbGxfdHlwZXNbY2VsbF0uYXJnX251bSA6IDA7XHJcbn1cclxuSGFzaC5wcm90b3R5cGUuY2VsbF9jaGlsZHJlbiA9IGZ1bmN0aW9uKGNlbGwpe1xyXG5cdHJldHVybiB0aGlzLmNlbGxfdHlwZXNbY2VsbF0gPyB0aGlzLmNlbGxfdHlwZXNbY2VsbF0uY2hpbGRyZW4gOiB7fTtcclxufVxyXG5IYXNoLnByb3RvdHlwZS5hbGxfY2VsbF9jaGlsZHJlbiA9IGZ1bmN0aW9uKGNlbGwsIGFycil7XHJcblx0aWYoIXRoaXMuY2VsbF90eXBlc1tjZWxsXSl7XHJcblx0XHRyZXR1cm4gW107XHJcblx0fVxyXG5cdGFyciA9IGFyciB8fCBbXTtcclxuXHR0aGlzLmNlbGxfdHlwZXNbY2VsbF0uY2hpbGRyZW4uZWFjaEtleSgoY2wpID0+IHtcclxuXHRcdGFyci5wdXNoKGNsKTtcclxuXHRcdHRoaXMuYWxsX2NlbGxfY2hpbGRyZW4oY2wsIGFycik7XHJcblx0fSk7XHJcblx0cmV0dXJuIGFycjtcclxufVxyXG5IYXNoLnByb3RvdHlwZS5jZWxsX2Z1bmMgPSBmdW5jdGlvbihjZWxsKXtcclxuXHR2YXIgYTtcclxuXHRpZihhID0gdGhpcy5jZWxsX3R5cGVzW2NlbGxdLmZ1bmMpIHtcclxuXHRcdHJldHVybiBhO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIGNlbGwgZnVuYyBmb3IgY2VsbCAnK2NlbGwpO1xyXG5cdH1cclxufVxyXG5IYXNoLnByb3RvdHlwZS5jZWxsX3R5cGUgPSBmdW5jdGlvbihjZWxsKXtcclxuXHRyZXR1cm4gdGhpcy5jZWxsX3R5cGVzW2NlbGxdID8gdGhpcy5jZWxsX3R5cGVzW2NlbGxdLnR5cGUgOiBbXTtcclxufVxyXG5IYXNoLnByb3RvdHlwZS5jZWxsX2hhc190eXBlID0gZnVuY3Rpb24oY2VsbCwgdHlwZSl7XHJcblx0dmFyIHR5cGVzID0gdGhpcy5jZWxsX3R5cGVzW2NlbGxdO1xyXG5cdGlmKHR5cGVzKXtcclxuXHRcdHJldHVybiB0eXBlcy5wcm9wc1t0eXBlXTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufVxyXG5IYXNoLnByb3RvdHlwZS5jZWxsX3R5cGVfcHJvcHMgPSBmdW5jdGlvbihjZWxsKXtcclxuXHRyZXR1cm4gdGhpcy5jZWxsX3R5cGVzW2NlbGxdID8gdGhpcy5jZWxsX3R5cGVzW2NlbGxdLnByb3BzIDoge307XHJcbn1cclxuSGFzaC5wcm90b3R5cGUucmVhbF9jZWxsX25hbWUgPSBmdW5jdGlvbihjZWxsKXtcclxuXHRyZXR1cm4gdGhpcy5jZWxsX3R5cGVzW2NlbGxdID8gdGhpcy5jZWxsX3R5cGVzW2NlbGxdLnJlYWxfY2VsbF9uYW1lIDoge307XHJcbn1cclxuSGFzaC5wcm90b3R5cGUuY2VsbF92YWx1ZSA9IGZ1bmN0aW9uKGNlbGwpe1xyXG5cdHN3aXRjaChjZWxsKXtcclxuXHRcdGNhc2UgJyRyZWFsX2tleXMnOlxyXG5cdFx0XHRyZXR1cm4gWy4uLihuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMucGxhaW5fYmFzZSkuY29uY2F0KE9iamVjdC5rZXlzKHRoaXMucGxhaW5fYmFzZS4kaW5pdCkpKSldLmZpbHRlcigoaykgPT4ge1xyXG5cdFx0XHRcdHJldHVybiBrLm1hdGNoKC9eKFxcd3xcXGR8XFxffFxcLSkqJC8pO1xyXG5cdFx0XHR9KVxyXG5cdFx0YnJlYWs7XHJcblx0XHRjYXNlICckcmVhbF92YWx1ZXMnOlxyXG5cdFx0XHR2YXIgcmVzID0ge307XHJcblx0XHRcdFsuLi4obmV3IFNldChPYmplY3Qua2V5cyh0aGlzLmNlbGxfdmFsdWVzKVxyXG5cdFx0XHRcdFx0XHQuY29uY2F0KE9iamVjdC5rZXlzKHRoaXMuaW5pdF92YWx1ZXMpKSkpXS5maWx0ZXIoKGspID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gay5tYXRjaCgvXihcXHd8XFxkfFxcX3xcXC0pKiQvKTtcclxuXHRcdFx0fSkuZWFjaCgoaywgdikgPT4ge1xyXG5cdFx0XHRcdHJlc1trXSA9IHRoaXMuY2VsbF92YWx1ZShrKTtcclxuXHRcdFx0fSlcclxuXHRcdFx0cmV0dXJuIHJlcztcclxuXHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnJHBhdGgnOlxyXG5cdFx0XHRyZXR1cm4gdGhpcy5wYXRoO1xyXG5cdFx0YnJlYWs7XHJcblx0XHRjYXNlICckYXBwX2lkJzpcclxuXHRcdFx0cmV0dXJuIHRoaXMuYXBwLmlkO1xyXG5cdFx0YnJlYWs7XHJcblx0XHRjYXNlICckbmFtZSc6XHJcblx0XHRcdHJldHVybiB0aGlzLm5hbWU7XHJcblx0XHRicmVhaztcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdGlmKHRoaXMuY2VsbF92YWx1ZXMuaGFzT3duUHJvcGVydHkoY2VsbCkpe1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNlbGxfdmFsdWVzW2NlbGxdO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiBGaXJlcmEudW5kZWY7XHJcblx0XHRcdFx0Ly9yZXR1cm4gdGhpcy5jZWxsX3ZhbHVlc1tjZWxsXTtcclxuXHRcdFx0fVxyXG5cdH1cclxufVxyXG5IYXNoLnByb3RvdHlwZS5zZXRfY2VsbF92YWx1ZSA9IGZ1bmN0aW9uKGNlbGwsIHZhbCl7XHJcblx0dmFyIHNhbWVfc29uZyA9IHZhbCA9PT0gdGhpcy5jZWxsX3ZhbHVlc1tjZWxsXTtcclxuXHR0aGlzLmNlbGxfdmFsdWVzW2NlbGxdID0gdmFsO1xyXG5cdGlmKHRoaXMuc2lkZV9lZmZlY3RzW2NlbGxdKXtcdFxyXG5cdFx0aWYoIXNpZGVfZWZmZWN0c1t0aGlzLnNpZGVfZWZmZWN0c1tjZWxsXV0pIGNvbnNvbGUuaW5mbygnSSBTSE9VTEQgU0VUIHNpZGUtZWZmZWN0JywgY2VsbCwgdGhpcy5zaWRlX2VmZmVjdHNbY2VsbF0sIHNpZGVfZWZmZWN0cyk7XHJcblx0XHRzaWRlX2VmZmVjdHNbdGhpcy5zaWRlX2VmZmVjdHNbY2VsbF1dLmZ1bmMuY2FsbCh0aGlzLCBjZWxsLCB2YWwpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZygnQ2hpbGQnLCByZWFsX2NlbGxfbmFtZSwgJ3ZhbCBpcycsIHZhbCk7XHJcblx0fVxyXG5cdC8vaWYoY2VsbCA9PT0gJ3RleHQnIHx8IGNlbGwgPT09ICcqJykgY29uc29sZS5sb2coJ1NldCBjZWxsIHZhbHVlJywgY2VsbCwgdmFsLCB0aGlzLmR5bmFtaWNfY2VsbF9saW5rc1tjZWxsXSk7XHJcblx0dmFyIG9taXRfbGlzdCA9IHRoaXMuYWxsX2NlbGxfY2hpbGRyZW4oJyonKTtcclxuXHRpZih0aGlzLmNlbGxfdHlwZXNbJyonXSAmJiBjZWxsICE9PSAnKicgJiYgb21pdF9saXN0LmluZGV4T2YoY2VsbCkgPT09IC0xKXtcclxuXHRcdHRoaXMuc2V0KCcqJywgW2NlbGwsIHZhbF0pO1xyXG5cdH1cclxuXHRpZih0aGlzLmR5bmFtaWNfY2VsbF9saW5rc1tjZWxsXSl7XHJcblx0XHR0aGlzLmR5bmFtaWNfY2VsbF9saW5rc1tjZWxsXS5lYWNoKChsaW5rcywgaGFzaF9uYW1lKSA9PiB7XHJcblx0XHRcdHZhciBvd24gPSBoYXNoX25hbWUgPT09ICdfX3NlbGYnO1xyXG5cdFx0XHR2YXIgaHNoID0gb3duID8gdGhpcyA6IHRoaXMubGlua2VkX2hhc2hlc19wcm92aWRlci5nZXQoaGFzaF9uYW1lKTtcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnVXBkYXRpbmcgZHluYW1pYyBjZWxsIGxpbmtzIGZvciBjZWxsJywgY2VsbCwgbGlua3MsIGhhc2hfbmFtZSwgdGhpcy5saW5rZWRfaGFzaGVzX3Byb3ZpZGVyLCBoc2gpO1xyXG5cdFx0XHRpZihoc2gpe1xyXG5cdFx0XHRcdGZvcih2YXIgbGluayBvZiBsaW5rcyl7XHJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdXcml0aW5nIGR5bmFtaWMgY2VsbCBsaW5rICcgKyBsaW5rLmNlbGxfbmFtZSwgbGluay50eXBlID09PSAndmFsJywgdGhpcy5uYW1lKTtcclxuXHRcdFx0XHRcdGlmKGxpbmsudHlwZSA9PT0gJ3ZhbCcpe1xyXG5cdFx0XHRcdFx0XHRoc2guc2V0KGxpbmsuY2VsbF9uYW1lLCB2YWwpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmKGxpbmsudHlwZSA9PT0gJ2R5bmFtaWMnKXtcclxuXHRcdFx0XHRcdFx0aHNoLmNvbXB1dGUobGluay5jZWxsX25hbWUsIGNlbGwpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly9sb2coJ1VwZGF0aW5nIGxpbmtzJywgaGFzaF9uYW1lLCBsaW5rLmNlbGxfbmFtZSwgW2hhc2hfbmFtZSAhPT0gJ19fc2VsZicgPyB0aGlzLm5hbWUgOiBjZWxsLCB2YWxdKTtcclxuXHRcdFx0XHRcdFx0aHNoLnNldChsaW5rLmNlbGxfbmFtZSwgW293biA/IGNlbGwgOiB0aGlzLm5hbWUsIHZhbF0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9XHJcblx0dGhpcy5hcHAubGlua01hbmFnZXIuY2hlY2tVcGRhdGUodGhpcy5pZCwgY2VsbCwgdmFsKTtcclxufVxyXG5cclxudmFyIHN5c3RlbV9wcmVkaWNhdGVzID0gbmV3IFNldChbXHJcblx0J2lzJyxcclxuXHQnYXN5bmMnLFxyXG5cdCdjbG9zdXJlJyxcclxuXHQnZnVubmVsJyxcclxuXHQnbWFwJyxcclxuXHQnaGFzaCcsXHJcblx0J2R5bmFtaWMnLFxyXG5cdCduZXN0ZWQnXHJcbl0pO1xyXG52YXIgc2lkZV9lZmZlY3RzID0ge1xyXG5cdCdjaGlsZCc6IHtcclxuXHRcdGZ1bmM6IGZ1bmN0aW9uKGNlbGxuYW1lLCB2YWwsIHR5cGUpe1xyXG5cdFx0XHRpZih2YWwpe1xyXG5cdFx0XHRcdHRoaXMubGlua0hhc2goY2VsbG5hbWUsIHZhbCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYodmFsID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdHZhciBsaW5rX2FzID0gY2VsbG5hbWUucmVwbGFjZSgnJGNoaWxkXycsICcnKTtcclxuXHRcdFx0XHR0aGlzLnVubGlua0NoaWxkKGxpbmtfYXMpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0cmVnZXhwOiAvXlxcJGNoaWxkXFxfLyxcclxuXHR9LFxyXG5cdGNoaWxkcmVuOiB7XHJcblx0XHRyZWdleHA6IC9eXFwkYWxsXFxfY2hpbGRyZW4kLyxcclxuXHRcdGZ1bmM6IGZ1bmN0aW9uKF9fLCBkZWx0YXMpe1xyXG5cdFx0XHRpZighZGVsdGFzIHx8ICFkZWx0YXMuZWFjaEtleSl7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGRlbHRhcy5lYWNoS2V5KChrKSA9PiB7XHJcblx0XHRcdFx0aWYoIWRlbHRhc1trXSkgcmV0dXJuO1xyXG5cdFx0XHRcdHZhciBbdHlwZSwga2V5LCBoYXNobmFtZSwgZnJlZV92YWxzXSA9IGRlbHRhc1trXTtcclxuXHRcdFx0XHRzd2l0Y2godHlwZSl7XHJcblx0XHRcdFx0XHRjYXNlICdyZW1vdmUnOlxyXG5cdFx0XHRcdFx0XHR0aGlzLnVubGlua0NoaWxkKGtleSk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ2FkZCc6XHJcblx0XHRcdFx0XHRcdHRoaXMubGlua0hhc2goa2V5LCBbaGFzaG5hbWUsIG51bGwsIG51bGwsIGZyZWVfdmFsc10pO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICdjaGFuZ2UnOlxyXG5cdFx0XHRcdFx0XHR0aGlzLnVwZGF0ZUNoaWxkRnJlZVZhbHVlcyhrZXksIGZyZWVfdmFscyk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignVW5rbm93biBhY3Rpb246ICcgKyB0eXBlKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG52YXIgcHJlZGVmaW5lZF9mdW5jdGlvbnMgPSB7XHJcblx0Jz0nOiB7XHJcblx0XHR0eXBlOiAnZnVuYycsIFxyXG5cdFx0ZnVuYzogZnVuY3Rpb24oYSwgYil7IHJldHVybiBhID09IGI7fVxyXG5cdH0sXHJcblx0Jz09Jzoge1xyXG5cdFx0dHlwZTogJ2Z1bmMnLCBcclxuXHRcdGZ1bmM6IGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYSA9PT0gYjt9XHJcblx0fSxcclxuXHQnIT0nOiB7XHJcblx0XHR0eXBlOiAnZnVuYycsIFxyXG5cdFx0ZnVuYzogZnVuY3Rpb24oYSwgYil7IHJldHVybiBhICE9IGI7fVxyXG5cdH0sXHJcblx0JyE9PSc6IHtcclxuXHRcdHR5cGU6ICdmdW5jJywgXHJcblx0XHRmdW5jOiBmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgIT09IGI7fVxyXG5cdH0sXHJcblx0JysnOiB7XHJcblx0XHR0eXBlOiAnZnVuYycsIFxyXG5cdFx0ZnVuYzogZnVuY3Rpb24oYSwgYil7IHJldHVybiAoYSA/IE51bWJlcihhKSA6IDApICsgKGIgPyBOdW1iZXIoYikgOiAwKTt9XHJcblx0fSxcclxuXHQnLSc6IHtcclxuXHRcdHR5cGU6ICdmdW5jJywgXHJcblx0XHRmdW5jOiBmdW5jdGlvbihhLCBiKXsgcmV0dXJuIE51bWJlcihhKSAtIE51bWJlcihiKTt9XHJcblx0fSxcclxuXHQnKic6IHtcclxuXHRcdHR5cGU6ICdmdW5jJywgXHJcblx0XHRmdW5jOiBmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEqYjt9XHJcblx0fSxcclxuXHQnLyc6IHtcclxuXHRcdHR5cGU6ICdmdW5jJywgXHJcblx0XHRmdW5jOiBmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEvYjt9XHJcblx0fSxcclxuXHQnJSc6IHtcclxuXHRcdHR5cGU6ICdmdW5jJywgXHJcblx0XHRmdW5jOiBmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGElYjt9XHJcblx0fSxcclxuXHQnJCc6IHtcclxuXHRcdHR5cGU6ICdmdW5jJywgXHJcblx0XHRmdW5jOiBmdW5jdGlvbihhLCBiKXsgXHJcblx0XHRcdGNvbnNvbGUubG9nKCdTZWFyY2hpbmcgc2VsZWN0b3InLCBiLCAnaW4nLCBhKTtcclxuXHRcdFx0cmV0dXJuIGEuZmluZChiKTsgXHJcblx0XHR9XHJcblx0fSxcclxufVxyXG5cclxudmFyIGdldF9hcHAgPSBmdW5jdGlvbihwYWNrYWdlcyl7XHJcblx0dmFyIGFwcCA9IG5ldyBBcHAocGFja2FnZXMpO1xyXG5cdGFwcHMucHVzaChhcHApO1xyXG5cdHJldHVybiBhcHA7XHJcbn1cclxuXHJcbnZhciBpbml0X2Zyb21fcGF0aCA9IGZ1bmN0aW9uKG9iaiwgcGF0aCwgdmFsKSB7XHJcblx0aWYoIShwYXRoIGluc3RhbmNlb2YgQXJyYXkpKXtcclxuXHRcdHBhdGggPSBwYXRoLnNwbGl0KCcvJyk7XHJcblx0fVxyXG5cdGZvcihsZXQgayBpbiBwYXRoKXtcclxuXHRcdGxldCBrZXkgPSBwYXRoW2tdO1xyXG5cdFx0aWYoa2V5ID09PSAnJykgY29udGludWU7XHJcblx0XHRpZihvYmpba2V5XSA9PT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0aWYocGF0aFtOdW1iZXIoaykgKyAxXSl7XHJcblx0XHRcdFx0b2JqW2tleV0gPSB7fTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRvYmpba2V5XSA9IHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYoIShvYmpba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkpe1xyXG5cdFx0XHRvYmpba2V5XSA9IHt9O1xyXG5cdFx0fVxyXG5cdFx0b2JqID0gb2JqW2tleV07XHJcblx0fVxyXG59XHJcbnZhciBzZXRfbGlzdGVuaW5nX3R5cGUgPSBmdW5jdGlvbihjZWxsLCB0eXBlKXtcclxuXHRjb25zb2xlLmxvZygnX19fX19fX19fX19fX19fIFNMVCcsIGNlbGwsIHR5cGUpO1xyXG5cdHJldHVybiB7XHJcblx0XHQvLydjaGFuZ2UnOiAnOicsIFxyXG5cdFx0J3NraXBfc2FtZSc6ICc9JyxcclxuXHRcdCdwYXNzaXZlJzogJy0nLFxyXG5cdFx0J25vcm1hbCc6ICcnXHJcblx0fVt0eXBlXSArIGNlbGw7XHJcbn1cclxuXHJcbnZhciBjYW5fYmVfc2V0X3RvX2h0bWwgPSAoY2VsbG5hbWUsIHBhY2thZ2VzKSA9PiB7XHJcblx0cmV0dXJuIGNlbGxuYW1lICE9PSAnKicgXHJcblx0XHQmJiAoY2VsbG5hbWUuaW5kZXhPZignLycpID09PSAtMSlcclxuXHRcdCYmICFmaW5kTWF0Y2hlcihjZWxsbmFtZSwgcGFja2FnZXMpO1xyXG59XHJcblxyXG52YXIgdW51c3VhbF9jZWxsID0gKGNlbGxuYW1lKSA9PiB7XHJcblx0cmV0dXJuICEoY2VsbG5hbWUubWF0Y2goL14oW2EtekEtWjAtOVxcX10qKSQvKSk7XHJcbn1cclxuXHJcbnZhciBmaW5kTWF0Y2hlciA9IChjZWxsbmFtZSwgcGFja2FnZXMpID0+IHtcclxuXHRmb3IodmFyIG4gaW4gcGFja2FnZXMuY2VsbE1hdGNoZXJzKXtcclxuXHRcdHZhciBtID0gcGFja2FnZXMuY2VsbE1hdGNoZXJzW25dO1xyXG5cdFx0dmFyIG1hdGNoZXMgPSBjZWxsbmFtZS5tYXRjaChtLnJlZ2V4cCk7XHJcblx0XHRpZihtYXRjaGVzKXtcclxuXHRcdFx0cmV0dXJuIFttLCBtYXRjaGVzXTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbnZhciBwYXJzZV9jZWxsbmFtZSA9IGZ1bmN0aW9uKGNlbGxuYW1lLCBwb29sLCBjb250ZXh0LCBwYWNrYWdlcywgaXNEeW5hbWljKXtcclxuXHRpZihjZWxsbmFtZS5pbmRleE9mKCcvJykgIT09IC0xKXtcclxuXHRcdC8vY29uc29sZS5sb2coJ0ZvdW5kIGNlbGxuYW1lJywgY2VsbG5hbWUpO1xyXG5cdFx0Ly8gaXQncyBhIHBhdGggLSBsaW5rIHRvIG90aGVyIGhhc2hlc1xyXG5cdFx0dmFyIHBhdGggPSBjZWxsbmFtZS5zcGxpdCgnLycpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZygnRm91bmQnLCBjZWxsbmFtZSwgJ2luJywgcG9vbCk7XHJcblx0XHRpZighcG9vbC5pbml0TGlua0NoYWluKXtcclxuXHRcdFx0aW5pdF9pZl9lbXB0eShwb29sLCAnbGlua19jaGFpbnMnLCB7fSwgY2VsbG5hbWUsIHBhdGgpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cG9vbC5pbml0TGlua0NoYWluKGNlbGxuYW1lKTtcclxuXHRcdH1cclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0dmFyIHJlYWxfY2VsbG5hbWUgPSBnZXRfcmVhbF9jZWxsX25hbWUoY2VsbG5hbWUpO1xyXG5cdGZvcih2YXIgbiBpbiBzaWRlX2VmZmVjdHMpe1xyXG5cdFx0dmFyIG0gPSBzaWRlX2VmZmVjdHNbbl07XHJcblx0XHR2YXIgbWF0Y2hlcyA9IHJlYWxfY2VsbG5hbWUubWF0Y2gobS5yZWdleHApO1xyXG5cdFx0aWYobWF0Y2hlcyl7XHJcblx0XHRcdGluaXRfaWZfZW1wdHkocG9vbCwgJ3NpZGVfZWZmZWN0cycsIHt9LCBjZWxsbmFtZSwgW10pO1xyXG5cdFx0XHRpZihwb29sLnNpZGVfZWZmZWN0c1tjZWxsbmFtZV0uaW5kZXhPZihuKSA9PT0gLTEpe1xyXG5cdFx0XHRcdHBvb2wuc2lkZV9lZmZlY3RzW2NlbGxuYW1lXS5wdXNoKG4pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHZhciBtYXRjaGVkID0gZmluZE1hdGNoZXIocmVhbF9jZWxsbmFtZSwgcGFja2FnZXMpO1xyXG5cdGlmKG1hdGNoZWQpe1xyXG5cdFx0bWF0Y2hlZFswXS5mdW5jKG1hdGNoZWRbMV0sIHBvb2wsIGNvbnRleHQsIHBhY2thZ2VzKTtcclxuXHR9XHJcbn1cclxuXHJcbnZhciBnZXRfcmFuZG9tX25hbWUgPSAoZnVuY3Rpb24oKXtcclxuXHQvLyB0ZW1wIHNvbHV0aW9uIGZvciBTeW1ib2xcclxuXHR2YXIgYyA9IDE7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCl7XHJcblx0XHRyZXR1cm4gJ29sb2xvMTIzMzIxQEBAXycgKyAoKytjKTtcclxuXHR9XHJcbn0pKClcclxuXHJcbnZhciBwYXJzZV9hcnJfZnVuY3N0cmluZyA9IChhLCBrZXksIHBvb2wsIHBhY2thZ2VzKSA9PiB7XHJcblx0dmFyIGZ1bmNzdHJpbmc7XHJcblx0YSA9IGEuc2xpY2UoKTtcclxuXHR2YXIgZnVuY25hbWUgPSBhWzBdO1xyXG5cdGlmKHBhY2thZ2VzLnByZWRpY2F0ZXMuaGFzT3duUHJvcGVydHkoZnVuY25hbWUpKXtcclxuXHRcdGEgPSBwYWNrYWdlcy5wcmVkaWNhdGVzW2Z1bmNuYW1lXShhLnNsaWNlKDEpKTtcclxuXHRcdGZ1bmNuYW1lID0gYVswXTtcclxuXHRcdGEgPSBhLnNsaWNlKCk7XHJcblx0fVxyXG5cdGlmKCFmdW5jbmFtZSkge1xyXG5cdFx0Y29uc29sZS5lcnJvcignd3JvbmcgZnVuYzonLCBmdW5jbmFtZSk7XHJcblx0fVxyXG5cdHZhciBjYyA9IHNwbGl0X2NhbWVsY2FzZShmdW5jbmFtZSk7XHJcblx0aWYoYS5sZW5ndGggPT09IDEgJiYgKHR5cGVvZiBhWzBdID09PSAnc3RyaW5nJykpe1xyXG5cdFx0ZnVuY3N0cmluZyA9IFsnaXMnLCBpZCwgYVswXV07XHJcblx0fSBlbHNlIHtcclxuXHRcdGlmKGZ1bmNuYW1lIGluc3RhbmNlb2YgRnVuY3Rpb24pe1xyXG5cdFx0XHQvLyBpdCdzIFwiaXNcIiBiZSBkZWZhdWx0XHJcblx0XHRcdGZ1bmNzdHJpbmcgPSBbJ2lzJ10uY29uY2F0KGEpO1xyXG5cdFx0fSBlbHNlIGlmKHN5c3RlbV9wcmVkaWNhdGVzLmhhcyhjY1swXSkpe1xyXG5cdFx0XHRzd2l0Y2goZnVuY25hbWUpe1xyXG5cdFx0XHRcdGNhc2UgJ25lc3RlZCc6XHJcblx0XHRcdFx0XHR2YXIgZGVwZW5kZW50X2NlbGxzID0gYVsyXS5tYXAoKGNlbGxuYW1lKSA9PiAoa2V5ICsgJy4nICsgY2VsbG5hbWUpKTtcclxuXHRcdFx0XHRcdGluaXRfaWZfZW1wdHkocG9vbC5wbGFpbl9iYXNlLCAnJGluaXQnLCB7fSk7XHJcblx0XHRcdFx0XHRkZXBlbmRlbnRfY2VsbHMuZWFjaCgobmFtZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRwb29sLnBsYWluX2Jhc2UuJGluaXRbbmFtZV0gPSBudWxsO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdGEuc3BsaWNlKDIsIDEpO1xyXG5cdFx0XHRcdFx0ZnVuY3N0cmluZyA9IGE7IFxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ21hcCc6XHJcblx0XHRcdFx0XHRmdW5jc3RyaW5nID0gWydtYXAnLCBhWzFdXS5jb25jYXQoT2JqZWN0LmtleXMoYVsxXSkpO1xyXG5cdFx0XHRcdFx0aWYoYVsyXSl7XHJcblx0XHRcdFx0XHRcdC8vIGRlZmF1bHQgdmFsdWVcclxuXHRcdFx0XHRcdFx0aW5pdF9pZl9lbXB0eShwb29sLnBsYWluX2Jhc2UsICckaW5pdCcsIHt9KTtcclxuXHRcdFx0XHRcdFx0cG9vbC5wbGFpbl9iYXNlLiRpbml0W2tleV0gPSBhWzJdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRmdW5jc3RyaW5nID0gYTsgXHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmKGZ1bmNuYW1lID09PSAnanVzdCcpe1xyXG5cdFx0XHRcdGluaXRfaWZfZW1wdHkocG9vbC5wbGFpbl9iYXNlLCAnJGluaXQnLCB7fSk7XHJcblx0XHRcdFx0cG9vbC5wbGFpbl9iYXNlLiRpbml0W2tleV0gPSBhWzFdO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZihwcmVkZWZpbmVkX2Z1bmN0aW9uc1tmdW5jbmFtZV0pe1xyXG5cdFx0XHRcdFx0dmFyIGZuYyA9IHByZWRlZmluZWRfZnVuY3Rpb25zW2Z1bmNuYW1lXTtcclxuXHRcdFx0XHRcdHN3aXRjaChmbmMudHlwZSl7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ2Z1bmMnOlxyXG5cdFx0XHRcdFx0XHRcdGZ1bmNzdHJpbmcgPSBbJ2lzJywgZm5jLmZ1bmNdLmNvbmNhdChhLnNsaWNlKDEpKVxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBwcmVkaWNhdGU6ICcgKyBmdW5jbmFtZSwgYSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBmdW5jc3RyaW5nO1xyXG59XHJcblxyXG52YXIgcGFyc2VfZmV4cHIgPSBmdW5jdGlvbihhLCBwb29sLCBrZXksIHBhY2thZ2VzKXtcclxuXHR2YXIgZnVuY3N0cmluZztcclxuXHQvL2NvbnNvbGUubG9nKCdQYXJzZSBmZXhwcicsIGEsIGtleSk7XHJcblx0aWYoYSBpbnN0YW5jZW9mIEFycmF5KXtcclxuXHRcdGZ1bmNzdHJpbmcgPSBwYXJzZV9hcnJfZnVuY3N0cmluZyhhLCBrZXksIHBvb2wsIHBhY2thZ2VzKTtcclxuXHRcdGlmKGZ1bmNzdHJpbmcgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBpdCdzIHByaW1pdGl2ZSB2YWx1ZVxyXG5cdFx0aW5pdF9pZl9lbXB0eShwb29sLnBsYWluX2Jhc2UsICckaW5pdCcsIHt9KTtcclxuXHRcdHBhcnNlX2NlbGxuYW1lKGtleSwgcG9vbCwgJ3NldHRlcicsIHBhY2thZ2VzKTtcclxuXHRcdHBvb2wucGxhaW5fYmFzZS4kaW5pdFtrZXldID0gYTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0aWYoIWZ1bmNzdHJpbmdbMl0pe1xyXG5cdFx0Ly8gZnVuY3Rpb24gd2l0aCBubyBkZXBlbmRhbmN5XHJcblx0XHRpbml0X2lmX2VtcHR5KHBvb2wsICdub19hcmdzX2NlbGxzJywge30sIGtleSwgdHJ1ZSk7XHJcblx0fVxyXG5cdGZvcihsZXQgayA9IDI7IGsgPCBmdW5jc3RyaW5nLmxlbmd0aDsgKytrKXtcclxuXHRcdHZhciBjZWxsbmFtZSA9IGZ1bmNzdHJpbmdba107XHJcblx0XHRzd2l0Y2godHlwZW9mKGNlbGxuYW1lKSl7XHJcblx0XHRcdGNhc2UgJ3N0cmluZyc6XHJcblx0XHRcdFx0cGFyc2VfY2VsbG5hbWUoY2VsbG5hbWUsIHBvb2wsIG51bGwsIHBhY2thZ2VzKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgJ29iamVjdCc6XHJcblx0XHRcdFx0aWYoY2VsbG5hbWUgaW5zdGFuY2VvZiBBcnJheSl7XHJcblx0XHRcdFx0XHR2YXIgc29tZV9rZXkgPSBnZXRfcmFuZG9tX25hbWUoKTtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ1JhbmRvbSBuYW1lIGlzJywgc29tZV9rZXkpO1xyXG5cdFx0XHRcdFx0cGFyc2VfZmV4cHIoY2VsbG5hbWUsIHBvb2wsIHNvbWVfa2V5LCBwYWNrYWdlcyk7XHJcblx0XHRcdFx0XHRmdW5jc3RyaW5nW2tdID0gc29tZV9rZXk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdFx0ZGVmYXVsdDogXHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdOb3Qga25vdyBob3cgdG8gaGFuZGxlIHRoaXMgJyArIHR5cGVvZihjZWxsbmFtZSkpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcblx0cGFyc2VfY2VsbG5hbWUoa2V5LCBwb29sLCAnc2V0dGVyJywgcGFja2FnZXMpO1xyXG5cdC8vY29uc29sZS5sb2coJ0dvdCBmdW5jc3RyaW5nJywgZnVuY3N0cmluZyk7XHJcblx0cG9vbC5wbGFpbl9iYXNlW2tleV0gPSBmdW5jc3RyaW5nO1xyXG59XHJcbnZhciBwYXJzZV9mZXhwcjIgPSBmdW5jdGlvbihwb29sLCBwYWNrYWdlcywga2V5LCBhKXtcclxuXHRyZXR1cm4gcGFyc2VfZmV4cHIoYSwgcG9vbCwga2V5LCBwYWNrYWdlcyk7XHJcbn1cclxuXHJcbnZhciBnZXRfY2VsbF90eXBlID0gZnVuY3Rpb24oY2VsbG5hbWUsIHR5cGUsIGZ1bmMsIHBhcmVudHMpe1xyXG5cdC8vY29uc29sZS5sb2coJ2dldHRpbmcgY2VsbCB0eXBlJywgYXJndW1lbnRzKTtcclxuXHRcclxuXHR2YXIgcmVhbF9jZWxsX3R5cGVzID0gc3BsaXRfY2FtZWxjYXNlKHR5cGUpIHx8IFtdO1xyXG5cclxuXHR2YXIgbWFwID0gcmVhbF9jZWxsX3R5cGVzLmluZGV4T2YoJ21hcCcpICE9PSAtMTtcclxuXHR2YXIgY2xvc3VyZSA9IHJlYWxfY2VsbF90eXBlcy5pbmRleE9mKCdjbG9zdXJlJykgIT09IC0xO1xyXG5cdHZhciBhc3luYyA9IHJlYWxfY2VsbF90eXBlcy5pbmRleE9mKCdhc3luYycpICE9PSAtMTtcclxuXHR2YXIgbmVzdGVkID0gcmVhbF9jZWxsX3R5cGVzLmluZGV4T2YoJ25lc3RlZCcpICE9PSAtMTtcclxuXHR2YXIgZnVubmVsID0gcmVhbF9jZWxsX3R5cGVzLmluZGV4T2YoJ2Z1bm5lbCcpICE9PSAtMTtcclxuXHR2YXIgZHluYW1pYyA9IHJlYWxfY2VsbF90eXBlcy5pbmRleE9mKCdkeW5hbWljJykgIT09IC0xO1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlLCBcclxuXHRcdGZ1bmMsIFxyXG5cdFx0cHJvcHM6IHttYXAsIGNsb3N1cmUsIGFzeW5jLCBuZXN0ZWQsIGZ1bm5lbCwgZHluYW1pY30sIFxyXG5cdFx0cmVhbF9jZWxsX25hbWU6IGNlbGxuYW1lLnJlcGxhY2UoL14oXFw6fFxcLSkvLCAnJyksXHJcblx0XHRwYXJlbnRzOiBwYXJlbnRzIHx8IFtdLCBcclxuXHRcdGFyZ19udW06IHBhcmVudHMgPyBwYXJlbnRzLmxlbmd0aCA6IDAsXHJcblx0XHRjaGlsZHJlbjogW11cclxuXHR9XHJcbn1cclxuXHJcbnZhciBwYXJzZV9jZWxsX3R5cGUgPSAoaSwgcm93LCBwb29sLCBjaGlsZHJlbikgPT4ge1xyXG5cdHZhciBjZWxsX3R5cGVzID0gcG9vbDtcclxuXHRsZXQgdHlwZSA9ICdmcmVlJztcclxuXHRpZihpID09PSAnJGNoaWxkcmVuJyl7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdGlmKGkgPT09ICckaW5pdCcpe1xyXG5cdFx0Ly9jb25zb2xlLmxvZygncGFyc2luZyBmcmVlIHZhcmlhYmxlcycsIHBic1tpXSk7XHJcblx0XHRmb3IodmFyIGogaW4gcm93KXtcclxuXHRcdFx0Y2VsbF90eXBlc1tqXSA9IGdldF9jZWxsX3R5cGUoaSwgdHlwZSk7XHJcblx0XHR9XHJcblx0XHQvL2NvbnNvbGUubG9nKCdub3cgY2VsbF90eXBlcyBqIGxvb2tzIGxpa2UnLCBjZWxsX3R5cGVzKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0aWYoIShyb3cgaW5zdGFuY2VvZiBBcnJheSkpe1xyXG5cdFx0Y2VsbF90eXBlc1tpXSA9IGdldF9jZWxsX3R5cGUoaSwgdHlwZSk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdHZhciBmdW5jID0gcm93WzBdO1xyXG5cdHZhciBwYXJlbnRzID0gcm93LnNsaWNlKDEpO1xyXG5cdGlmKGZ1bmMgaW5zdGFuY2VvZiBGdW5jdGlvbil7XHJcblx0XHQvLyByZWd1bGFyIHN5bmMgY2VsbFxyXG5cdFx0dHlwZSA9ICdpcyc7XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIG1heSBiZSAnYXN5bmMnLCAnY2hhbmdlcycgb3Igc29tZXRoaW5nIGVsc2VcclxuXHRcdHR5cGUgPSBmdW5jO1xyXG5cdFx0ZnVuYyA9IHBhcmVudHMuc2hpZnQoKTtcclxuXHR9XHJcblx0Y2VsbF90eXBlc1tpXSA9IGdldF9jZWxsX3R5cGUoaSwgdHlwZSwgZnVuYywgcGFyZW50cyk7XHJcblx0Zm9yKHZhciBqIGluIHBhcmVudHMpe1xyXG5cdFx0dmFyIFtsaXN0ZW5pbmdfdHlwZSwgcGFyZW50X2NlbGxfbmFtZV0gPSBjZWxsX2xpc3RlbmluZ190eXBlKHBhcmVudHNbal0pO1xyXG5cdFx0aWYobGlzdGVuaW5nX3R5cGUgIT09ICdwYXNzaXZlJyl7XHJcblx0XHRcdGluaXRfaWZfZW1wdHkoY2hpbGRyZW4sIHBhcmVudF9jZWxsX25hbWUsIHt9KTtcclxuXHRcdFx0Y2hpbGRyZW5bcGFyZW50X2NlbGxfbmFtZV1baV0gPSB0cnVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly9jb25zb2xlLmluZm8oJ09taXQgc2V0dGluZycsIGksICdhcyBjaGlsZCBmb3InLCBwYXJlbnRfY2VsbF9uYW1lLCAnIC0gaXRzIHBhc3NpdmUhJyk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxudmFyIHBhcnNlX2NlbGxfdHlwZXMgPSBmdW5jdGlvbihwYnMpe1xyXG5cdHZhciBjZWxsX3R5cGVzID0ge307XHJcblx0dmFyIGNoaWxkcmVuID0ge307XHJcblx0Ly9jb25zb2xlLmxvZygnUEJTJywgcGJzKTtcclxuXHRmb3IobGV0IGkgaW4gcGJzKXtcclxuXHRcdHBhcnNlX2NlbGxfdHlwZShpLCBwYnNbaV0sIGNlbGxfdHlwZXMsIGNoaWxkcmVuKTtcclxuXHR9XHJcblx0Zm9yKGxldCBjZWxsbmFtZSBpbiBjaGlsZHJlbil7XHJcblx0XHRpZighY2VsbF90eXBlc1tjZWxsbmFtZV0pe1xyXG5cdFx0XHR2YXIgcl90eXBlID0gaXNfc3BlY2lhbChjZWxsbmFtZSkgPyAnZnJlZScgOiAnZmFrZSc7XHJcblx0XHRcdGNlbGxfdHlwZXNbY2VsbG5hbWVdID0gZ2V0X2NlbGxfdHlwZShjZWxsbmFtZSwgcl90eXBlKTtcclxuXHRcdH0gXHJcblx0XHRjZWxsX3R5cGVzW2NlbGxuYW1lXS5jaGlsZHJlbiA9IGNoaWxkcmVuW2NlbGxuYW1lXTtcclxuXHR9XHJcblx0Ly9jb25zb2xlLmxvZygnUGFyc2VkIGNlbGwgdHlwZXMnLCBjZWxsX3R5cGVzKTtcclxuXHRyZXR1cm4gY2VsbF90eXBlcztcclxufVxyXG5cclxudmFyIHBhcnNlX3BiID0gZnVuY3Rpb24ocmVzLCBwYWNrYWdlcyl7XHJcblx0Zm9yKHZhciBrZXkgaW4gcmVzLnBsYWluX2Jhc2UpIHtcclxuXHRcdGlmKGtleSA9PT0gJyRpbml0Jyl7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cdFx0aWYoa2V5ID09PSAnJGNoaWxkcmVuJyl7XHJcblx0XHRcdHZhciB2YWx1ZSA9IHJlcy5wbGFpbl9iYXNlLiRjaGlsZHJlbjtcclxuXHRcdFx0aWYodmFsdWUgaW5zdGFuY2VvZiBBcnJheSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKXtcclxuXHRcdFx0XHQvLyBpdHMgZHluYW1pYyBjaGlsZHJlblxyXG5cdFx0XHRcdHBhcnNlX2ZleHByKHZhbHVlLCByZXMsICckYWxsX2NoaWxkcmVuJywgcGFja2FnZXMpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhbHVlLmVhY2goKGhhc2hfdHlwZSwgbGlua19hcykgPT4ge1xyXG5cdFx0XHRcdFx0aWYoaGFzaF90eXBlIGluc3RhbmNlb2YgQXJyYXkpe1xyXG5cdFx0XHRcdFx0XHRrZXkgPSAnJGNoaWxkXycgKyBsaW5rX2FzO1xyXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdDaGlsZCcsIGhhc2hfdHlwZSwgbGlua19hcywga2V5KTtcclxuXHRcdFx0XHRcdFx0cGFyc2VfZmV4cHIoaGFzaF90eXBlLCByZXMsIGtleSwgcGFja2FnZXMpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYodHlwZW9mIGhhc2hfdHlwZSA9PT0gJ3N0cmluZycpe1xyXG5cdFx0XHRcdFx0XHRcdHJlcy5oYXNoZXNfdG9fbGlua1tsaW5rX2FzXSA9IGhhc2hfdHlwZTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKCFoYXNoX3R5cGUuYWRkICYmICFoYXNoX3R5cGUucmVtb3ZlKXtcclxuXHRcdFx0XHRcdFx0XHRyZXMuaGFzaGVzX3RvX2xpbmtbbGlua19hc10gPSBoYXNoX3R5cGUudHlwZTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZygnQWRkaW5nIGNlbGxzIGZvciBtYW5hZ2luZyBkeW5hbWljIGhhc2gnLCBoYXNoX3R5cGUpO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBvYmogPSB7fTtcclxuXHRcdFx0XHRcdFx0XHRpZihoYXNoX3R5cGUuYWRkKXtcclxuXHRcdFx0XHRcdFx0XHRcdG9ialtoYXNoX3R5cGUuYWRkXSA9IGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB7dHlwZTogaGFzaF90eXBlLnR5cGUsIGFjdGlvbjogJ2FkZCd9O1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZihoYXNoX3R5cGUucmVtb3ZlKXtcclxuXHRcdFx0XHRcdFx0XHRcdG9ialtoYXNoX3R5cGUucmVtb3ZlXSA9IGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB7YWN0aW9uOiAncmVtb3ZlJ307XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHBhcnNlX2ZleHByKFsnbWFwJywgb2JqXSwgcmVzLCAnJGNoaWxkXycgKyBsaW5rX2FzLCBwYWNrYWdlcyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cdFx0cGFyc2VfZmV4cHIocmVzLnBsYWluX2Jhc2Vba2V5XSwgcmVzLCBrZXksIHBhY2thZ2VzKTtcclxuXHR9XHJcblx0cmV0dXJuIHJlcztcclxufVxyXG5cclxudmFyIHBhcnNlX2V4dGVybmFsX2xpbmtzX2FuZF8kaW5pdCA9IGZ1bmN0aW9uKHBvb2wsIGtleSl7XHJcblxyXG59XHJcblxyXG5cclxud2luZG93LkZpcmVyYSA9IGZ1bmN0aW9uKGNvbmZpZyl7XHJcblx0aWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpe1xyXG5cdFx0Ly8gaXQncyBhIHNldCBvZiBncmlkcyB3ZSBzaG91bGQgam9pblxyXG5cdFx0Y29uZmlnID0gRmlyZXJhLmpvaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuXHR9XHJcblx0dmFyIHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblx0dmFyIGFwcCA9IGdldF9hcHAoY29uZmlnLiRwYWNrYWdlcyk7XHJcblx0Ly8gZ2V0dGluZyByZWFsIHBic1xyXG5cdGFwcC5jYnMgPSBjb25maWcubWFwKGFwcC5wYXJzZV9jYnMuYmluZChhcHApLCB7ZXhjZXB0OiBbJyRwYWNrYWdlcyddfSk7XHJcblx0Ly8gbm93IHdlIHNob3VsZCBpbnN0YW50aWF0ZSBlYWNoIHBiXHJcblx0aWYoIWFwcC5jYnMuX19yb290KXtcclxuXHRcdC8vIG5vIHJvb3QgaGFzaFxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYW50IGZpbmQgcm9vdCBhcHAhJyk7XHJcblx0fVxyXG5cdC8vY29uc29sZS5sb2coYXBwKTtcclxuXHQvL3ZhciBjb21waWxhdGlvbl9maW5pc2hlZCA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cdGFwcC5yb290ID0gbmV3IEhhc2goYXBwLCAnX19yb290JywgZmFsc2UsIHskYXBwX2lkOiBhcHAuaWR9LCBudWxsLCBudWxsLCAnLycpO1xyXG5cdEZpcmVyYS5oYXNoQ3JlYXRlZChhcHAsIGFwcC5yb290LmlkLCBhcHAucm9vdC5wYXRoLCBudWxsKTtcclxuXHQvL3ZhciBpbml0X2ZpbmlzaGVkID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblx0Ly9pZigxID4gMCl7XHJcblx0Ly9cdGNvbnNvbGUuaW5mbygnQXBwIHJ1biwgaXQgdG9vayAnICsgKGluaXRfZmluaXNoZWQgLSBjb21waWxhdGlvbl9maW5pc2hlZCkudG9GaXhlZCgzKSArICcgbWlsbGlzZWNvbmRzLidcclxuXHQvL1x0KTtcclxuXHQvL31cclxuXHRyZXR1cm4gYXBwO1xyXG59O1xyXG5cclxudmFyIG9uSGFzaENyZWF0ZWRTdGFjayA9IHt9O1xyXG5GaXJlcmEuaGFzaENyZWF0ZWQgPSBmdW5jdGlvbihhcHAsIGdyaWRfaWQsIHBhdGgsIHBhcmVudCl7XHJcblx0aWYob25IYXNoQ3JlYXRlZFN0YWNrW2FwcC5pZF0pe1xyXG5cdFx0Zm9yKGxldCBjYiBvZiBvbkhhc2hDcmVhdGVkU3RhY2tbYXBwLmlkXSl7XHJcblx0XHRcdGNiKGFwcCwgZ3JpZF9pZCwgcGF0aCwgcGFyZW50KTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbnZhciB0eXBlX21hcCA9IHtcclxuXHQnaXMnOiAnZm9ybXVsYScsXHJcblx0J2ZyZWUnOiAnZnJlZScsXHJcblx0J2Zha2UnOiAnZmFrZScsXHJcbn1cclxuXHJcbnZhciBnZXRfZ3JpZF9zdHJ1Y3QgPSAoZ3JpZCkgPT4ge1xyXG5cdHZhciBjZWxsc18xID0gT2JqZWN0LmtleXMoZ3JpZC5jZWxsX3R5cGVzKTtcclxuXHR2YXIgY2VsbHNfMiA9IE9iamVjdC5rZXlzKGdyaWQuY2VsbF92YWx1ZXMpO1xyXG5cdHZhciBjZWxsc18zID0gY2VsbHNfMS5jb25jYXQoY2VsbHNfMikudW5pcXVlKCk7XHJcblx0dmFyIGNlbGxzID0gW107XHJcblx0Zm9yKGxldCBjZWxsIG9mIGNlbGxzXzMpe1xyXG5cdFx0bGV0IHR5cGVzLCB0eXBlO1xyXG5cdFx0aWYoIWdyaWQuY2VsbF90eXBlc1tjZWxsXSl7XHJcblx0XHRcdC8vIHByb2JhYmx5LCBuZXN0ZWQgY2VsbCBjaGlsZFxyXG5cdFx0ICAgIHR5cGVzID0gWydmcmVlJ107XHJcblx0XHQgICAgdHlwZSA9ICdmcmVlJztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHQgICAgdHlwZXMgPSBzcGxpdF9jYW1lbGNhc2UoZ3JpZC5jZWxsX3R5cGVzW2NlbGxdLnR5cGUpO1xyXG5cdFx0ICAgIHR5cGUgPSBncmlkLmNlbGxfdHlwZXNbY2VsbF0udHlwZTtcclxuXHRcdH1cclxuXHRcdHZhciBwcm9wcyA9IHt9O1xyXG5cdFx0dmFyIG9uY2UgPSBmYWxzZTtcclxuXHRcdGZvcihsZXQgc3VidHlwZSBvZiB0eXBlcyl7XHJcblx0XHRcdGlmKHN5c3RlbV9wcmVkaWNhdGVzLmhhcyhzdWJ0eXBlKSAmJiBzdWJ0eXBlICE9PSAnaXMnKXtcclxuXHRcdFx0XHRwcm9wc1tzdWJ0eXBlXSA9IHRydWU7XHJcblx0XHRcdFx0b25jZSA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmKG9uY2Upe1xyXG5cdFx0XHR0eXBlID0gJ2lzJztcclxuXHRcdH1cclxuXHRcdGlmKCF0eXBlX21hcFt0eXBlXSl7XHJcblx0XHRcdGNvbnNvbGUubG9nKCd1bm1hcHBlZCB0eXBlIScsIHR5cGUpO1xyXG5cdFx0fVxyXG5cdFx0dHlwZSA9IHR5cGVfbWFwW3R5cGVdO1xyXG5cdFx0dmFyIG9iaiA9IHtcclxuXHRcdFx0bmFtZTogY2VsbCxcclxuXHRcdFx0dmFsOiBncmlkLmNlbGxfdmFsdWVzW2NlbGxdLFxyXG5cdFx0XHR0eXBlLFxyXG5cdFx0XHRwcm9wcyxcclxuXHRcdH07XHJcblx0XHRpZihvbmNlKXtcclxuXHRcdFx0b2JqLnN1YnR5cGUgPSBncmlkLmNlbGxfdHlwZXNbY2VsbF0udHlwZTtcclxuXHRcdH1cclxuXHRcdGNlbGxzLnB1c2gob2JqKVxyXG5cdH1cclxuXHR2YXIgYnlfdHlwZXMgPSBncm91cF9ieShjZWxscywgKG9iaikgPT4ge1xyXG5cdFx0aWYob2JqLm5hbWUuaW5kZXhPZignLycpICE9PSAtMSl7XHJcblx0XHRcdHJldHVybiAnbGlua2VkJztcclxuXHRcdH1cclxuXHRcdGlmKG9iai5uYW1lLmluZGV4T2YoJyRjaGlsZCcpID09PSAwIHx8IG9iai5uYW1lID09PSAnJGFsbF9jaGlsZHJlbicpe1xyXG5cdFx0XHRyZXR1cm4gJ2NoaWxkcmVuJztcclxuXHRcdH1cclxuXHRcdGlmKG9iai5uYW1lLmluZGV4T2YoJ3wnKSAhPT0gLTEpe1xyXG5cdFx0XHRyZXR1cm4gJ0RPTSc7XHJcblx0XHR9XHJcblx0XHRpZihvYmoubmFtZVswXSA9PT0gJyQnKXtcclxuXHRcdFx0cmV0dXJuICdzeXN0ZW0nO1xyXG5cdFx0fVxyXG5cdFx0aWYob2JqLnByb3BzLmZ1bm5lbCl7XHJcblx0XHRcdHJldHVybiAnZnVubmVsJztcclxuXHRcdH1cclxuXHRcdHJldHVybiBvYmoudHlwZTtcclxuXHRcdFxyXG5cdH0pO1xyXG5cdFxyXG5cdHZhciBjaGlsZHMgPSBncmlkLmxpbmtlZF9oYXNoZXNfcHJvdmlkZXIucG9vbDtcclxuXHR2YXIgY2hpbGRyZW4gPSB7fTtcclxuXHRmb3IobGV0IGNoaWxkX25hbWUgaW4gY2hpbGRzKXtcclxuXHRcdGlmKGNoaWxkX25hbWUgPT09ICcuLicpIGNvbnRpbnVlO1xyXG5cdFx0bGV0IGNoaWxkX2lkID0gY2hpbGRzW2NoaWxkX25hbWVdO1xyXG5cdFx0bGV0IGNoaWxkID0gZ3JpZC5hcHAuZ2V0R3JpZChjaGlsZF9pZCk7XHJcblx0XHRjaGlsZHJlbltjaGlsZF9uYW1lXSA9IGdldF9ncmlkX3N0cnVjdChjaGlsZCk7XHJcblx0fVxyXG5cdGZvcihsZXQgY2VsbHR5cGUgaW4gYnlfdHlwZXMpe1xyXG5cdFx0YnlfdHlwZXNbY2VsbHR5cGVdLnNvcnQoKGEsIGIpID0+IHtcclxuXHRcdFx0cmV0dXJuIGEubmFtZSA+IGIubmFtZSA/IDEgOiAtMTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRyZXR1cm4ge1xyXG5cdFx0Y2hpbGRyZW4sXHJcblx0XHRjZWxsczogYnlfdHlwZXMsXHJcblx0fTtcclxufVxyXG5cclxudmFyIGdldF9hcHBfc3RydWN0ID0gKGFwcCkgPT4ge1xyXG5cdHJldHVybiBnZXRfZ3JpZF9zdHJ1Y3QoYXBwLnJvb3QpO1xyXG59XHJcbnZhciBnZXRfdmFscyA9IChncmlkKSA9PiB7XHJcblx0dmFyIHJlcyA9IE9iamVjdC5hc3NpZ24oe30sIGdyaWQuY2VsbF92YWx1ZXMpO1xyXG5cdGZvcihsZXQgY2hpbGRfbmFtZSBpbiBncmlkLmxpbmtlZF9oYXNoZXMpe1xyXG5cdFx0aWYoY2hpbGRfbmFtZSA9PT0gJy4uJykgY29udGludWU7XHJcblx0XHRsZXQgY2hpbGRfaWQgPSBncmlkLmxpbmtlZF9oYXNoZXNbY2hpbGRfbmFtZV07XHJcblx0XHRsZXQgY2hpbGQgPSBncmlkLmFwcC5nZXRHcmlkKGNoaWxkX2lkKTtcclxuXHRcdHJlc1tjaGlsZF9uYW1lXSA9IGdldF92YWxzKGNoaWxkKTtcclxuXHR9XHJcblx0cmV0dXJuIHJlcztcclxufVxyXG5cclxuRmlyZXJhLnVuZGVmID0gbmV3IGZ1bmN0aW9uKCl7fTtcclxuRmlyZXJhLm5vb3AgPSBuZXcgZnVuY3Rpb24oKXt9O1xyXG5GaXJlcmEuYXBwcyA9IGFwcHM7XHJcbkZpcmVyYS5ydW4gPSBGaXJlcmE7XHJcbkZpcmVyYS5nZXRBcHBTdHJ1Y3QgPSBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gRmlyZXJhLmFwcHMubWFwKGdldF9hcHBfc3RydWN0KTtcclxufVxyXG5GaXJlcmEubG9hZFBhY2thZ2UgPSBmdW5jdGlvbihwYWNrKSB7XHJcblx0cm9vdF9wYWNrYWdlX3Bvb2wubG9hZChwYWNrKTtcclxufVxyXG5GaXJlcmEuam9pbiA9IGZ1bmN0aW9uKC4uLmFyZ3Mpe1xyXG5cdHZhciBqb2luID0gKGEsIGIpID0+IHtcclxuXHRcdGZvcihsZXQgaSBpbiBiKXtcclxuXHRcdFx0YVtpXSA9IGJbaV07XHJcblx0XHR9XHJcblx0fVxyXG5cdHZhciByZXMgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzWzBdKTtcclxuXHRmb3IobGV0IGtleSBpbiBhcmdzKXtcclxuXHRcdHZhciBncmlkID0gYXJnc1trZXldO1xyXG5cdFx0aWYoa2V5ID09PSAwKSBjb250aW51ZTtcclxuXHRcdGZvcihsZXQgayBpbiBncmlkKXtcclxuXHRcdFx0aWYoayA9PT0gJyRwYWNrYWdlcycpe1xyXG5cdFx0XHRcdGluaXRfaWZfZW1wdHkocmVzLCBrLCBbXSk7XHJcblx0XHRcdFx0cmVzLiRwYWNrYWdlcyA9IHJlcy4kcGFja2FnZXMuY29uY2F0KGdyaWRba10pO1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGluaXRfaWZfZW1wdHkocmVzLCBrLCB7fSk7XHJcblx0XHRcdGpvaW4ocmVzW2tdLCBncmlkW2tdKTsgXHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXM7XHJcbn1cclxuXHJcbnZhciBhcnJfY2hhbmdlc190b19jaGlsZF9jaGFuZ2VzID0gZnVuY3Rpb24oaXRlbV9oYXNoLCBhcnJfY2hhbmdlKXtcclxuXHQvL2NvbnNvbGUubG9nKCdiZXlvbmQgdGhlIHJlYWxzIG9mIGRlYXRoJywgaXRlbV9oYXNoLCBhcnJfY2hhbmdlKTtcclxuXHRpZighYXJyX2NoYW5nZSl7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdHJldHVybiBhcnJfY2hhbmdlLm1hcCgodmFsLCBrZXkpID0+IHtcclxuXHRcdHZhciBuZXdfdmFsID0gdmFsLnNsaWNlKCk7XHJcblx0XHRuZXdfdmFsWzNdID0gbmV3X3ZhbFsyXTtcclxuXHRcdG5ld192YWxbMl0gPSBpdGVtX2hhc2g7XHJcblx0XHRyZXR1cm4gbmV3X3ZhbDtcclxuXHR9KTtcclxufVxyXG5cclxudmFyIGdldF9hcnJfY2hhbmdlcyA9ICgpID0+IHtcclxuXHR2YXIgYXJyID0gW107XHJcblx0dmFyIGlkID0gLTE7XHJcblx0dmFyIG1hcCA9IHt9O1xyXG5cdHJldHVybiAobmV3X2FycikgPT4ge1xyXG5cdFx0dmFyIGNoYW5nZXMgPSBbXTtcclxuXHRcdGFycl9kaWZmZXJlbnQobmV3X2FyciwgYXJyLCAoa2V5KSA9PiB7XHJcblx0XHRcdC8vIGNyZWF0ZSBuZXcgZWxlbWVudFxyXG5cdFx0XHRtYXBba2V5XSA9ICsraWQ7XHJcblx0XHRcdGNoYW5nZXMucHVzaChbJ2FkZCcsIGlkLCBuZXdfYXJyW2tleV1dKTtcclxuXHRcdH0pXHJcblx0XHQvL2NvbnNvbGUubG9nKCdDb21wdXRpbmcgY2hhbmdlcyBiZXR3ZWVuIG5ldyBhbiBvbGQgYXJyYXlzJywgbmV3X2FyciwgYXJyKTtcclxuXHRcdGFycl9kaWZmZXJlbnQoYXJyLCBuZXdfYXJyLCAoa2V5KSA9PiB7XHJcblx0XHRcdC8vIGNyZWF0ZSBuZXcgZWxlbWVudFxyXG5cdFx0XHRjaGFuZ2VzLnB1c2goWydyZW1vdmUnLCBtYXBba2V5XV0pO1xyXG5cdFx0XHRkZWxldGUgbWFwW2tleV07XHJcblx0XHR9KVxyXG5cdFx0YXJyX2NvbW1vbihhcnIsIG5ld19hcnIsIChrZXkpID0+IHtcclxuXHRcdFx0Y2hhbmdlcy5wdXNoKFsnY2hhbmdlJywgbWFwW2tleV0sIG5ld19hcnJba2V5XV0pO1xyXG5cdFx0fSlcclxuXHRcdGFyciA9IG5ld19hcnI7XHJcblx0XHRyZXR1cm4gY2hhbmdlcztcclxuXHR9XHJcbn1cclxuXHJcbnZhciBjb3JlID0ge1xyXG5cdGNlbGxNYXRjaGVyczoge1xyXG5cdFx0cHJldlZhbHVlOiB7XHJcblx0XHRcdC8vIF5mb28gLT4gcHJldmlvdXMgdmFsdWVzIG9mICdmb28nXHJcblx0XHRcdG5hbWU6ICdQcmV2VmFsdWUnLFxyXG5cdFx0XHRyZWdleHA6IG5ldyBSZWdFeHAoJ14oXFwtfFxcOik/XFxcXF4oLiopJywgJ2knKSxcclxuXHRcdFx0ZnVuYzogZnVuY3Rpb24obWF0Y2hlcywgcG9vbCwgY29udGV4dCwgcGFja2FnZXMpe1xyXG5cdFx0XHRcdGlmKGNvbnRleHQgPT0gJ3NldHRlcicpIHJldHVybjtcclxuXHRcdFx0XHR2YXIgY2VsbG5hbWUgPSBtYXRjaGVzWzJdO1xyXG5cdFx0XHRcdHBhcnNlX2ZleHByKFsnY2xvc3VyZScsIGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHR2YXIgdmFsO1xyXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnUmV0dXJuaW5nIGNsb3N1cmUgZnVuYyEnKTtcclxuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbihhKXtcclxuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnZ2V0dGluZyBwcmV2IHZhbCcpO1xyXG5cdFx0XHRcdFx0XHR2YXIgb2xkX3ZhbCA9IHZhbDtcclxuXHRcdFx0XHRcdFx0dmFsID0gYTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFtvbGRfdmFsLCBhXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCBjZWxsbmFtZV0sIHBvb2wsICdeJyArIGNlbGxuYW1lLCBwYWNrYWdlcyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cdHByZWRpY2F0ZXM6IHtcclxuXHRcdHRvZ2dsZTogKGZzKSA9PiB7XHJcblx0XHRcdHZhciBbY2VsbCwgZGVmXSA9IGZzO1xyXG5cdFx0XHRyZXR1cm4gWydjbG9zdXJlJywgKCkgPT4ge1xyXG5cdFx0XHRcdHZhciBub3cgPSBkZWYgIT09IHVuZGVmaW5lZCA/IGRlZiA6IHRydWU7XHJcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGNiKXtcclxuXHRcdFx0XHRcdGlmKG5vdyl7XHJcblx0XHRcdFx0XHRcdG5vdyA9IGZhbHNlXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRub3cgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIG5vdztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIGNlbGxdO1xyXG5cdFx0fSxcclxuXHRcdHNraXBJZjogKGZzKSA9PiB7XHJcblx0XHRcdHZhciBbY29tcGFyZV9mdW5jLCBmdW5jLCAuLi5hcmdzXSA9IGZzO1xyXG5cdFx0XHRyZXR1cm4gWydhc3luY0Nsb3N1cmUnLCAoKSA9PiB7XHJcblx0XHRcdFx0dmFyIHByZXYgPSBbXTtcclxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oY2IsIC4uLmlubmVyX2FyZ3Mpe1xyXG5cdFx0XHRcdFx0aWYoY29tcGFyZV9mdW5jKHByZXYsIGlubmVyX2FyZ3MpKXtcclxuXHRcdFx0XHRcdFx0dmFyIHJlcyA9IGZ1bmMuYXBwbHkobnVsbCwgaW5uZXJfYXJncyk7XHJcblx0XHRcdFx0XHRcdHByZXYgPSBpbm5lcl9hcmdzO1xyXG5cdFx0XHRcdFx0XHRjYihyZXMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgLi4uYXJnc107XHJcblx0XHR9LFxyXG5cdFx0dHJhbnNpc3Q6IChmcykgPT4ge1xyXG5cdFx0XHR2YXIgZnVuYztcclxuXHRcdFx0aWYoZnNbMF0gaW5zdGFuY2VvZiBGdW5jdGlvbil7XHJcblx0XHRcdFx0ZnVuYyA9IGZzLnNoaWZ0KCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFsoY2VsbEEsIGNlbGxCKSA9PiB7XHJcblx0XHRcdFx0aWYoY2VsbEEpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmMgPyBmdW5jKGNlbGxCKSA6IGNlbGxCO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gRmlyZXJhLm5vb3A7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XS5jb25jYXQoZnMpO1xyXG5cdFx0fSxcclxuXHRcdHRyYW5zaXN0QWxsOiAoZnMpID0+IHtcclxuXHRcdFx0dmFyIFtmdW5jLCAuLi5yZXN0XSA9IGZzO1xyXG5cdFx0XHRyZXR1cm4gWyhjZWxsQSwgLi4ucmVzdEFyZ3MpID0+IHtcclxuXHRcdFx0XHRpZihjZWxsQSl7XHJcblx0XHRcdFx0XHRyZXR1cm4gZnVuYy5hcHBseShyZXN0QXJncyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJldHVybiBGaXJlcmEubm9vcDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1dLmNvbmNhdChyZXN0KTtcclxuXHRcdH0sXHJcblx0XHQnJiYnOiAoZnMpID0+IHtcclxuXHRcdFx0cmV0dXJuIFsoY2VsbEEsIGNlbGxCKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIGNlbGxBICYmIGNlbGxCO1xyXG5cdFx0XHR9XS5jb25jYXQoZnMpO1xyXG5cdFx0fSxcclxuXHRcdCc9PSc6IChmcykgPT4ge1xyXG5cdFx0XHRyZXR1cm4gWyhjZWxsQSwgY2VsbEIpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gY2VsbEEgPT0gY2VsbEI7XHJcblx0XHRcdH1dLmNvbmNhdChmcyk7XHJcblx0XHR9LFxyXG5cdFx0JyEnOiAoZnMpID0+IHtcclxuXHRcdFx0cmV0dXJuIFsoYSkgPT4gIWFdLmNvbmNhdChmcyk7XHJcblx0XHR9LFxyXG5cdFx0ZXF1YWw6IChmcykgPT4ge1xyXG5cdFx0XHRyZXR1cm4gWyhhLCBiKSA9PiBhID09PSBiXS5jb25jYXQoZnMpO1xyXG5cdFx0fSxcclxuXHRcdGFjY3VtOiAoZnVuY3N0cmluZykgPT4ge1xyXG5cdFx0XHRyZXR1cm4gWydjbG9zdXJlJywgKCkgPT4ge1xyXG5cdFx0XHRcdHZhciBhcnIgPSBbXTtcclxuXHRcdFx0XHRyZXR1cm4gKGEpID0+IHtcclxuXHRcdFx0XHRcdGFyci5wdXNoKGEpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGFycjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIGZ1bmNzdHJpbmdbMF1dO1xyXG5cdFx0fSxcclxuXHRcdGZpcnN0OiBmdW5jdGlvbihmdW5jc3RyaW5nKXtcclxuXHRcdFx0cmV0dXJuIFsoYSkgPT4gYSwgLi4uZnVuY3N0cmluZ11cclxuXHRcdH0sXHJcblx0XHRzZWNvbmQ6IGZ1bmN0aW9uKGZ1bmNzdHJpbmcpe1xyXG5cdFx0XHRyZXR1cm4gWyhhLCBiKSA9PiBiLCAuLi5mdW5jc3RyaW5nXVxyXG5cdFx0fSxcclxuXHRcdGZpcnN0RGVmaW5lZDogZnVuY3Rpb24oZnVuY3N0cmluZyl7XHJcblx0XHRcdHJldHVybiBbZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdGZvcih2YXIgaSBpbiBhcmd1bWVudHMpe1xyXG5cdFx0XHRcdFx0XHRpZihhcmd1bWVudHNbaV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGFyZ3VtZW50c1tpXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0fSwgLi4uZnVuY3N0cmluZ11cclxuXHRcdH0sXHJcblx0XHRmaXJzdFRydWU6IGZ1bmN0aW9uKGZ1bmNzdHJpbmcpe1xyXG5cdFx0XHRyZXR1cm4gW2Z1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdMb29raW5nIGZvciBmaXJzdFRydWUnLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBpIGluIGFyZ3VtZW50cyl7XHJcblx0XHRcdFx0XHRcdGlmKGFyZ3VtZW50c1tpXSkgcmV0dXJuIGFyZ3VtZW50c1tpXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0fSwgLi4uZnVuY3N0cmluZ11cclxuXHRcdH0sXHJcblx0XHR2YWxNYXA6IGZ1bmN0aW9uKGZ1bmNzdHJpbmcpe1xyXG5cdFx0XHR2YXIgdmFsTWFwO1xyXG5cdFx0XHRpZihmdW5jc3RyaW5nWzBdIGluc3RhbmNlb2YgT2JqZWN0ICYmICEoZnVuY3N0cmluZ1swXSBpbnN0YW5jZW9mIEFycmF5KSl7XHJcblx0XHRcdFx0dmFsTWFwID0gZnVuc3RyaW5nLnNoaWZ0KCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gdHJ1ZS9mYWxzZSBieSBkZWZhdWx0XHJcblx0XHRcdFx0dmFsTWFwID0ge307XHJcblx0XHRcdFx0dmFsTWFwW2Z1bmNzdHJpbmdbMF1dID0gdHJ1ZTtcclxuXHRcdFx0XHR2YWxNYXBbZnVuY3N0cmluZ1sxXV0gPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgZnVuYyA9IChjZWxsLCB2YWwpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsTWFwW2NlbGxdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBbJ2Z1bm5lbCcsIGZ1bmMsIC4uLmZ1bmNzdHJpbmddO1xyXG5cdFx0fSxcclxuXHRcdGZpcnN0VHJ1ZUNiOiBmdW5jdGlvbihmdW5jc3RyaW5nKXtcclxuXHRcdFx0dmFyIGNiID0gZnVuY3N0cmluZ1swXTtcclxuXHRcdFx0dmFyIGZuY3N0ciA9IGZ1bmNzdHJpbmcuc2xpY2UoMSk7XHJcblx0XHRcdHJldHVybiBbZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ0xvb2tpbmcgZm9yIGZpcnN0VHJ1ZScsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0XHRmb3IodmFyIGkgaW4gYXJndW1lbnRzKXtcclxuXHRcdFx0XHRcdFx0aWYoY2IoYXJndW1lbnRzW2ldKSkgcmV0dXJuIGFyZ3VtZW50c1tpXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0fSwgLi4uZm5jc3RyXVxyXG5cdFx0fSxcclxuXHRcdGFzQXJyYXk6IGZ1bmN0aW9uKGZ1bmNzdHJpbmcpe1xyXG5cdFx0XHR2YXIgc3Vic2NyaWJlX3RvID0gJyovKic7XHJcblx0XHRcdGlmKGZ1bmNzdHJpbmdbMF0gaW5zdGFuY2VvZiBBcnJheSl7XHJcblx0XHRcdFx0Ly8gaXRzIGFuIGFycmF5IG9mIGZpZWxkc1xyXG5cdFx0XHRcdHZhciBmaWVsZHMgPSBmdW5jc3RyaW5nWzBdLm1hcCgoYSkgPT4gJyovJyArIGEpO1xyXG5cdFx0XHRcdHN1YnNjcmliZV90byA9IFsnZnVubmVsJywgaWRzLCAuLi5maWVsZHNdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBbJ2Nsb3N1cmVGdW5uZWwnLCAoKSA9PiB7XHJcblx0XHRcdFx0XHR2YXIgYXJyID0gW107XHJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdSZXR1cm5pbmcgY2xvc3VyZScpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIChjZWxsLCB2YWx1ZXMpID0+IHtcclxuXHRcdFx0XHRcdFx0aWYoY2VsbCA9PT0gJyRhcnJfZGF0YS5jaGFuZ2VzJyl7XHJcblx0XHRcdFx0XHRcdFx0Zm9yKGxldCBpIGluIHZhbHVlcyl7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgW3R5cGUsIGluZGV4LCBfLCB2YWxdID0gdmFsdWVzW2ldO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYodHlwZSA9PT0gJ2FkZCcpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgYWRkZWRfb2JqID0ge307XHJcblx0XHRcdFx0XHRcdFx0XHRcdGZvcihsZXQgZmllbGRuYW1lIG9mIGZpZWxkcyl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZmllbGRuYW1lID0gZmllbGRuYW1lLnJlcGxhY2UoXCIqL1wiLCBcIlwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhZGRlZF9vYmpbZmllbGRuYW1lXSA9IHZhbFtmaWVsZG5hbWVdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdGFycltpbmRleF0gPSBhZGRlZF9vYmo7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYodHlwZSA9PT0gJ3JlbW92ZScpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWxldGUgYXJyW2luZGV4XTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly9hcnIuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0aWYodmFsdWVzKXtcclxuXHRcdFx0XHRcdFx0XHRcdGxldCBbZmllbGRuYW1lLCB2YWxdID0gdmFsdWVzO1xyXG5cdFx0XHRcdFx0XHRcdFx0ZmllbGRuYW1lID0gZmllbGRuYW1lLnJlcGxhY2UoXCIqL1wiLCBcIlwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKHZhbCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJz8nLCB2YWwsIGFyciwgZmllbGRuYW1lLCBhcnJbdmFsWzBdXSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGFyclt2YWxbMF1dW2ZpZWxkbmFtZV0gPSB2YWxbMV07XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiBhcnJfZml4X2tleXMoYXJyKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0fSwgc3Vic2NyaWJlX3RvLCAnJGFycl9kYXRhLmNoYW5nZXMnXVxyXG5cdFx0fSxcclxuXHRcdGluZGljZXM6IGZ1bmN0aW9uKGZ1bmNzdHJpbmcpe1xyXG5cdFx0XHR2YXIgZnVuYyA9IGZ1bmNzdHJpbmdbMF07XHJcblx0XHRcdHZhciBmaWVsZCA9ICcqLycgKyBmdW5jc3RyaW5nWzFdO1xyXG5cdFx0XHRpZighZnVuY3N0cmluZ1sxXSl7XHJcblx0XHRcdFx0ZmllbGQgPSAnKi8nICsgZnVuYztcclxuXHRcdFx0XHRmdW5jID0gaWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFsnY2xvc3VyZUZ1bm5lbCcsICgpID0+IHtcclxuXHRcdFx0XHR2YXIgaW5kaWNlcyA9IG5ldyBTZXQoKTtcclxuXHRcdFx0XHRyZXR1cm4gKGZpZWxkbmFtZSwgdmwpID0+IHtcclxuXHRcdFx0XHRcdGlmKGZpZWxkID09PSBmaWVsZG5hbWUpe1xyXG5cdFx0XHRcdFx0XHR2YXIgW2luZGV4LCB2YWxdID0gdmw7XHJcblx0XHRcdFx0XHRcdHZhciByZXMgPSBmdW5jKHZhbCk7XHJcblx0XHRcdFx0XHRcdGlmKHJlcyl7XHJcblx0XHRcdFx0XHRcdFx0aW5kaWNlcy5hZGQoaW5kZXgpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGluZGljZXMuZGVsZXRlKGluZGV4KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYoIXZsKSByZXR1cm4gaW5kaWNlcztcclxuXHRcdFx0XHRcdFx0Zm9yKGxldCBbY2hhbmdlX3R5cGUsIGluZGV4XSBvZiB2bCl7XHJcblx0XHRcdFx0XHRcdFx0aWYoY2hhbmdlX3R5cGUgPT09ICdyZW1vdmUnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpbmRpY2VzLmRlbGV0ZShpbmRleCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gaW5kaWNlcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIGZpZWxkLCAnJGFycl9kYXRhLmNoYW5nZXMnXTtcclxuXHRcdH0sXHJcblx0XHRyZWR1Y2U6IGZ1bmN0aW9uKGZ1bmNzdHJpbmcpe1xyXG5cdFx0XHR2YXIgZmllbGQgPSAnKi8nICsgZnVuY3N0cmluZ1swXTtcclxuXHRcdFx0dmFyIGNvbmZpZyA9IGZ1bmNzdHJpbmdbMV07XHJcblx0XHRcdHZhciByZXMgPSBjb25maWcuZGVmO1xyXG5cdFx0XHR2YXIgdmFscyA9IHt9O1xyXG5cdFx0XHRyZXR1cm4gWydjbG9zdXJlRnVubmVsJywgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiAoY2VsbCwgY2huZykgPT4ge1xyXG5cdFx0XHRcdFx0dmFyIGtleSwgdmFsO1xyXG5cdFx0XHRcdFx0aWYoY2VsbCA9PT0gJyRhcnJfZGF0YS5jaGFuZ2VzJyl7XHJcblx0XHRcdFx0XHRcdGlmKGNobmcgaW5zdGFuY2VvZiBBcnJheSl7XHJcblx0XHRcdFx0XHRcdFx0Zm9yKGxldCBpIGluIGNobmcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKCFjaG5nW2ldIGluc3RhbmNlb2YgQXJyYXkpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciB0eXBlID0gY2huZ1tpXVswXTtcclxuXHRcdFx0XHRcdFx0XHRcdGtleSA9IGNobmdbaV1bMV07XHJcblx0XHRcdFx0XHRcdFx0XHR2YWwgPSBjaG5nW2ldWzNdID8gY2huZ1tpXVszXVtmdW5jc3RyaW5nWzBdXSA6IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKHR5cGUgPT09ICdhZGQnKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmVzID0gY29uZmlnLmFkZCh2YWwsIHJlcyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHNba2V5XSA9IHZhbDtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGlmKHR5cGUgPT09ICdyZW1vdmUnKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmVzID0gY29uZmlnLmFkZCh2YWxzW2tleV0sIHJlcyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRlbGV0ZSB2YWxzW2tleV07XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpZihjaG5nKXtcclxuXHRcdFx0XHRcdFx0XHRba2V5LCB2YWxdID0gY2huZztcclxuXHRcdFx0XHRcdFx0XHRyZXMgPSBjb25maWcuY2hhbmdlKHZhbCwgdmFsc1trZXldLCByZXMpO1xyXG5cdFx0XHRcdFx0XHRcdHZhbHNba2V5XSA9IHZhbDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHJlcztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIGZpZWxkLCAnJGFycl9kYXRhLmNoYW5nZXMnXVxyXG5cdFx0fSxcclxuXHRcdGNvdW50OiBmdW5jdGlvbihmdW5jc3RyaW5nKXtcclxuXHRcdFx0dmFyIGZpZWxkbmFtZSA9IGZ1bmNzdHJpbmdbMF07XHJcblx0XHRcdHZhciBwaWVjZXMgPSBmaWVsZG5hbWUuc3BsaXQoJy8nKTtcclxuXHRcdFx0ZmllbGRuYW1lID0gcGllY2VzLnBvcCgpO1xyXG5cdFx0XHR2YXIgcHJlZml4ID0gcGllY2VzLmxlbmd0aCA/IHBpZWNlcy5qb2luKCcvJykgKyAnLycgOiAnJztcclxuXHRcdFx0aWYoZmllbGRuYW1lID09PSAnKicpe1xyXG5cdFx0XHRcdC8vIGp1c3QgY291bnQgYWxsXHJcblx0XHRcdFx0cmV0dXJuIFsgcHJlZml4ICsgJyRhcnJfZGF0YS5sZW5ndGgnXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gWydjbG9zdXJlRnVubmVsJywgKCkgPT4ge1xyXG5cdFx0XHRcdHZhciBjb3VudCA9IDA7XHJcblx0XHRcdFx0dmFyIHZhbHMgPSB7fTtcclxuXHRcdFx0XHRyZXR1cm4gKGNlbGwsIGNobmcpID0+IHtcclxuXHRcdFx0XHRcdGlmKHBhdGhfY2VsbG5hbWUoY2VsbCkgPT0gJyRhcnJfZGF0YS5jaGFuZ2VzJyl7XHJcblx0XHRcdFx0XHRcdC8vIGZpbmRpbmcgZGVsZXRpb25cclxuXHRcdFx0XHRcdFx0Y2huZy5maWx0ZXIoKGEpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYVswXSA9PT0gJ3JlbW92ZSc7XHJcblx0XHRcdFx0XHRcdH0pLmVhY2goKGEpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRpZih2YWxzW2FbMV1dKXtcclxuXHRcdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ1JlbW92aW5nIG9uZScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y291bnQtLTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIHZhbHNbYVsxXV07XHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdHJldHVybiBjb3VudDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKCFjaG5nKSByZXR1cm4gY291bnQ7XHJcblx0XHRcdFx0XHR2YXIgW2tleSwgdmFsXSA9IGNobmc7XHJcblx0XHRcdFx0XHR2YXIgcHJldl92YWwgPSB2YWxzW2tleV07XHJcblx0XHRcdFx0XHRpZihwcmV2X3ZhbCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRcdGlmKHZhbCkgY291bnQrK1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYocHJldl92YWwgIT09IHZhbCl7XHJcblx0XHRcdFx0XHRcdFx0aWYodmFsKXtcclxuXHRcdFx0XHRcdFx0XHRcdGNvdW50KytcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y291bnQtLTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHZhbHNba2V5XSA9IHZhbDtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ05vdyBjb3VudCcsIGNvdW50KTtcclxuXHRcdFx0XHRcdHJldHVybiBjb3VudDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHByZWZpeCArICcqLycgKyBmaWVsZG5hbWUsIHByZWZpeCArICckYXJyX2RhdGEuY2hhbmdlcyddXHJcblx0XHR9LFxyXG5cdFx0am9pbjogZnVuY3Rpb24oZnVuY3N0cmluZyl7XHJcblx0XHRcdHJldHVybiBbJ2Z1bm5lbCcsIHNlY29uZF0uY29uY2F0KGZ1bmNzdHJpbmcpO1xyXG5cdFx0fSxcclxuXHRcdGxpc3Q6IGZ1bmN0aW9uKGZ1bmNzdHJpbmcpe1xyXG5cdFx0XHR2YXIgcHJvcHMgPSBmdW5jc3RyaW5nWzBdO1xyXG5cdFx0XHRpZighcHJvcHMgaW5zdGFuY2VvZiBPYmplY3Qpe1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0xpc3QgcHJvcGVydGllcyBzaG91bGQgYmUgYW4gb2JqZWN0IScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBpdGVtX3R5cGUgPSBwcm9wcy50eXBlO1xyXG5cdFx0XHRpZighcHJvcHMucHVzaCAmJiAhcHJvcHMuZGF0YXNvdXJjZSAmJiAhcHJvcHMuZGVsdGFzICYmICFwcm9wcy5kYXRhICYmICFmdW5jc3RyaW5nWzFdKXtcclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ05vIGl0ZW0gc291cmNlIHByb3ZpZGVkIGZvciBsaXN0JywgZnVuY3N0cmluZyk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnTGlzdCBwcm9wZXJ0aWVzJywgcHJvcHMpO1xyXG5cdFx0XHR2YXIgZGVsdGFzX2Z1bmM7XHJcblx0XHRcdGlmKHByb3BzLnB1c2gpeyBcclxuXHRcdFx0XHRkZWx0YXNfZnVuYyA9IFsnbWFwJywge1xyXG5cdFx0XHRcdFx0JHB1c2g6ICh2YWwpID0+IHtcclxuXHRcdFx0XHRcdFx0aWYodmFsKXtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gW1snYWRkJywgbnVsbCwgdmFsXV07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQkcG9wOiAoa2V5KSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmKGtleSB8fCBrZXkgPT09IDAgfHwga2V5ID09PSAnMCcpe1xyXG5cdFx0XHRcdFx0XHRcdGlmKGtleSBpbnN0YW5jZW9mIEFycmF5IHx8IGtleSBpbnN0YW5jZW9mIFNldCl7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgYXJyID0gW107XHJcblx0XHRcdFx0XHRcdFx0XHRmb3IobGV0IGsgb2Yga2V5KXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YXJyLnB1c2goWydyZW1vdmUnLCBrXSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYXJyO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gW1sncmVtb3ZlJywga2V5XV07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XVxyXG5cdFx0XHR9IGVsc2UgaWYocHJvcHMuZGVsdGFzKSB7XHJcblx0XHRcdFx0ZGVsdGFzX2Z1bmMgPSBbaWQsIHByb3BzLmRlbHRhc107XHJcblx0XHRcdH0gZWxzZSBpZihwcm9wcy5kYXRhKSB7XHJcblx0XHRcdFx0ZGVsdGFzX2Z1bmMgPSBbJ2Nsb3N1cmUnLCBnZXRfYXJyX2NoYW5nZXMsIFsnanVzdCcsIHByb3BzLmRhdGFdXTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWx0YXNfZnVuYyA9IFsnY2xvc3VyZScsIGdldF9hcnJfY2hhbmdlcywgJyRkYXRhc291cmNlJ11cclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgYWxsX2xpc3RzX21peGluID0ge1xyXG5cdFx0XHRcdCRub19hdXRvX3RlbXBsYXRlOiB0cnVlLFxyXG5cdFx0XHRcdCRkZWx0YXM6IGRlbHRhc19mdW5jLFxyXG5cdFx0XHRcdC8qJGluaXQ6IHtcclxuXHRcdFx0XHRcdCR0ZW1wbGF0ZTogXCI8ZGl2Pk9sb2xvPC9kaXY+XCJcclxuXHRcdFx0XHR9LCovXHJcblx0XHRcdFx0JyRhcnJfZGF0YSc6IFtcclxuXHRcdFx0XHRcdCduZXN0ZWRDbG9zdXJlJyxcclxuXHRcdFx0XHRcdCgpID0+IHtcclxuXHRcdFx0XHRcdFx0dmFyIGlkID0gLTE7XHJcblx0XHRcdFx0XHRcdHZhciBsZW5ndGggPSAwO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gKGNiLCBjaGFuZ2VzKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0aWYoIWNoYW5nZXMgfHwgIWNoYW5nZXMubGVuZ3RoKSByZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0dmFyIGNobmdzID0gYXJyX2NoYW5nZXNfdG9fY2hpbGRfY2hhbmdlcyhpdGVtX3R5cGUsIGNoYW5nZXMpO1xyXG5cdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ0dvdCBjaGFuZ2VzOicsIGZyb3plbihjaG5ncyksICdmcm9tJywgY2hhbmdlcyk7XHJcblx0XHRcdFx0XHRcdFx0Y2huZ3MuZm9yRWFjaCgob25lKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRzd2l0Y2gob25lWzBdKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAnYWRkJzpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvbmVbMV0gPSBTdHJpbmcoaWQgPCAxMDAwMDAwID8gKytpZCA6IC0xKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2xlbmd0aDtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgJ3JlbW92ZSc6IFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC0tbGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHRcdGNiKCdjaGFuZ2VzJywgY2huZ3MpO1xyXG5cdFx0XHRcdFx0XHRcdGNiKCdsZW5ndGgnLCBsZW5ndGgpO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdCckZGVsdGFzJ1xyXG5cdFx0XHRcdF0sXHJcblx0XHRcdFx0JGxpc3RfdGVtcGxhdGVfd3JpdGVyOiBbJ25lc3RlZENsb3N1cmUnLCAoKSA9PiB7XHJcblx0XHRcdFx0XHR2YXIgaW5kZXhfYyA9IDM7XHJcblx0XHRcdFx0XHR2YXIgaW5kZXhfbWFwID0ge307XHJcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oY2IsIGRlbHRhcywgJGVsKXtcclxuXHRcdFx0XHRcdFx0aWYoJGVsID09PSBGaXJlcmEudW5kZWYpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0aWYoISRlbCkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRmb3IodmFyIGkgaW4gZGVsdGFzKXtcclxuXHRcdFx0XHRcdFx0XHR2YXIgdHlwZSA9IGRlbHRhc1tpXVswXTtcclxuXHRcdFx0XHRcdFx0XHR2YXIga2V5ID0gZGVsdGFzW2ldWzFdO1xyXG5cdFx0XHRcdFx0XHRcdHN3aXRjaCh0eXBlKXtcclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2FkZCc6XHJcblx0XHRcdFx0XHRcdFx0XHRcdCRlbC5hcHBlbmQoJzxkaXYgZGF0YS1mcj1cIicgKyAoKytpbmRleF9jKSArICdcIiBkYXRhLWZyLW5hbWU9XCInICsga2V5ICsgJ1wiPjwvZGl2PicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpbmRleF9tYXBba2V5XSA9IGluZGV4X2M7XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEkgZG9tdCBrbm93Li4uXHJcblx0XHRcdFx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAncmVtb3ZlJzpcclxuXHRcdFx0XHRcdFx0XHRcdFx0JGVsLmNoaWxkcmVuKCdbZGF0YS1mcj0nICsgaW5kZXhfbWFwW2tleV0gKyAnXScpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Y2IoJ2R1bW15JywgdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdGNiKCdpbmRleF9tYXAnLCBpbmRleF9tYXApO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCAnJGFycl9kYXRhLmNoYW5nZXMnLCAnJHJlYWxfZWwnXSxcclxuXHRcdFx0XHQkaHRtbGJpbmRpbmdzOiBbJ2Nsb3N1cmUnLCAoKSA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKCRlbCwgbWFwKSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmKCEkZWwgfHwgIW1hcCkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHR2YXIgcmVzID0gbWFwLm1hcCgobiwgaSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRfYnlfc2VsZWN0b3IobWFwW2ldLCAkZWwpO1xyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sICckcmVhbF9lbCcsICckbGlzdF90ZW1wbGF0ZV93cml0ZXIuaW5kZXhfbWFwJ10sXHJcblx0XHRcdFx0JGNoaWxkcmVuOiBbJyRhcnJfZGF0YS5jaGFuZ2VzJ11cclxuXHRcdFx0fTtcclxuXHRcdFx0aWYocHJvcHMucHVzaCl7XHJcblx0XHRcdFx0YWxsX2xpc3RzX21peGluLiRwdXNoID0gcHJvcHMucHVzaDtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihwcm9wcy5wb3Ape1xyXG5cdFx0XHRcdGFsbF9saXN0c19taXhpbi4kcG9wID0gcHJvcHMucG9wO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHByb3BzLmRhdGFzb3VyY2Upe1xyXG5cdFx0XHRcdGFsbF9saXN0c19taXhpbi4kZGF0YXNvdXJjZSA9IHByb3BzLmRhdGFzb3VyY2U7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGZuYztcclxuXHRcdFx0dmFyIGxpc3Rfb3duX3R5cGUgPSBPYmplY3QuYXNzaWduKGFsbF9saXN0c19taXhpbiwgcHJvcHMuc2VsZiB8fCB7fSk7XHJcblx0XHRcdGlmKHByb3BzLmNyZWF0ZV9kZXN0cm95KXtcclxuXHRcdFx0XHRmbmMgPSBbKGEpID0+IHsgXHJcblx0XHRcdFx0XHRpZihhKXsgXHJcblx0XHRcdFx0XHRcdHJldHVybiBsaXN0X293bl90eXBlO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sIHByb3BzLmNyZWF0ZV9kZXN0cm95XTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRmbmMgPSBbX0YuYWx3YXlzKGxpc3Rfb3duX3R5cGUpXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZm5jO1xyXG5cdFx0fSxcclxuXHRcdGFycl9kZWx0YXM6IGZ1bmN0aW9uKGZ1bmNzdHJpbmcpe1xyXG5cdFx0XHR2YXIgY2VsbCA9IGZ1bmNzdHJpbmdbMF07XHJcblx0XHRcdHJldHVybiBbJ2Nsb3N1cmUnLCBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdHZhciB2YWwgPSBbXTtcclxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24obmV3X2Fycil7XHJcblx0XHRcdFx0XHR2YXIgZGVsdGFzID0gYXJyX2RlbHRhcyh2YWwsIG5ld19hcnIpO1xyXG5cdFx0XHRcdFx0dmFsID0gbmV3X2FycjtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5pbmZvKCdkZWx0YXMgYXJlJywgZGVsdGFzKTtcclxuXHRcdFx0XHRcdHJldHVybiBkZWx0YXM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBjZWxsXVxyXG5cdFx0fVxyXG5cdH1cclxufSBcclxuXHJcblxyXG52YXIgZ2V0X2J5X3NlbGVjdG9yID0gZnVuY3Rpb24obmFtZSwgJGVsLCBjaGlsZHJlbiA9IGZhbHNlKXtcclxuXHRpZihuYW1lID09PSBudWxsKSByZXR1cm4gbnVsbDtcclxuXHRpZihuYW1lID09PSAnX19yb290JykgcmV0dXJuICQoJ2JvZHknKTtcclxuXHR2YXIgbWV0aG9kID0gY2hpbGRyZW4gPyAnY2hpbGRyZW4nIDogJ2ZpbmQnO1xyXG5cdHZhciByZXMgPSAkZWwgXHJcblx0XHRcdD8gJGVsW21ldGhvZF0oJ1tkYXRhLWZyPScgKyBuYW1lICsgJ10nKVxyXG5cdFx0XHQ6IG51bGw7XHJcblx0Ly9jb25zb2xlLmluZm8oXCJHQlNcIiwgJ1tkYXRhLWZyPScgKyBuYW1lICsgJ10nLCByZXMgPyByZXMubGVuZ3RoIDogbnVsbCwgJGVsID8gJGVsLmh0bWwoKSA6ICcnKTtcclxuXHRyZXR1cm4gcmVzOycnXHJcbn1cclxudmFyIHNlYXJjaF9mcl9iaW5kaW5ncyA9IGZ1bmN0aW9uKCRlbCl7XHJcblx0dmFyIHJlcyA9IHt9O1xyXG5cdGlmKCFpc19kZWYoJGVsKSkgcmV0dXJuIHJlcztcclxuXHQkZWwuZmluZCgnW2RhdGEtZnJdJykuZWFjaChmdW5jdGlvbigpe1xyXG5cdFx0dmFyIG5hbWUgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtZnItbmFtZScpO1xyXG5cdFx0aWYoIW5hbWUpe1xyXG5cdFx0XHRuYW1lID0gJCh0aGlzKS5hdHRyKCdkYXRhLWZyJyk7XHJcblx0XHR9XHJcblx0XHRyZXNbbmFtZV0gPSAkKHRoaXMpO1xyXG5cdH0pXHJcblx0cmV0dXJuIHJlcztcclxufVxyXG5cclxudmFyIHdyaXRlX2NoYW5nZXMgPSBmdW5jdGlvbigpe1xyXG5cdHZhciBwb29sID0ge307XHJcblx0cmV0dXJuIChjZWxsLCB2YWwpID0+IHtcclxuXHRcdGlmKGNlbGwgPT09ICcqJyl7XHJcblx0XHRcdHBvb2xbdmFsWzBdXSA9IHZhbFsxXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIGh0bWxiaW5kaW5ncywgb2J2aW91c2x5XHJcblx0XHRcdGZvcihsZXQgaSBpbiBwb29sKXtcclxuXHRcdFx0XHRpZih2YWwgJiYgdmFsW2ldKXtcclxuXHRcdFx0XHRcdHZhbFtpXS5odG1sKHBvb2xbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxudmFyIHNpbXBsZUh0bWxUZW1wbGF0ZXMgPSB7XHJcblx0ZWFjaEhhc2hNaXhpbjoge1xyXG5cdFx0JGVsOiBbJ2Nsb3N1cmUnLCAoKSA9PiB7XHJcblx0XHRcdHZhciBwcmV2X2VsO1xyXG5cdFx0XHRyZXR1cm4gKG5hbWUsIG1hcCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiBtYXAgPyBtYXBbbmFtZV0gOiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHR9LCAnJG5hbWUnLCAnLi4vJGh0bWxiaW5kaW5ncyddLFxyXG5cdFx0JyRyZWFsX2VsJzogWydmaXJzdERlZmluZWQnLCAnJGVsJ10sXHJcblx0XHQnJGh0bWxfdGVtcGxhdGUnOiBbXHJcblx0XHRcdCdza2lwSWYnLFxyXG5cdFx0XHQoWyRwcmV2X2VsXSwgWyRlbF0pID0+IHtcclxuXHRcdFx0XHRpZihpc19kZWYoJHByZXZfZWwpICYmIGlzX2RlZigkZWwpICYmICRwcmV2X2VsWzBdICYmICRlbFswXSAmJiAkcHJldl9lbFswXSA9PT0gJGVsWzBdKXtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRmdW5jdGlvbigkZWwpe1xyXG5cdFx0XHRcdHZhciBzdHIgPSAnJztcclxuXHRcdFx0XHRpZihpc19kZWYoJGVsKSl7XHJcblx0XHRcdFx0XHRzdHIgPSAkZWwuaHRtbCgpO1xyXG5cdFx0XHRcdFx0aWYoc3RyKSBzdHIgPSBzdHIudHJpbSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gc3RyO1xyXG5cdFx0XHR9LCBcclxuXHRcdFx0JyRyZWFsX2VsJ1xyXG5cdFx0XSxcclxuXHRcdCckdGVtcGxhdGVfd3JpdGVyJzogW1xyXG5cdFx0XHRmdW5jdGlvbihyZWFsX3RlbXBsLCAkaHRtbF90ZW1wbGF0ZSwgbm9fYXV0bywga2V5cywgJGVsKXtcclxuXHRcdFx0XHRpZihpc19kZWYocmVhbF90ZW1wbCkgJiYgaXNfZGVmKCRlbCkpe1xyXG5cdFx0XHRcdFx0XHQkZWwuaHRtbChyZWFsX3RlbXBsKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVx0XHJcblx0XHRcdFx0aWYoISRodG1sX3RlbXBsYXRlICYmIGlzX2RlZigkZWwpICYmIGtleXMgJiYgIW5vX2F1dG8pe1xyXG5cdFx0XHRcdFx0dmFyIGF1dG9fdGVtcGxhdGUgPSBrZXlzLm1hcCgoaykgPT4ge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gJzxkaXY+JyArIGsgKyAnOjxkaXYgZGF0YS1mcj1cIicgKyBrICsgJ1wiPjwvZGl2PjwvZGl2Pic7XHJcblx0XHRcdFx0XHR9KS5qb2luKCcgJyk7XHJcblx0XHRcdFx0XHQkZWwuaHRtbChhdXRvX3RlbXBsYXRlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sICckdGVtcGxhdGUnLCAnJGh0bWxfdGVtcGxhdGUnLCAnJG5vX2F1dG9fdGVtcGxhdGUnLCAnLSRyZWFsX2tleXMnLCAnLSRyZWFsX2VsJ1xyXG5cdFx0XSxcclxuXHRcdCckaHRtbF9za2VsZXRvbl9jaGFuZ2VzJzogW2lkLCAnJHRlbXBsYXRlX3dyaXRlciddLFxyXG5cdFx0JyRodG1sYmluZGluZ3MnOiBbc2VhcmNoX2ZyX2JpbmRpbmdzLCAnLSRyZWFsX2VsJywgJyR0ZW1wbGF0ZV93cml0ZXInXSxcclxuXHRcdCckd3JpdGVyJzogWydjbG9zdXJlRnVubmVsJywgd3JpdGVfY2hhbmdlcywgJyRodG1sYmluZGluZ3MnLCAnKiddXHJcblx0fVxyXG59XHJcbnZhciBodG1sUGlwZUFzcGVjdHMgPSB7XHJcblx0YXR0cjogKGVsLCBhdHRyKSA9PiB7XHJcblx0XHRpZighZWwpIHJldHVybjtcclxuXHRcdHJldHVybiAkKGVsKS5hdHRyKGF0dHIpO1xyXG5cdH1cclxufVxyXG52YXIgZmlsdGVyX2F0dHJfaW5fcGF0aCA9IChlKSA9PiB7XHJcblx0cmV0dXJuIHRydWU7XHJcbn1cclxudmFyIGZpbHRlcl9hdHRyX2luX3BhcmVudHMgPSAocGFyZW50X25vZGUsIGluZGV4LCBlbCkgPT4ge1xyXG5cdGZvcig7Oyl7XHJcblx0XHRlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XHJcblx0XHRpZighZWwpIHJldHVybiB0cnVlO1xyXG5cdFx0aWYoZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZyJykpe1xyXG5cdFx0XHRyZXR1cm4gZWwgPT09IHBhcmVudF9ub2RlO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxudmFyIGh0bWxDZWxscyA9IHtcclxuXHRjZWxsTWF0Y2hlcnM6IHtcclxuXHRcdEhUTUxBc3BlY3RzOiB7XHJcblx0XHRcdC8vIF5mb28gLT4gcHJldmlvdXMgdmFsdWVzIG9mICdmb28nXHJcblx0XHRcdG5hbWU6ICdIVE1MQXNwZWN0cycsXHJcblx0XHRcdHJlZ2V4cDogbmV3IFJlZ0V4cCgnXihcXC18XFw6KT8oW15cXHxdKik/XFxcXHwoLiopJywgJ2knKSxcclxuXHRcdFx0ZnVuYzogZnVuY3Rpb24obWF0Y2hlcywgcG9vbCwgY29udGV4dCwgcGFja2FnZXMpe1xyXG5cdFx0XHRcdHZhciBnZXRfcGFyYW1zID0gKGFzcGVjdCkgPT4ge1xyXG5cdFx0XHRcdFx0dmFyIHBhcmFtcyA9IGFzcGVjdC5tYXRjaCgvKFteXFwoXSopXFwoKFteXFwpXSopXFwpLyk7XHJcblx0XHRcdFx0XHRpZihwYXJhbXMgJiYgcGFyYW1zWzFdKXtcclxuXHRcdFx0XHRcdFx0YXNwZWN0ID0gcGFyYW1zWzFdO1xyXG5cdFx0XHRcdFx0XHRwYXJhbXMgPSBwYXJhbXNbMl0uc3BsaXQoJywnKTtcclxuXHRcdFx0XHRcdH0gIFxyXG5cdFx0XHRcdFx0cmV0dXJuIFthc3BlY3QsIHBhcmFtcyB8fCBbXV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHZhciBjZWxsbmFtZSA9IG1hdGNoZXNbMF07XHJcblx0XHRcdFx0dmFyIGFzcGVjdHMgPSBtYXRjaGVzWzNdLnNwbGl0KCd8Jyk7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnR290IGZvbGxvd2luZyBhc3BlY3RzJywgYXNwZWN0cyk7XHJcblx0XHRcdFx0dmFyIGFzcGVjdCA9IGFzcGVjdHNbMF07XHJcblx0XHRcdFx0dmFyIHBpcGUgPSBhc3BlY3RzLnNsaWNlKDEpO1xyXG5cdFx0XHRcdGlmKHBpcGUubGVuZ3RoKXtcclxuXHRcdFx0XHRcdHBpcGUgPSBwaXBlLm1hcChnZXRfcGFyYW1zKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0dmFyIG1ha2VfcmVzcCA9ICFwaXBlLmxlbmd0aCA/IChjYiwgdmFsKSA9PiB7IFxyXG5cdFx0XHRcdFx0cmV0dXJuIGNiKHZhbCk7XHJcblx0XHRcdFx0fSA6IGZ1bmN0aW9uKGNiLCBlKXtcclxuXHRcdFx0XHRcdHZhciByZXMgPSBlLnRhcmdldDtcclxuXHRcdFx0XHRcdGZvcihjb25zdCBbYXNwLCBwYXJzXSBvZiBwaXBlKXtcclxuXHRcdFx0XHRcdFx0aWYoIWh0bWxQaXBlQXNwZWN0c1thc3BdKXtcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdVbmtub3duIHBpcGUgYXNwZWN0OicsIGFzcCk7XHJcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmVzID0gaHRtbFBpcGVBc3BlY3RzW2FzcF0ocmVzLCAuLi5wYXJzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiBjYihyZXMpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIgc2VsZWN0b3IgPSBtYXRjaGVzWzJdO1xyXG5cdFx0XHRcdHZhciBmdW5jLCBwYXJhbXM7XHJcblx0XHRcdFx0dmFyIHNldHRlcnMgPSBuZXcgU2V0KFsndmlzaWJpbGl0eScsICdkaXNwbGF5JywgJ3NldHZhbCcsICdoYXNDbGFzcycsICdjc3MnXSk7XHJcbiAgICAgICAgICAgICAgICBbYXNwZWN0LCBwYXJhbXNdID0gZ2V0X3BhcmFtcyhhc3BlY3QpO1xyXG5cdFx0XHRcdC8vY29uc29sZS5pbmZvKCdBc3BlY3Q6JywgYXNwZWN0LCBjb250ZXh0LCBwYXJhbXMsIG1hdGNoZXNbMl0pO1xyXG5cdFx0XHRcdC8vaWYoY29udGV4dCA9PT0gbnVsbCAmJiBzZXR0ZXJzLmhhcyhhc3BlY3QpKSBjb250ZXh0ID0gJ3NldHRlcic7XHJcblx0XHRcdFx0aWYoXHJcblx0XHRcdFx0XHQoY29udGV4dCA9PT0gJ3NldHRlcicgJiYgIXNldHRlcnMuaGFzKGFzcGVjdCkpXHJcblx0XHRcdFx0XHR8fFxyXG5cdFx0XHRcdFx0KGNvbnRleHQgIT09ICdzZXR0ZXInICYmIHNldHRlcnMuaGFzKGFzcGVjdCkpXHJcblx0XHRcdFx0KXtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3dpdGNoKGFzcGVjdCl7XHJcblx0XHRcdFx0XHRjYXNlICdnZXR2YWwnOlxyXG5cdFx0XHRcdFx0XHRmdW5jID0gZnVuY3Rpb24oY2IsIHZhbHMpe1xyXG5cdFx0XHRcdFx0XHRcdHZhciBvbmNoID0gKGVsKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgdHlwZSA9IGVsLmF0dHIoJ3R5cGUnKTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciB2YWw7XHJcblx0XHRcdFx0XHRcdFx0XHRpZih0eXBlID09ICdjaGVja2JveCcpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWwgPSBlbC5wcm9wKCdjaGVja2VkJyk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWwgPSBlbC52YWwoKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ0NIYW5nZScsIGVsLCB2YWwsIHNlbGVjdG9yKTtcclxuXHRcdFx0XHRcdFx0XHRcdG1ha2VfcmVzcChjYiwgdmFsKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0dmFyIG9uQ2hhbmdlID0gZnVuY3Rpb24oZSl7XHJcblx0XHRcdFx0XHRcdFx0XHRpZighZmlsdGVyX2F0dHJfaW5fcGF0aChlKSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdG9uY2goJCh0aGlzKSk7XHJcblx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgb25LZXl1cCA9IGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoIWZpbHRlcl9hdHRyX2luX3BhdGgoZSkpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgZWwgPSAkKHRoaXMpO1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHR5cGUgPSBlbC5hdHRyKCd0eXBlJyk7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgdmFsO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYodHlwZSA9PSAnY2hlY2tib3gnKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsID0gZWwudmFsKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRtYWtlX3Jlc3AoY2IsIHZhbCk7XHJcblx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgWyRwcmV2X2VsLCAkbm93X2VsXSA9IHZhbHM7XHJcblx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnQXNzaWduaW5nIGhhbmRsZXJzIGZvciAnLCBjZWxsbmFtZSwgYXJndW1lbnRzLCAkbm93X2VsLmZpbmQoc2VsZWN0b3IpKTtcclxuXHRcdFx0XHRcdFx0XHRpZihpc19kZWYoJHByZXZfZWwpKXtcclxuXHRcdFx0XHRcdFx0XHRcdCRwcmV2X2VsLm9mZigna2V5dXAnLCBzZWxlY3Rvcik7XHJcblx0XHRcdFx0XHRcdFx0XHQkcHJldl9lbC5vZmYoJ2NoYW5nZScsIHNlbGVjdG9yKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0aWYoaXNfZGVmKCRub3dfZWwpKXtcclxuXHRcdFx0XHRcdFx0XHRcdCRub3dfZWwub24oe2tleXVwOiBvbktleXVwLCBjaGFuZ2U6IG9uQ2hhbmdlfSwgc2VsZWN0b3IpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICdjbGljayc6XHJcblx0XHRcdFx0XHRcdGlmKHNlbGVjdG9yID09PSAnb3RoZXInKXtcclxuXHRcdFx0XHRcdFx0XHRmdW5jID0gZnVuY3Rpb24oY2IsIHZhbHMpe1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoIXZhbHMpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBbJHByZXZfZWwsICRub3dfZWxdID0gdmFscztcclxuXHRcdFx0XHRcdFx0XHRcdGlmKCEkbm93X2VsKSByZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0XHRpZigkbm93X2VsID09PSBGaXJlcmEudW5kZWYpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRcdCQoZG9jdW1lbnQpLmNsaWNrKGZ1bmN0aW9uKGUsIG9yaWdpbmFsVGFyZ2V0KXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGlzX290aGVyID0gISQuY29udGFpbnMoJG5vd19lbC5nZXQoKVswXSwgb3JpZ2luYWxUYXJnZXQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZihpc19vdGhlcil7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bWFrZV9yZXNwKGNiLCB0cnVlKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0ZnVuYyA9IGZ1bmN0aW9uKGNiLCB2YWxzKXtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKCF2YWxzKSByZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgWyRwcmV2X2VsLCAkbm93X2VsXSA9IHZhbHM7XHJcblx0XHRcdFx0XHRcdFx0XHRpZighJG5vd19lbCkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoJG5vd19lbCA9PT0gRmlyZXJhLnVuZGVmKSByZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdBc3NpZ25pbmcgaGFuZGxlcnMgZm9yICcsIGNlbGxuYW1lLCBhcmd1bWVudHMsICRub3dfZWwpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoJHByZXZfZWwgJiYgJHByZXZfZWwgIT09IEZpcmVyYS51bmRlZil7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCRwcmV2X2VsLm9mZignY2xpY2snLCBzZWxlY3Rvcik7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRpZigkbm93X2VsLmxlbmd0aCA9PT0gMCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignQXNzaWduaW5nIGhhbmRsZXJzIHRvIG5vdGhpbmcnLCAkbm93X2VsKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdCRub3dfZWwub24oJ2NsaWNrJywgc2VsZWN0b3IsIChlKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmKCFmaWx0ZXJfYXR0cl9pbl9wYXRoKGUpKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0bWFrZV9yZXNwKGNiLCBlKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC50YXJnZXQpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCQoZG9jdW1lbnQpLnRyaWdnZXIoJ2NsaWNrJywgZS5vcmlnaW5hbEV2ZW50LnRhcmdldCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ2ZvY3VzJzpcclxuXHRcdFx0XHRcdFx0ZnVuYyA9IGZ1bmN0aW9uKGNiLCB2YWxzKXtcclxuXHRcdFx0XHRcdFx0XHRpZighdmFscykgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBbJHByZXZfZWwsICRub3dfZWxdID0gdmFscztcclxuXHRcdFx0XHRcdFx0XHRpZighJG5vd19lbCkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdGlmKCRwcmV2X2VsKXtcclxuXHRcdFx0XHRcdFx0XHRcdCRwcmV2X2VsLm9mZignZm9jdXMnLCBzZWxlY3Rvcik7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmKCRub3dfZWwubGVuZ3RoID09PSAwKXtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdBc3NpZ25pbmcgaGFuZGxlcnMgdG8gbm90aGluZycsICRub3dfZWwpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQkbm93X2VsLm9uKCdmb2N1cycsIHNlbGVjdG9yLCAoZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoIWZpbHRlcl9hdHRyX2luX3BhdGgoZSkpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRtYWtlX3Jlc3AoY2IsIGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ3ByZXNzJzpcclxuXHRcdFx0XHRcdFx0ZnVuYyA9IGZ1bmN0aW9uKGNiLCB2YWxzKXtcclxuXHRcdFx0XHRcdFx0XHR2YXIgWyRwcmV2X2VsLCAkbm93X2VsXSA9IHZhbHM7XHJcblx0XHRcdFx0XHRcdFx0aWYoISRub3dfZWwpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdBc3NpZ25pbmcgaGFuZGxlcnMgZm9yICcsIGNlbGxuYW1lLCBhcmd1bWVudHMsICRub3dfZWwpO1xyXG5cdFx0XHRcdFx0XHRcdGlmKCRwcmV2X2VsKXtcclxuXHRcdFx0XHRcdFx0XHRcdCRwcmV2X2VsLm9mZigna2V5dXAnLCBzZWxlY3Rvcik7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdCRub3dfZWwub24oJ2tleXVwJywgc2VsZWN0b3IsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoIWZpbHRlcl9hdHRyX2luX3BhdGgoZSkpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgYnRuX21hcCA9IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JzEzJzogJ0VudGVyJyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0JzI3JzogJ0VzYycsXHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRpZihwYXJhbXMuaW5kZXhPZihidG5fbWFwW2Uua2V5Q29kZV0pICE9PSAtMSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG1ha2VfcmVzcChjYiwgZSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnaGFzQ2xhc3MnOlxyXG5cdFx0XHRcdFx0XHRmdW5jID0gZnVuY3Rpb24oJGVsLCB2YWwpe1xyXG5cdFx0XHRcdFx0XHRcdGlmKCFpc19kZWYoJGVsKSkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdGlmKCFpc19kZWYodmFsKSl7XHJcblx0XHRcdFx0XHRcdFx0XHR2YWwgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0dmFyIFtjbGFzc25hbWVdID0gcGFyYW1zO1xyXG5cdFx0XHRcdFx0XHRcdCRlbC50b2dnbGVDbGFzcyhjbGFzc25hbWUsIHZhbCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnZW50ZXJUZXh0JzpcclxuXHRcdFx0XHRcdFx0ZnVuYyA9IGZ1bmN0aW9uKGNiLCB2YWxzKXtcclxuXHRcdFx0XHRcdFx0XHR2YXIgWyRwcmV2X2VsLCAkbm93X2VsXSA9IHZhbHM7XHJcblx0XHRcdFx0XHRcdFx0aWYoISRub3dfZWwpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRpZigkcHJldl9lbCl7XHJcblx0XHRcdFx0XHRcdFx0XHQkcHJldl9lbC5vZmYoJ2tleXVwJywgc2VsZWN0b3IpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQvLyRub3dfZWwub24oJ2tleXVwJywgc2VsZWN0b3IsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdFx0XHRcdC8vfSk7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGVsID0gJG5vd19lbFswXTtcclxuXHRcdFx0XHRcdFx0XHRlbC5vbmtleXVwID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoZS50YXJnZXQgPT09ICRub3dfZWwuZmluZChzZWxlY3RvcilbMF0pe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZighZmlsdGVyX2F0dHJfaW5fcGF0aChlKSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmKGUua2V5Q29kZSA9PSAxMyl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bWFrZV9yZXNwKGNiLCBlLnRhcmdldC52YWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ3Zpc2liaWxpdHknOlxyXG5cdFx0XHRcdFx0XHRmdW5jID0gZnVuY3Rpb24oJGVsLCB2YWwpe1xyXG5cdFx0XHRcdFx0XHRcdGlmKCEkZWwpe1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZih2YWwgPT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmKHZhbCl7XHJcblx0XHRcdFx0XHRcdFx0XHQkZWwuY3NzKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0JGVsLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnY3NzJzpcclxuXHRcdFx0XHRcdFx0dmFyIFtwcm9wZXJ0eV0gPSBwYXJhbXM7XHJcblx0XHRcdFx0XHRcdGZ1bmMgPSBmdW5jdGlvbigkZWwsIHZhbCl7XHJcblx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncnVubmluZyBjc3Mgc2V0dGVyJywgJGVsKTtcclxuXHRcdFx0XHRcdFx0XHQkZWwuY3NzKHByb3BlcnR5LCB2YWwpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ2Rpc3BsYXknOlxyXG5cdFx0XHRcdFx0XHRmdW5jID0gZnVuY3Rpb24oJGVsLCB2YWwpe1xyXG5cdFx0XHRcdFx0XHRcdGlmKCEkZWwgfHwgdmFsID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZih2YWwpe1xyXG5cdFx0XHRcdFx0XHRcdFx0JGVsLmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkZWwuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnc2V0dmFsJzpcclxuXHRcdFx0XHRcdFx0ZnVuYyA9IGZ1bmN0aW9uKCRlbCwgdmFsKXtcclxuXHRcdFx0XHRcdFx0XHQkZWwudmFsKHZhbCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCd1bmtub3duIEhUTUwgYXNwZWN0OiAnICsgYXNwZWN0KTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihjb250ZXh0ID09PSAnc2V0dGVyJyl7XHJcblx0XHRcdFx0XHRwYXJzZV9mZXhwcihbZnVuYywgWyhhKSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmKCFpc19kZWYoYSkpIHJldHVybiAkKCk7XHJcblx0XHRcdFx0XHRcdGlmKCFzZWxlY3RvcikgcmV0dXJuIGE7XHJcblx0XHRcdFx0XHRcdGlmKHNlbGVjdG9yID09PSAnb3RoZXInKSByZXR1cm4gYTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGEuZmluZChzZWxlY3RvcilcclxuXHRcdFx0XHRcdFx0XHRcdC5maWx0ZXIoZmlsdGVyX2F0dHJfaW5fcGFyZW50cy5iaW5kKG51bGwsIGEuZ2V0KClbMF0pKTtcclxuXHRcdFx0XHRcdH0sICctJHJlYWxfZWwnLCAnJGh0bWxfc2tlbGV0b25fY2hhbmdlcyddLCBjZWxsbmFtZV0sIHBvb2wsIGdldF9yYW5kb21fbmFtZSgpLCBwYWNrYWdlcyk7XHJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdPTE9MTzInLCBPYmplY3Qua2V5cyhwb29sLmNlbGxfdHlwZXMuJHJlYWxfZWwuY2hpbGRyZW4pLCBwYWNrYWdlcyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHBhcnNlX2ZleHByKFsnYXN5bmNDbG9zdXJlJywgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHR2YXIgZWw7XHJcblx0XHRcdFx0XHRcdHJldHVybiAoY2IsIHZhbCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGZ1bmMoY2IsIFtlbCwgdmFsXSk7XHJcblx0XHRcdFx0XHRcdFx0ZWwgPSB2YWw7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sICctJHJlYWxfZWwnLCAnJGh0bWxfc2tlbGV0b25fY2hhbmdlcyddLCBwb29sLCBjZWxsbmFtZSwgcGFja2FnZXMpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuRmlyZXJhLk96ZW5mYW50ID0gT3plbmZhbnQ7XHJcblxyXG52YXIgZ2V0X296ZW5mYW50X3RlbXBsYXRlID0gKHN0ciwgY29udGV4dCkgPT4ge1xyXG5cdGlmKHN0cil7XHJcblx0XHR2YXIgdGVtcGxhdGUgPSBuZXcgT3plbmZhbnQoc3RyKTtcclxuXHRcdHZhciBmaWx0ZXJlZF9jb250ZXh0ID0ge307XHJcblx0XHRmb3IobGV0IGsgaW4gY29udGV4dCl7XHJcblx0XHRcdGlmKGNvbnRleHRba10gaW5zdGFuY2VvZiBPYmplY3Qpe1xyXG5cdFx0XHRcdC8vIGRvbnQgd3JpdGUgb2JqZWN0cyB0byBodG1sIVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZpbHRlcmVkX2NvbnRleHRba10gPSBjb250ZXh0W2tdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvL3RlbXBsYXRlLnN0YXRlID0gZmlsdGVyZWRfY29udGV4dDtcclxuXHRcdHJldHVybiB0ZW1wbGF0ZTtcclxuXHR9XHJcbn1cclxuXHJcbnZhciBnZXRfZmllbGRzX21hcCA9IGZ1bmN0aW9uKCl7XHJcblx0dmFyIG1hcCA9IHt9O1xyXG5cdHJldHVybiAoW2tleSwgdmFsXSkgPT4ge1xyXG5cdFx0bWFwW2tleV0gPSB2YWw7XHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH1cclxufSBcclxuXHJcbnZhciB3cml0ZV9vemVuZmFudF9jaGFuZ2VzID0gZnVuY3Rpb24oY2hhbmdlLCB0ZW1wbGF0ZSl7XHJcblx0aWYoIXRlbXBsYXRlKSByZXR1cm47XHJcblx0dmFyIFtrLCB2XSA9IGNoYW5nZTtcclxuXHRpZih1bnVzdWFsX2NlbGwoaykpIHJldHVybjtcclxuXHRpZih2IGluc3RhbmNlb2YgT2JqZWN0KXtcclxuXHRcdC8vIGxvbCBkb250IHdyaXRlIG9iamVjdHMgdG8gaHRtbCFcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0dGVtcGxhdGUuc2V0KC4uLmNoYW5nZSk7XHJcbn1cclxuXHJcbnZhciBjb2xsZWN0X21hcCA9ICgpID0+IHtcclxuXHR2YXIgbWFwID0ge307XHJcblx0cmV0dXJuIChba2V5LCB2YWxdKSA9PiB7XHJcblx0XHRtYXBba2V5XSA9IHZhbDtcclxuXHRcdHJldHVybiBtYXA7XHJcblx0fSBcclxufVxyXG5cclxudmFyIFRyZWUgPSBmdW5jdGlvbigpe1xyXG5cdHRoaXMudGVtcGxhdGVfaGFzaCA9IHt9O1xyXG5cdHRoaXMudGVtcGxhdGVfdHJlZSA9IHt9O1xyXG5cdHRoaXMuYmluZGluZ3MgPSB7fTtcclxuXHR0aGlzLm9uVXBkYXRlQmluZGluZ3NDYnMgPSB7fTtcclxufVxyXG5cclxuVHJlZS5wcm90b3R5cGUuZ2V0SFRNTCA9IGZ1bmN0aW9uKHBhdGgsIG5vZGUpe1xyXG5cdGlmKCFub2RlKSByZXR1cm47XHJcblx0aWYobm9kZSBpbnN0YW5jZW9mIE96ZW5mYW50KXtcclxuXHRcdC8vIGl0cyBmaW5hbCB0ZW1wbGF0ZVxyXG5cdFx0cmV0dXJuIHRoaXMudGVtcGxhdGVfaGFzaFtwYXRoXS5nZXRIVE1MKCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHZhciB0ZW1wbGF0ZTtcclxuXHRcdGlmKHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZV9oYXNoW3BhdGhdKXtcclxuXHRcdFx0Ly8gaXRzIG9iamVjdFxyXG5cdFx0XHRmb3IobGV0IGtleSBpbiBub2RlKXtcclxuXHRcdFx0XHR2YXIgbmV3X3BhdGggPSBwYXRoID09ICcvJyA/IHBhdGggKyBrZXkgOiBwYXRoICsgJy8nICsga2V5O1xyXG5cdFx0XHRcdHRlbXBsYXRlLnNldChrZXksIHRoaXMuZ2V0SFRNTChuZXdfcGF0aCwgbm9kZVtrZXldKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRlbXBsYXRlLmdldEhUTUwoKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIGl0cyBhcnJheVxyXG5cdFx0XHR2YXIgcmVzID0gW107XHJcblx0XHRcdGZvcihsZXQga2V5IGluIG5vZGUpe1xyXG5cdFx0XHRcdHZhciBuZXdfcGF0aCA9IHBhdGggPT0gJy8nID8gcGF0aCArIGtleSA6IHBhdGggKyAnLycgKyBrZXk7XHJcblx0XHRcdFx0cmVzLnB1c2goJzxkaXYgZGF0YS1mcj1cIicgKyBrZXkgKyAnXCIgZGF0YS1mci1uYW1lPVwiJyArIGtleSArICdcIj4nXHJcblx0XHRcdFx0XHRcdCsgdGhpcy5nZXRIVE1MKG5ld19wYXRoLCBub2RlW2tleV0pXHJcblx0XHRcdFx0XHRcdCsgJzwvZGl2PidcclxuXHRcdFx0XHRcdFx0KVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXMuam9pbignICcpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuVHJlZS5wcm90b3R5cGUub25VcGRhdGVCaW5kaW5nID0gZnVuY3Rpb24ocGF0aCwgY2Ipe1xyXG5cdHRoaXMub25VcGRhdGVCaW5kaW5nc0Nic1twYXRoXSA9IGNiO1xyXG59XHJcblxyXG5UcmVlLnByb3RvdHlwZS51cGRhdGVCaW5kaW5ncyA9IGZ1bmN0aW9uKHBhdGgsIHN0cnVjdCwgZWwgPSBmYWxzZSl7XHJcblx0dmFyIHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZV9oYXNoW3BhdGhdO1xyXG5cdGlmKGVsKXtcclxuXHRcdHRoaXMuYmluZGluZ3NbcGF0aF0gPSBlbDtcclxuXHR9XHJcblx0aWYoIXRlbXBsYXRlKXtcclxuXHRcdC8vIGl0cyBsaXN0XHJcblx0XHRmb3IodmFyIGNoaWxkIG9mIGVsLmNoaWxkcmVuKXtcclxuXHRcdFx0dmFyIG51bSA9IGNoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS1mci1uYW1lJyk7XHJcblx0XHRcdGlmKHN0cnVjdFtudW1dKXtcclxuXHRcdFx0XHR2YXIgbmV3X3BhdGggPSBwYXRoID09ICcvJyA/IHBhdGggKyBudW0gOiBwYXRoICsgJy8nICsgbnVtO1xyXG5cdFx0XHRcdHRoaXMudXBkYXRlQmluZGluZ3MobmV3X3BhdGgsIHN0cnVjdFtudW1dLCBjaGlsZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0aWYoZWwpe1xyXG5cdFx0dGVtcGxhdGUuc2V0Um9vdChlbCk7XHJcblx0fVxyXG5cdHRlbXBsYXRlLnVwZGF0ZUJpbmRpbmdzKCk7XHJcblx0aWYodGhpcy5vblVwZGF0ZUJpbmRpbmdzQ2JzW3BhdGhdKXtcclxuXHRcdHRoaXMub25VcGRhdGVCaW5kaW5nc0Nic1twYXRoXSgkKHRoaXMudGVtcGxhdGVfaGFzaFtwYXRoXS5yb290KSk7XHJcblx0fVxyXG5cdGlmKCEoc3RydWN0IGluc3RhbmNlb2YgT2JqZWN0KSB8fCAoc3RydWN0IGluc3RhbmNlb2YgT3plbmZhbnQpKXtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0Zm9yKGxldCBrZXkgaW4gc3RydWN0KXtcclxuXHRcdHZhciBuZXdfcGF0aCA9IHBhdGggPT0gJy8nID8gcGF0aCArIGtleSA6IHBhdGggKyAnLycgKyBrZXk7XHJcblx0XHRpZih0ZW1wbGF0ZS5iaW5kaW5nc1trZXldKXtcclxuXHRcdFx0dGhpcy51cGRhdGVCaW5kaW5ncyhuZXdfcGF0aCwgc3RydWN0W2tleV0sIHRlbXBsYXRlLmJpbmRpbmdzW2tleV0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnYmluZGluZ3Mgbm90IGZvdW5kIScsIHRlbXBsYXRlLmJpbmRpbmdzLCBrZXkpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuXHJcblxyXG5UcmVlLnByb3RvdHlwZS5nZXRCaW5kaW5nc1JlYyA9IGZ1bmN0aW9uKHBhdGgpe1xyXG5cdC8vY29uc29sZS5sb2coJ0xvb2sgZm9yIGJpbmRpbmdzIScsIHBhdGgpO1xyXG5cdHZhciBwYXJlbnQgPSBwYXRoLnNwbGl0KCcvJyk7XHJcblx0dmFyIGtleSA9IHBhcmVudC5wb3AoKTtcclxuXHR2YXIgcGFyZW50ID0gcGFyZW50LmpvaW4oJy8nKTtcclxuXHRpZihwYXJlbnQgPT09ICcnKXtcclxuXHRcdHBhcmVudCA9ICcvJztcclxuXHR9XHJcblx0dmFyIHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZV9oYXNoW3BhcmVudF07XHJcblx0aWYodGVtcGxhdGUpe1xyXG5cdFx0cmV0dXJuIHRlbXBsYXRlLmJpbmRpbmdzW2tleV07XHJcblx0fSBlbHNlIHtcclxuXHRcdHZhciBibmQgPSB0aGlzLmJpbmRpbmdzW3BhcmVudF07XHJcblx0XHRpZighYm5kKXtcclxuXHRcdFx0aWYocGFyZW50KXtcclxuXHRcdFx0XHRibmQgPSB0aGlzLmdldEJpbmRpbmdzUmVjKHBhcmVudCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHZhciBidiA9ICQoYm5kKS5jaGlsZHJlbignW2RhdGEtZnI9JyArIGtleSArICddJyk7XHJcblx0XHRpZighYnYubGVuZ3RoKXtcclxuXHRcdFx0YnYgPSAkKFwiPGRpdi8+XCIpLmF0dHIoJ2RhdGEtZnInLCBrZXkpLmFwcGVuZFRvKGJuZCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gYnYuZ2V0KClbMF07XHJcblx0fVxyXG59XHJcblxyXG5UcmVlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihyb290X3BhdGgpe1xyXG5cdC8vdGltZXIoJ3JlbmRlcicsIHJvb3RfcGF0aCk7XHJcblx0dmFyIGJyYW5jaCA9IGdldF9icmFuY2godGhpcy50ZW1wbGF0ZV90cmVlLCByb290X3BhdGgpO1xyXG5cdHZhciByZXMgPSB0aGlzLmdldEhUTUwocm9vdF9wYXRoLCBicmFuY2gpO1xyXG5cdHZhciByb290X2VsID0gdGhpcy50ZW1wbGF0ZV9oYXNoW3Jvb3RfcGF0aF0gPyB0aGlzLnRlbXBsYXRlX2hhc2hbcm9vdF9wYXRoXS5yb290IDogZmFsc2U7XHJcblx0aWYoIXJvb3RfZWwpe1xyXG5cdFx0cm9vdF9lbCA9IHRoaXMuYmluZGluZ3Nbcm9vdF9wYXRoXTtcclxuXHR9XHJcblx0aWYoIXJvb3RfZWwpe1xyXG5cdFx0cm9vdF9lbCA9IHRoaXMuZ2V0QmluZGluZ3NSZWMocm9vdF9wYXRoKTtcclxuXHR9XHJcblx0aWYoIXJvb3RfZWwpe1xyXG5cdFx0Y29uc29sZS53YXJuKCdSb290IERPTSBub2RlKCRlbCkgaXMgdW5kZWZpbmVkJyk7XHJcblx0XHRyZXR1cm47XHJcblx0XHQvLyBvaCBnb2QuLi5cclxuXHR9XHJcblx0cm9vdF9lbC5pbm5lckhUTUwgPSByZXM7XHJcblx0Ly90aW1lcigndXBkYXRlIEJpbmRpbmdzJywgcm9vdF9wYXRoKTtcclxuXHR0aGlzLnVwZGF0ZUJpbmRpbmdzKHJvb3RfcGF0aCwgYnJhbmNoLCByb290X2VsKTtcclxuXHQvL3RpbWVyKCctLS0gcmVuZGVyIGZpbmlzaGVkJywgcm9vdF9wYXRoKTtcclxufVxyXG5cclxuVHJlZS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCl7XHJcblx0dmFyIHJvb3RfcGF0aDtcclxuXHRpZih0aGlzLnJlZnJlc2hQcmVmaXhQYXRoKXtcclxuXHRcdHJvb3RfcGF0aCA9IHRoaXMucmVmcmVzaFByZWZpeFBhdGguam9pbignLycpO1xyXG5cdFx0dGhpcy5yZWZyZXNoUHJlZml4UGF0aCA9IGZhbHNlO1xyXG5cdFx0cm9vdF9wYXRoID0gcm9vdF9wYXRoID09ICcnID8gJy8nIDogcm9vdF9wYXRoO1xyXG5cdFx0aWYocm9vdF9wYXRoWzBdICE9PSAnLycpe1xyXG5cdFx0XHRyb290X3BhdGggPSAnLycgKyByb290X3BhdGg7XHJcblx0XHR9XHJcblx0fSBlbHNlIHtcclxuXHRcdHJvb3RfcGF0aCA9ICcvJztcclxuXHR9XHJcblx0dGhpcy5yZW5kZXIocm9vdF9wYXRoKTtcclxufVxyXG5cclxuVHJlZS5wcm90b3R5cGUuYWRkVG9SZWZyZXNoUG9vbCA9IGZ1bmN0aW9uKHBhdGgsIHB0aCl7XHJcblx0aWYoIXRoaXMucmVmcmVzaFByZWZpeFBhdGgpe1xyXG5cdFx0dGhpcy5yZWZyZXNoUHJlZml4UGF0aCA9IHB0aDtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Zm9yKHZhciBrZXkgaW4gcHRoKXtcclxuXHRcdFx0aWYodGhpcy5yZWZyZXNoUHJlZml4UGF0aFtrZXldICE9PSBwdGhba2V5XSl7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHRoaXMucmVmcmVzaFByZWZpeFBhdGggPSB0aGlzLnJlZnJlc2hQcmVmaXhQYXRoLnNsaWNlKDAsIGtleSk7XHJcblx0fVxyXG59XHJcblxyXG5UcmVlLnByb3RvdHlwZS5yZW1vdmVMZWFmID0gZnVuY3Rpb24ocGF0aCwgc2tpcF9yZW1vdmVfbm9kZSl7XHJcblx0dmFyIHNraXBfZnVydGhlciA9IHRydWU7XHJcblx0aWYoIXNraXBfcmVtb3ZlX25vZGUpe1xyXG5cdFx0aWYodGhpcy50ZW1wbGF0ZV9oYXNoW3BhdGhdICYmIHRoaXMudGVtcGxhdGVfaGFzaFtwYXRoXS5yb290KXtcclxuXHRcdFx0dGhpcy50ZW1wbGF0ZV9oYXNoW3BhdGhdLnJvb3QucmVtb3ZlKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRza2lwX2Z1cnRoZXIgPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblx0ZGVsZXRlIHRoaXMudGVtcGxhdGVfaGFzaFtwYXRoXTtcclxuXHRkZWxldGUgdGhpcy5iaW5kaW5nc1twYXRoXTtcclxuXHR2YXIgc3RydWN0ID0gZ2V0X2JyYW5jaCh0aGlzLnRlbXBsYXRlX3RyZWUsIHBhdGgpO1xyXG5cdGZvcih2YXIga2V5IGluIHN0cnVjdCl7XHJcblx0XHR2YXIgbmV3X3BhdGggPSBwYXRoICsgJy8nICsga2V5O1xyXG5cdFx0dGhpcy5yZW1vdmVMZWFmKG5ld19wYXRoLCBza2lwX2Z1cnRoZXIpO1xyXG5cdH1cclxufSBcclxuXHJcbnZhciBnZXRfcGFyZW50X3BhdGggPSAocGF0aCkgPT4ge1xyXG5cdHZhciBwID0gcGF0aC5zcGxpdCgnLycpO1xyXG5cdHZhciBuYW1lID0gcC5wb3AoKTtcclxuXHRpZihOdW1iZXIobmFtZSkgPT0gbmFtZSl7XHJcblx0XHRwLnBvcCgpO1xyXG5cdH1cclxuXHR2YXIgcGFyZW50ID0gcC5qb2luKCcvJyk7XHJcblx0aWYocGFyZW50ID09ICcnKXtcclxuXHRcdHBhcmVudCA9ICcvJztcclxuXHR9XHJcblx0cmV0dXJuIFtuYW1lLCBwYXJlbnRdO1xyXG59XHJcblxyXG5UcmVlLnByb3RvdHlwZS5zZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uKHBhdGgsIHRlbXBsYXRlLCBjb250ZXh0LCBlbCl7XHJcblx0dmFyIHB0aCA9IHBhdGguc3BsaXQoJy8nKTsgXHJcblx0aWYocHRoWzBdID09PSAnJyl7XHJcblx0XHRwdGggPSBwdGguc2xpY2UoMSk7XHJcblx0fVxyXG5cdGlmKHB0aFswXSA9PT0gJycpe1xyXG5cdFx0cHRoID0gcHRoLnNsaWNlKDEpO1xyXG5cdH1cclxuXHR2YXIgdG1wbCA9IG5ldyBPemVuZmFudCh0ZW1wbGF0ZSk7XHJcblx0dG1wbC5zdGF0ZSA9IGNvbnRleHQ7XHJcblx0aWYoZWwpe1xyXG5cdFx0dG1wbC5yb290ID0gZWw7XHJcblx0fVxyXG5cdHRoaXMudGVtcGxhdGVfaGFzaFtwYXRoXSA9IHRtcGw7XHJcblx0aW5pdF9mcm9tX3BhdGgodGhpcy50ZW1wbGF0ZV90cmVlLCBwYXRoLCB7fSk7XHJcblx0dGhpcy5hZGRUb1JlZnJlc2hQb29sKHBhdGgsIHB0aCk7XHJcblx0dmFyIFtuYW1lLCBwYXJlbnRdID0gZ2V0X3BhcmVudF9wYXRoKHBhdGgpO1xyXG5cdGlmKHRoaXMudGVtcGxhdGVfaGFzaFtwYXJlbnRdICYmICEoKE51bWJlcihuYW1lKSA9PSBuYW1lKSAmJiBuYW1lLmxlbmd0aCkpe1xyXG5cdFx0dGhpcy5yZWZyZXNoKCk7IFxyXG5cdH1cclxufVxyXG5cclxudmFyIG96ZW5mYW50X3RyZWVzID0ge307XHJcblxyXG52YXIgZ2V0X2JyYW5jaCA9ICh0cmVlLCBwYXRoKSA9PiB7XHJcblx0dmFyIHB0aCA9IHBhdGguc3BsaXQoJy8nKTtcclxuXHRmb3IobGV0IGsgb2YgcHRoKXtcclxuXHRcdGlmKGsgPT09ICcnKSBjb250aW51ZTtcclxuXHRcdGlmKCF0cmVlW2tdKXtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0XHR0cmVlID0gdHJlZVtrXTtcclxuXHR9XHJcblx0cmV0dXJuIHRyZWU7XHJcbn1cclxuXHJcbnZhciBnZXRfdHJlZSA9IChhcHBfaWQpID0+IHtcclxuXHR2YXIgdHJlZTtcclxuXHRpZighb3plbmZhbnRfdHJlZXNbYXBwX2lkXSl7XHJcblx0XHRvemVuZmFudF90cmVlc1thcHBfaWRdID0gdHJlZSA9IG5ldyBUcmVlKCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHRyZWUgPSBvemVuZmFudF90cmVlc1thcHBfaWRdO1xyXG5cdH1cclxuXHRyZXR1cm4gdHJlZTtcclxufVxyXG5cclxudmFyIG96ZW5mYW50X25ldyA9IHtcclxuXHRlYWNoSGFzaE1peGluOiB7XHJcblx0XHQnJHJlYWxfZWwnOiBbJ2FzeW5jQ2xvc3VyZScsICgpID0+IHtcclxuXHRcdFx0dmFyIGhhc2huYW1lLCB0ZW1wbGF0ZTtcclxuXHRcdFx0cmV0dXJuIChjYiwgdGVtcGxhdGUsIHBhdGgsIGFwcF9pZCwgY29udGV4dCwgZWwpID0+IHtcclxuXHRcdFx0XHRpZighYXBwX2lkKSByZXR1cm47XHJcblx0XHRcdFx0dmFyIHB0aCA9IHBhdGggPT09ICcvJyA/ICcnIDogcGF0aDtcclxuXHRcdFx0XHR2YXIgdHJlZSA9IGdldF90cmVlKGFwcF9pZCk7XHJcblx0XHRcdFx0dHJlZS5vblVwZGF0ZUJpbmRpbmcocGF0aCwgY2IpO1xyXG5cdFx0XHRcdHRyZWUuc2V0VGVtcGxhdGUocGF0aCwgdGVtcGxhdGUsIGNvbnRleHQsIGlzX2RlZihlbCk/IGVsLmdldCgpWzBdIDogZmFsc2UpO1xyXG5cdFx0XHR9XHJcblx0XHR9LCAnJHRlbXBsYXRlJywgJy0kcGF0aCcsICctJGFwcF9pZCcsICctJHJlYWxfdmFsdWVzJywgJy0kZWwnXSxcclxuXHRcdCckb3plbmZhbnQubGlzdF9yZW5kZXInOiBbXHJcblx0XHRcdChfLCBwYXRoLCBhcHBfaWQpID0+IHtcclxuXHRcdFx0XHR2YXIgcGFyZW50ID0gZ2V0X3BhcmVudF9wYXRoKHBhdGgpWzFdO1xyXG5cdFx0XHRcdHZhciB0cmVlID0gZ2V0X3RyZWUoYXBwX2lkKTtcclxuXHRcdFx0XHRpZih0cmVlLmJpbmRpbmdzW3BhcmVudF0pe1xyXG5cdFx0XHRcdFx0XHR0cmVlLnJlbmRlcihwYXJlbnQpO1xyXG5cdFx0XHRcdH1cdFx0XHRcdFxyXG5cdFx0XHR9LCBcclxuXHRcdFx0JyRhbGxfY2hpbGRyZW4nLCAnLSRwYXRoJywgJy0kYXBwX2lkJ10sXHJcblx0XHQnJG96ZW5mYW50LndyaXRlcic6IFsoW2NlbGwsIHZhbF0sIHRlbXBsYXRlX3BhdGgsIGFwcF9pZCkgPT4ge1xyXG5cdFx0XHRcdGlmKCF0ZW1wbGF0ZV9wYXRoIHx8ICFhcHBfaWQgfHwgIW96ZW5mYW50X3RyZWVzW2FwcF9pZF0pIHJldHVybjtcclxuXHRcdFx0XHR2YXIgcHRoID0gdGVtcGxhdGVfcGF0aDtcclxuXHRcdFx0XHR2YXIgdGVtcGxhdGUgPSBnZXRfdHJlZShhcHBfaWQpLnRlbXBsYXRlX2hhc2hbcHRoXTtcclxuXHRcdFx0XHRpZighdGVtcGxhdGUpIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGVtcGxhdGUuc2V0KGNlbGwsIHZhbCk7XHJcblx0XHR9LCAnKicsICctJHBhdGgnLCAnLSRhcHBfaWQnXSxcclxuXHRcdCckaHRtbF9za2VsZXRvbl9jaGFuZ2VzJzogWyckcmVhbF9lbCddLFxyXG5cdFx0JyRvemVuZmFudC5yZW1vdmVyJzogWyhfLCBwYXRoLCBhcHBfaWQpID0+IHtcclxuXHRcdFx0XHRvemVuZmFudF90cmVlc1thcHBfaWRdLnJlbW92ZUxlYWYocGF0aCk7XHJcblx0XHR9LCAnJHJlbW92ZScsICctJHBhdGgnLCAnLSRhcHBfaWQnXVxyXG5cdH1cclxufVxyXG5cclxudmFyIG96ZW5mYW50ID0ge1xyXG5cdGVhY2hIYXNoTWl4aW46IHtcclxuXHRcdCckb3plbmZhbnRfZWwnOiBbKHNlYXJjaGVyLCBuYW1lKSA9PiB7XHJcblx0XHRcdFx0dmFyIHJlcztcclxuXHRcdFx0XHRpZihzZWFyY2hlciBpbnN0YW5jZW9mIEZ1bmN0aW9uKXtcclxuXHRcdFx0XHRcdHJlcyA9IHNlYXJjaGVyKG5hbWUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcmVzID8gJChyZXMpIDogZmFsc2U7XHJcblx0XHR9LCAnLi4vJG96ZW5mYW50LmJpbmRpbmdzX3NlYXJjaCcsICckbmFtZSddLFxyXG5cdFx0JyRsaXN0X2VsJzogWyhuYW1lLCAkZWwsIG1hcCkgPT4ge1xyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ3NlYXJjaCBsaXN0JywgbmFtZSwgJGVsLCBtYXApO1xyXG5cdFx0XHRcdGlmKG5hbWUgPT09IG51bGwgfHwgbmFtZSA9PT0gdW5kZWZpbmVkIHx8ICFtYXApIHJldHVybjtcclxuXHRcdFx0XHR2YXIgbnVtID0gbWFwW25hbWVdO1xyXG5cdFx0XHRcdHJldHVybiBnZXRfYnlfc2VsZWN0b3IobnVtLCAkZWwsIHRydWUpO1xyXG5cdFx0fSwgJyRuYW1lJywgJy4uLyRyZWFsX2VsJywgJy4uLyRsaXN0X3RlbXBsYXRlX3dyaXRlci5pbmRleF9tYXAnXSxcclxuXHRcdCckcmVhbF9lbCc6IFsnZmlyc3RUcnVlQ2InLCAoJGVsKSA9PiB7IHJldHVybiAkZWwgJiYgJGVsLmxlbmd0aCB9LCAnJGVsJywgJyRsaXN0X2VsJywgJyRvemVuZmFudF9lbCddLFxyXG5cdFx0JyRvemVuZmFudF90ZW1wbGF0ZTInOiBbZ2V0X296ZW5mYW50X3RlbXBsYXRlLCAnJHRlbXBsYXRlJywgJy0kcmVhbF92YWx1ZXMnXSxcclxuXHRcdCckb3plbmZhbnQnOiBbJ25lc3RlZCcsIChjYiwgdGVtcGxhdGUsICRlbCwgY29udGV4dCkgPT4ge1xyXG5cdFx0XHRcdGlmKCF0ZW1wbGF0ZSB8fCAhaXNfZGVmKCRlbCkpIHJldHVybjtcclxuXHRcdFx0XHR2YXIgZmlsdGVyZWRfY29udGV4dCA9IHt9O1xyXG5cdFx0XHRcdGZvcihsZXQgayBpbiBjb250ZXh0KXtcclxuXHRcdFx0XHRcdGlmKGNvbnRleHRba10gaW5zdGFuY2VvZiBPYmplY3Qpe1xyXG5cdFx0XHRcdFx0XHQvLyBkb250IHdyaXRlIG9iamVjdHMgdG8gaHRtbCFcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGZpbHRlcmVkX2NvbnRleHRba10gPSBjb250ZXh0W2tdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZigkZWwpe1xyXG5cdFx0XHRcdFx0dGVtcGxhdGUucmVuZGVyKCRlbC5nZXQoMCksIGZpbHRlcmVkX2NvbnRleHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjYignYmluZGluZ3Nfc2VhcmNoJywgKHN0cikgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRlbXBsYXRlLmJpbmRpbmdzID8gdGVtcGxhdGUuYmluZGluZ3Nbc3RyXSA6IGZhbHNlO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0Y2IoJ2h0bWwnLCB0ZW1wbGF0ZSk7XHJcblx0XHR9LCBbJ2h0bWwnLCAnYmluZGluZ3Nfc2VhcmNoJ10sICckb3plbmZhbnRfdGVtcGxhdGUyJywgJyRyZWFsX2VsJywgJy0kcmVhbF92YWx1ZXMnXSxcclxuXHRcdC8vJyRvemVuZmFudF9uZXN0ZWRfdGVtcGxhdGVzJzogWydjbG9zdXJlJywgZ2V0X2ZpZWxkc19tYXAsICcqLyRvemVuZmFudC50ZW1wbGF0ZSddLFxyXG5cdFx0JyRvemVuZmFudF93cml0ZXInOiBbd3JpdGVfb3plbmZhbnRfY2hhbmdlcywgJyonLCAnLSRvemVuZmFudF90ZW1wbGF0ZTInXSxcclxuXHRcdC8qJyRvemVuZmFudF9zb21ldGhpbmcnOiBbKGEsIGIpID0+IHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHR0ZW1wbGF0ZTogYSxcclxuXHRcdFx0XHRjaGlsZHJlbjogYixcclxuXHRcdFx0fVxyXG5cdFx0fSwgJyRvemVuZmFudF90ZW1wbGF0ZTInLCAnJHRlbXBsYXRlc19tYXAnXSwqL1xyXG5cdFx0JyRvemVuZmFudF9maXJzdF9yZW5kZXInOiBbKF8sIHN0cnVjdCwgJGVsKSA9PiB7XHJcblx0XHRcdFx0Ly92YXIgaHRtbCA9IG96ZW5mYW50X3RvX2h0bWxfcmVjKHN0cnVjdCk7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnRmlyc3QgcmVuZGVyIScsIHN0cnVjdCwgJGVsLCBodG1sKTtcclxuXHRcdFx0XHQvLyRlbC5odG1sKGh0bWwpO1x0XHRcdFx0XHJcblx0XHR9LCAnJGluaXRlZCcsICctJG96ZW5mYW50X3NvbWV0aGluZycsICctJHJlYWxfZWwnXSxcclxuXHRcdC8vJyR0ZW1wbGF0ZXNfbWFwJzogWydjbG9zdXJlJywgY29sbGVjdF9tYXAsICcqLyRvemVuZmFudF9zb21ldGhpbmcnXSxcclxuXHRcdCckaHRtbF9za2VsZXRvbl9jaGFuZ2VzJzogWyckb3plbmZhbnQuaHRtbCddLFxyXG5cdFx0JyRvemVuZmFudF9yZW1vdmUnOiBbZnVuY3Rpb24oXywgJGVsKXtcclxuXHRcdFx0aWYoJGVsKXtcclxuXHRcdFx0XHQkZWwuaHRtbCgnJyk7XHJcblx0XHRcdH1cclxuXHRcdH0sICckcmVtb3ZlJywgJy0kcmVhbF9lbCddXHJcblx0fVxyXG59XHJcblxyXG52YXIgY2hlX3BhY2thZ2UgPSB7XHJcblx0cHJlZGljYXRlczoge1xyXG5cdFx0Y2hlOiBmdW5jdGlvbihleHByKXtcclxuXHRcdFx0dmFyIFtleHByLCBjYnNdID0gZXhwcjtcclxuXHRcdFx0Y2JzID0gY2JzIHx8IFtdO1xyXG5cdFx0XHR2YXIgc3VjY19jYjtcclxuXHRcdFx0dmFyIG9iaiA9IGNoZS5jcmVhdGUoZXhwciwge1xyXG5cdFx0XHRcdG9uT3V0cHV0OiBmdW5jdGlvbihrZXksIHZhbCl7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnb3V0cHV0dGluZyBmcm9tIGNoZScsIGtleSwgdmFsKTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdG9uU3VjY2VzczogZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdjaGUgc2NlbmFyaW8gc3VjY2Vzc2Z1bGx5IGZpbmlzaGVkJywgc3VjY19jYiwgb2JqLnN0YXRlKTtcclxuXHRcdFx0XHRcdHN1Y2NfY2Iob2JqLnN0YXRlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIC4uLmNicyk7XHJcblx0XHRcdHZhciBzdHIgPSBbJ2FzeW5jQ2xvc3VyZUZ1bm5lbCcsICgpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gKGNiLCBjZWxsLCB2YWwpID0+IHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdzb21ldGhpbmcgZHJpcHBlZCcsIGNiLCBjZWxsLCB2YWwpO1xyXG5cdFx0XHRcdFx0c3VjY19jYiA9IGNiO1xyXG5cdFx0XHRcdFx0b2JqLmRyaXAoY2VsbCwgdmFsKTtcclxuXHRcdFx0XHRcdHJldHVybiAnYSc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCAuLi5vYmoubmVlZGVkX2V2ZW50c11cclxuXHRcdFx0Y29uc29sZS5sb2coJ2dldHRpbmcgY2hlIGV4cHInLCBzdHIpO1xyXG5cdFx0XHRyZXR1cm4gc3RyO1xyXG5cdFx0fVxyXG5cdH1cclxufSBcclxuXHJcbnZhciByZW5kZXJlZCA9IHt9O1xyXG52YXIgdGVtcGxhdGVzID0ge307XHJcblxyXG52YXIgcGFyc2VfcmVjID0gKGFwcCwgZ3JpZF9pZCwgY2VsbCkgPT4ge1xyXG5cdHZhciBncmlkID0gYXBwLmdldEdyaWQoZ3JpZF9pZCk7XHJcblx0dmFyIHJlcyA9IHtcclxuXHRcdHZhbDogZ3JpZC5jZWxsX3ZhbHVlc1tjZWxsXSxcclxuXHRcdGdyaWRfaWQsXHJcblx0XHRjaGlsZHJlbjoge30sXHJcblx0fTtcclxuXHRmb3IobGV0IGdyaWRuYW1lIGluIGdyaWQubGlua2VkX2hhc2hlcyl7XHJcblx0XHRcdHZhciBncl9pZCA9IGdyaWQubGlua2VkX2hhc2hlc1tncmlkbmFtZV07XHJcblx0XHRcdHJlcy5jaGlsZHJlbltncmlkbmFtZV0gPSBwYXJzZV9yZWMoYXBwLCBncl9pZCwgY2VsbCk7XHJcblx0fVxyXG5cdHJldHVybiByZXM7XHJcblxyXG59XHJcbnZhciByZW5kZXJfcmVjID0gKGFwcCwgc3RydWN0KSA9PiB7XHJcblx0dmFyIGdyaWQgPSBhcHAuZ2V0R3JpZChzdHJ1Y3QuZ3JpZF9pZCk7XHJcblx0aW5pdF9pZl9lbXB0eShyZW5kZXJlZCwgYXBwLmlkLCB7fSwgZ3JpZC5pZCwgdHJ1ZSk7XHJcblx0aWYoc3RydWN0LnZhbCl7XHJcblx0XHR2YXIgY29udGV4dCA9IE9iamVjdC5jcmVhdGUoZ3JpZC5jZWxsX3ZhbHVlcyk7XHJcblx0XHRmb3IobGV0IGtleSBpbiBzdHJ1Y3QuY2hpbGRyZW4pe1xyXG5cdFx0XHRcdGNvbnRleHRba2V5XSA9IHJlbmRlcl9yZWMoYXBwLCBzdHJ1Y3QuY2hpbGRyZW5ba2V5XSlcclxuXHRcdH1cclxuXHRcdGluaXRfaWZfZW1wdHkodGVtcGxhdGVzLCBhcHAuaWQsIHt9KTtcclxuXHRcdHRlbXBsYXRlc1thcHAuaWRdW2dyaWQucGF0aF0gPSBzdHJ1Y3QudG1wbCA9IG5ldyBGaXJlcmEuT3plbmZhbnQoc3RydWN0LnZhbCk7XHJcblx0XHRyZXR1cm4gc3RydWN0LnRtcGwuZ2V0SFRNTChjb250ZXh0KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFyIHJlcyA9IFtdO1xyXG5cdFx0Zm9yKGxldCBrZXkgaW4gc3RydWN0LmNoaWxkcmVuKXtcclxuXHRcdFx0XHRyZXMucHVzaChyZW5kZXJfcmVjKGFwcCwgc3RydWN0LmNoaWxkcmVuW2tleV0pKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiByZXMuam9pbignJyk7XHJcblx0fVxyXG59XHJcbnZhciBzZXRfYmluZGluZ3NfcmVjID0gKGFwcCwgc3RydWN0LCBlbCkgPT4ge1xyXG5cdGlmKCFzdHJ1Y3QpIGRlYnVnZ2VyO1xyXG5cdHZhciBncmlkID0gYXBwLmdldEdyaWQoc3RydWN0LmdyaWRfaWQpO1xyXG5cdGlmKHN0cnVjdC50bXBsKXtcclxuXHRcdGdyaWQuc2V0KCckZWwnLCAkKGVsKSk7XHJcblx0XHRzdHJ1Y3QudG1wbC5zZXRSb290KGVsKS51cGRhdGVCaW5kaW5ncygpO1xyXG5cdFx0Zm9yKGxldCBrZXkgaW4gc3RydWN0LmNoaWxkcmVuKXtcclxuXHRcdFx0bGV0IGVsID0gc3RydWN0LnRtcGwuYmluZGluZ3Nba2V5XTtcclxuXHRcdFx0c2V0X2JpbmRpbmdzX3JlYyhhcHAsIHN0cnVjdC5jaGlsZHJlbltrZXldLCBlbCk7XHJcblx0XHR9XHJcblx0fSBlbHNlIHtcclxuXHRcdGVsLmNoaWxkcmVuLmVhY2goKG5vZGUsIGtleSkgPT4ge1xyXG5cdFx0XHRpZihlbC5jaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShrZXkpKXtcclxuXHRcdFx0XHRzZXRfYmluZGluZ3NfcmVjKGFwcCwgc3RydWN0LmNoaWxkcmVuW2tleV0sIG5vZGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH1cclxufVxyXG52YXIgcmVuZGVyID0gZnVuY3Rpb24oYXBwLCBzdGFydCwgbm9kZSl7XHJcblx0XHR2YXIgc3RydWN0ID0gcGFyc2VfcmVjKGFwcCwgc3RhcnQuaWQsICckdGVtcGxhdGUnKTtcclxuXHRcdHZhciBodG1sID0gcmVuZGVyX3JlYyhhcHAsIHN0cnVjdCk7XHJcblx0XHRpZighbm9kZSkgZGVidWdnZXI7IFxyXG5cdFx0bm9kZS5pbm5lckhUTUwgPSBodG1sO1xyXG5cdFx0c2V0X2JpbmRpbmdzX3JlYyhhcHAsIHN0cnVjdCwgbm9kZSk7XHJcblx0XHQvL2NvbnNvbGUubG9nKCdodG1sJywgaHRtbCk7XHJcbn1cclxuXHJcbnZhciBuZXVfb3plbmZhbnQgPSB7XHJcblx0b25IYXNoQ3JlYXRlZDogKGFwcCwgZ3JpZF9pZCwgcGF0aCwgcGFyZW50KSA9PiB7XHJcblx0XHRpZighcGFyZW50KXtcclxuXHRcdFx0dmFyIHNlbGYgPSBhcHAuZ2V0R3JpZChncmlkX2lkKTtcclxuXHRcdFx0dmFyIG5vZGUgPSBzZWxmLmNlbGxfdmFsdWVzLiRlbC5nZXQoKVswXTtcclxuXHRcdFx0cmVuZGVyKGFwcCwgc2VsZiwgbm9kZSk7XHJcblx0XHR9XHJcblx0XHRpZihyZW5kZXJlZFthcHAuaWRdICYmIHJlbmRlcmVkW2FwcC5pZF1bcGFyZW50XSl7XHJcblx0XHRcdHZhciBzZWxmID0gYXBwLmdldEdyaWQoZ3JpZF9pZCk7XHJcblx0XHRcdHZhciBwYXJlbnRfcGF0aCA9IGFwcC5nZXRHcmlkKHBhcmVudCkucGF0aDtcclxuXHRcdFx0dmFyIHBhcmVudF90bXBsID0gdGVtcGxhdGVzW2FwcC5pZF1bcGFyZW50X3BhdGhdO1xyXG5cdFx0XHQvL2lmKCFwYXJlbnRfdG1wbCkgZGVidWdnZXI7XHJcblx0XHRcdHZhciBub2RlID0gcGFyZW50X3RtcGwuYmluZGluZ3Nbc2VsZi5uYW1lXTtcclxuXHRcdFx0cmVuZGVyKGFwcCwgc2VsZiwgbm9kZSk7XHJcblx0XHR9XHJcblx0XHQvL2NvbnNvbGUubG9nKCdoYXNoIGNyZWF0ZWQnLCBwYXRoLCBwYXJlbnRfcGF0aCk7XHJcblx0fVxyXG59XHJcblxyXG5GaXJlcmEuaXNfZGVmID0gaXNfZGVmO1xyXG5GaXJlcmEubG9hZFBhY2thZ2UoY29yZSk7XHJcbkZpcmVyYS5sb2FkUGFja2FnZShjaGVfcGFja2FnZSk7XHJcbkZpcmVyYS5wYWNrYWdlc0F2YWlsYWJsZSA9IHtzaW1wbGVIdG1sVGVtcGxhdGVzLCBodG1sQ2VsbHMsIG96ZW5mYW50LCBvemVuZmFudF9uZXcsIG5ldV9vemVuZmFudCwgY2hlOiBjaGVfcGFja2FnZX07XHJcbi8vRmlyZXJhLmxvYWRQYWNrYWdlKGh0bWwpO1xyXG5GaXJlcmEuZnVuY190ZXN0X2V4cG9ydCA9IHtwYXJzZV9wYiwgcGFyc2VfZmV4cHJ9O1xyXG5GaXJlcmEuX0YgPSBfRjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRmlyZXJhO1xyXG4iLCIvLyBodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Vbml0X1Rlc3RpbmcvMS4wXG4vL1xuLy8gVEhJUyBJUyBOT1QgVEVTVEVEIE5PUiBMSUtFTFkgVE8gV09SSyBPVVRTSURFIFY4IVxuLy9cbi8vIE9yaWdpbmFsbHkgZnJvbSBuYXJ3aGFsLmpzIChodHRwOi8vbmFyd2hhbGpzLm9yZylcbi8vIENvcHlyaWdodCAoYykgMjAwOSBUaG9tYXMgUm9iaW5zb24gPDI4MG5vcnRoLmNvbT5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAnU29mdHdhcmUnKSwgdG9cbi8vIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG4vLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Jcbi8vIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gd2hlbiB1c2VkIGluIG5vZGUsIHRoaXMgd2lsbCBhY3R1YWxseSBsb2FkIHRoZSB1dGlsIG1vZHVsZSB3ZSBkZXBlbmQgb25cbi8vIHZlcnN1cyBsb2FkaW5nIHRoZSBidWlsdGluIHV0aWwgbW9kdWxlIGFzIGhhcHBlbnMgb3RoZXJ3aXNlXG4vLyB0aGlzIGlzIGEgYnVnIGluIG5vZGUgbW9kdWxlIGxvYWRpbmcgYXMgZmFyIGFzIEkgYW0gY29uY2VybmVkXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7XG5cbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLy8gMS4gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXG5cbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xuXG4vLyAyLiBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBhc3NlcnQuXG4vLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQgfSlcblxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xuICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgdGhpcy5vcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3I7XG4gIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG4gIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHN0YWNrU3RhcnRGdW5jdGlvbik7XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gbm9uIHY4IGJyb3dzZXJzIHNvIHdlIGNhbiBoYXZlIGEgc3RhY2t0cmFjZVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICB2YXIgb3V0ID0gZXJyLnN0YWNrO1xuXG4gICAgICAvLyB0cnkgdG8gc3RyaXAgdXNlbGVzcyBmcmFtZXNcbiAgICAgIHZhciBmbl9uYW1lID0gc3RhY2tTdGFydEZ1bmN0aW9uLm5hbWU7XG4gICAgICB2YXIgaWR4ID0gb3V0LmluZGV4T2YoJ1xcbicgKyBmbl9uYW1lKTtcbiAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAvLyBvbmNlIHdlIGhhdmUgbG9jYXRlZCB0aGUgZnVuY3Rpb24gZnJhbWVcbiAgICAgICAgLy8gd2UgbmVlZCB0byBzdHJpcCBvdXQgZXZlcnl0aGluZyBiZWZvcmUgaXQgKGFuZCBpdHMgbGluZSlcbiAgICAgICAgdmFyIG5leHRfbGluZSA9IG91dC5pbmRleE9mKCdcXG4nLCBpZHggKyAxKTtcbiAgICAgICAgb3V0ID0gb3V0LnN1YnN0cmluZyhuZXh0X2xpbmUgKyAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGFjayA9IG91dDtcbiAgICB9XG4gIH1cbn07XG5cbi8vIGFzc2VydC5Bc3NlcnRpb25FcnJvciBpbnN0YW5jZW9mIEVycm9yXG51dGlsLmluaGVyaXRzKGFzc2VydC5Bc3NlcnRpb25FcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiByZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gIGlmICh1dGlsLmlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgIHJldHVybiAnJyArIHZhbHVlO1xuICB9XG4gIGlmICh1dGlsLmlzTnVtYmVyKHZhbHVlKSAmJiAoaXNOYU4odmFsdWUpIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cbiAgaWYgKHV0aWwuaXNGdW5jdGlvbih2YWx1ZSkgfHwgdXRpbC5pc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHRydW5jYXRlKHMsIG4pIHtcbiAgaWYgKHV0aWwuaXNTdHJpbmcocykpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPCBuID8gcyA6IHMuc2xpY2UoMCwgbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TWVzc2FnZShzZWxmKSB7XG4gIHJldHVybiB0cnVuY2F0ZShKU09OLnN0cmluZ2lmeShzZWxmLmFjdHVhbCwgcmVwbGFjZXIpLCAxMjgpICsgJyAnICtcbiAgICAgICAgIHNlbGYub3BlcmF0b3IgKyAnICcgK1xuICAgICAgICAgdHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkoc2VsZi5leHBlY3RlZCwgcmVwbGFjZXIpLCAxMjgpO1xufVxuXG4vLyBBdCBwcmVzZW50IG9ubHkgdGhlIHRocmVlIGtleXMgbWVudGlvbmVkIGFib3ZlIGFyZSB1c2VkIGFuZFxuLy8gdW5kZXJzdG9vZCBieSB0aGUgc3BlYy4gSW1wbGVtZW50YXRpb25zIG9yIHN1YiBtb2R1bGVzIGNhbiBwYXNzXG4vLyBvdGhlciBrZXlzIHRvIHRoZSBBc3NlcnRpb25FcnJvcidzIGNvbnN0cnVjdG9yIC0gdGhleSB3aWxsIGJlXG4vLyBpZ25vcmVkLlxuXG4vLyAzLiBBbGwgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgbXVzdCB0aHJvdyBhbiBBc3NlcnRpb25FcnJvclxuLy8gd2hlbiBhIGNvcnJlc3BvbmRpbmcgY29uZGl0aW9uIGlzIG5vdCBtZXQsIHdpdGggYSBtZXNzYWdlIHRoYXRcbi8vIG1heSBiZSB1bmRlZmluZWQgaWYgbm90IHByb3ZpZGVkLiAgQWxsIGFzc2VydGlvbiBtZXRob2RzIHByb3ZpZGVcbi8vIGJvdGggdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzIHRvIHRoZSBhc3NlcnRpb24gZXJyb3IgZm9yXG4vLyBkaXNwbGF5IHB1cnBvc2VzLlxuXG5mdW5jdGlvbiBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yLCBzdGFja1N0YXJ0RnVuY3Rpb24pIHtcbiAgdGhyb3cgbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7XG4gICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgIHN0YWNrU3RhcnRGdW5jdGlvbjogc3RhY2tTdGFydEZ1bmN0aW9uXG4gIH0pO1xufVxuXG4vLyBFWFRFTlNJT04hIGFsbG93cyBmb3Igd2VsbCBiZWhhdmVkIGVycm9ycyBkZWZpbmVkIGVsc2V3aGVyZS5cbmFzc2VydC5mYWlsID0gZmFpbDtcblxuLy8gNC4gUHVyZSBhc3NlcnRpb24gdGVzdHMgd2hldGhlciBhIHZhbHVlIGlzIHRydXRoeSwgYXMgZGV0ZXJtaW5lZFxuLy8gYnkgISFndWFyZC5cbi8vIGFzc2VydC5vayhndWFyZCwgbWVzc2FnZV9vcHQpO1xuLy8gVGhpcyBzdGF0ZW1lbnQgaXMgZXF1aXZhbGVudCB0byBhc3NlcnQuZXF1YWwodHJ1ZSwgISFndWFyZCxcbi8vIG1lc3NhZ2Vfb3B0KTsuIFRvIHRlc3Qgc3RyaWN0bHkgZm9yIHRoZSB2YWx1ZSB0cnVlLCB1c2Vcbi8vIGFzc2VydC5zdHJpY3RFcXVhbCh0cnVlLCBndWFyZCwgbWVzc2FnZV9vcHQpOy5cblxuZnVuY3Rpb24gb2sodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09JywgYXNzZXJ0Lm9rKTtcbn1cbmFzc2VydC5vayA9IG9rO1xuXG4vLyA1LiBUaGUgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHNoYWxsb3csIGNvZXJjaXZlIGVxdWFsaXR5IHdpdGhcbi8vID09LlxuLy8gYXNzZXJ0LmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsICE9IGV4cGVjdGVkKSBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5lcXVhbCk7XG59O1xuXG4vLyA2LiBUaGUgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igd2hldGhlciB0d28gb2JqZWN0cyBhcmUgbm90IGVxdWFsXG4vLyB3aXRoICE9IGFzc2VydC5ub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIG5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9JywgYXNzZXJ0Lm5vdEVxdWFsKTtcbiAgfVxufTtcblxuLy8gNy4gVGhlIGVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBhIGRlZXAgZXF1YWxpdHkgcmVsYXRpb24uXG4vLyBhc3NlcnQuZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LmRlZXBFcXVhbCA9IGZ1bmN0aW9uIGRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmICghX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBFcXVhbCcsIGFzc2VydC5kZWVwRXF1YWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfSBlbHNlIGlmICh1dGlsLmlzQnVmZmVyKGFjdHVhbCkgJiYgdXRpbC5pc0J1ZmZlcihleHBlY3RlZCkpIHtcbiAgICBpZiAoYWN0dWFsLmxlbmd0aCAhPSBleHBlY3RlZC5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0dWFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYWN0dWFsW2ldICE9PSBleHBlY3RlZFtpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIDcuMi4gSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgRGF0ZSBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgRGF0ZSBvYmplY3QgdGhhdCByZWZlcnMgdG8gdGhlIHNhbWUgdGltZS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzRGF0ZShhY3R1YWwpICYmIHV0aWwuaXNEYXRlKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgUmVnRXhwIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmRcbiAgLy8gcHJvcGVydGllcyAoYGdsb2JhbGAsIGBtdWx0aWxpbmVgLCBgbGFzdEluZGV4YCwgYGlnbm9yZUNhc2VgKS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzUmVnRXhwKGFjdHVhbCkgJiYgdXRpbC5pc1JlZ0V4cChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmXG4gICAgICAgICAgIGFjdHVhbC5nbG9iYWwgPT09IGV4cGVjdGVkLmdsb2JhbCAmJlxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmXG4gICAgICAgICAgIGFjdHVhbC5pZ25vcmVDYXNlID09PSBleHBlY3RlZC5pZ25vcmVDYXNlO1xuXG4gIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICghdXRpbC5pc09iamVjdChhY3R1YWwpICYmICF1dGlsLmlzT2JqZWN0KGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gNy41IEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudHMob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYikge1xuICBpZiAodXRpbC5pc051bGxPclVuZGVmaW5lZChhKSB8fCB1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGIpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LlxuICBpZiAoYS5wcm90b3R5cGUgIT09IGIucHJvdG90eXBlKSByZXR1cm4gZmFsc2U7XG4gIC8vfn5+SSd2ZSBtYW5hZ2VkIHRvIGJyZWFrIE9iamVjdC5rZXlzIHRocm91Z2ggc2NyZXd5IGFyZ3VtZW50cyBwYXNzaW5nLlxuICAvLyAgIENvbnZlcnRpbmcgdG8gYXJyYXkgc29sdmVzIHRoZSBwcm9ibGVtLlxuICBpZiAoaXNBcmd1bWVudHMoYSkpIHtcbiAgICBpZiAoIWlzQXJndW1lbnRzKGIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGEgPSBwU2xpY2UuY2FsbChhKTtcbiAgICBiID0gcFNsaWNlLmNhbGwoYik7XG4gICAgcmV0dXJuIF9kZWVwRXF1YWwoYSwgYik7XG4gIH1cbiAgdHJ5IHtcbiAgICB2YXIga2EgPSBvYmplY3RLZXlzKGEpLFxuICAgICAgICBrYiA9IG9iamVjdEtleXMoYiksXG4gICAgICAgIGtleSwgaTtcbiAgfSBjYXRjaCAoZSkgey8vaGFwcGVucyB3aGVuIG9uZSBpcyBhIHN0cmluZyBsaXRlcmFsIGFuZCB0aGUgb3RoZXIgaXNuJ3RcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPSBrYi5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuICBrYS5zb3J0KCk7XG4gIGtiLnNvcnQoKTtcbiAgLy9+fn5jaGVhcCBrZXkgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChrYVtpXSAhPSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gOC4gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG4vLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcEVxdWFsJywgYXNzZXJ0Lm5vdERlZXBFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT09JywgYXNzZXJ0LnN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuLy8gMTAuIFRoZSBzdHJpY3Qgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igc3RyaWN0IGluZXF1YWxpdHksIGFzXG4vLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPT0nLCBhc3NlcnQubm90U3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XG4gIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXhwZWN0ZWQpID09ICdbb2JqZWN0IFJlZ0V4cF0nKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTtcbiAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX3Rocm93cyhzaG91bGRUaHJvdywgYmxvY2ssIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIHZhciBhY3R1YWw7XG5cbiAgaWYgKHV0aWwuaXNTdHJpbmcoZXhwZWN0ZWQpKSB7XG4gICAgbWVzc2FnZSA9IGV4cGVjdGVkO1xuICAgIGV4cGVjdGVkID0gbnVsbDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgYmxvY2soKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGFjdHVhbCA9IGU7XG4gIH1cblxuICBtZXNzYWdlID0gKGV4cGVjdGVkICYmIGV4cGVjdGVkLm5hbWUgPyAnICgnICsgZXhwZWN0ZWQubmFtZSArICcpLicgOiAnLicpICtcbiAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7XG5cbiAgaWYgKHNob3VsZFRocm93ICYmICFhY3R1YWwpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIGlmICghc2hvdWxkVGhyb3cgJiYgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdHb3QgdW53YW50ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgaWYgKChzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgZXhwZWN0ZWQgJiZcbiAgICAgICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHwgKCFzaG91bGRUaHJvdyAmJiBhY3R1YWwpKSB7XG4gICAgdGhyb3cgYWN0dWFsO1xuICB9XG59XG5cbi8vIDExLiBFeHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvcjpcbi8vIGFzc2VydC50aHJvd3MoYmxvY2ssIEVycm9yX29wdCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3MuYXBwbHkodGhpcywgW3RydWVdLmNvbmNhdChwU2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG59O1xuXG4vLyBFWFRFTlNJT04hIFRoaXMgaXMgYW5ub3lpbmcgdG8gd3JpdGUgb3V0c2lkZSB0aGlzIG1vZHVsZS5cbmFzc2VydC5kb2VzTm90VGhyb3cgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzLmFwcGx5KHRoaXMsIFtmYWxzZV0uY29uY2F0KHBTbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbn07XG5cbmFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24oZXJyKSB7IGlmIChlcnIpIHt0aHJvdyBlcnI7fX07XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093bi5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59O1xuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMS4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDktMjJUMjI6MzBaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjEuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0XHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0XHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdH1cblxuXHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0XHRyZXNvbHZlLmNhbGwoIHVuZGVmaW5lZCwgdmFsdWUgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuY2FsbCggdW5kZWZpbmVkLCB2YWx1ZSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0ICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGksXG5cdFx0dmFsID0gMDtcblxuXHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0aWYgKCBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdGkgPSA0O1xuXG5cdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0fSBlbHNlIHtcblx0XHRpID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbCxcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRpZiAoIGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0dmFsID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVsgbmFtZSBdO1xuXHR9XG5cblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblxuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXHR9XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgdGltZXJJZCxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiByYWYoKSB7XG5cdGlmICggdGltZXJJZCApIHtcblx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCByYWYgKTtcblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1lcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZiBvciBpZiBkb2N1bWVudCBpcyBoaWRkZW5cblx0aWYgKCBqUXVlcnkuZngub2ZmIHx8IGRvY3VtZW50LmhpZGRlbiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0aWYgKCB0aW1lcigpICkge1xuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgP1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggcmFmICkgOlxuXHRcdFx0d2luZG93LnNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGlmICggd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSggdGltZXJJZCApO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cdH1cblxuXHR0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG4vKipcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcbn1cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvY0VsZW0sIHdpbiwgcmVjdCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSBlbGVtZW50IGlzIG5vdCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpXG5cdFx0aWYgKCByZWN0LndpZHRoIHx8IHJlY3QuaGVpZ2h0ICkge1xuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0d2luID0gZ2V0V2luZG93KCBkb2MgKTtcblx0XHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdHJldHVybiByZWN0O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKiBcclxuICogVG8gY2hhbmdlIHRoaXMgbGljZW5zZSBoZWFkZXIsIGNob29zZSBMaWNlbnNlIEhlYWRlcnMgaW4gUHJvamVjdCBQcm9wZXJ0aWVzLlxyXG4gKiBUbyBjaGFuZ2UgdGhpcyB0ZW1wbGF0ZSBmaWxlLCBjaG9vc2UgVG9vbHMgfCBUZW1wbGF0ZXNcclxuICogYW5kIG9wZW4gdGhlIHRlbXBsYXRlIGluIHRoZSBlZGl0b3IuXHJcbiAqL1xyXG5cclxuXHR2YXIgZ2V0X3Rva2VuID0gKHR5cGUpID0+IHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdGNoaWxkcmVuOiBbXSxcclxuXHRcdH1cclxuXHR9XHJcblx0dmFyIG1hdGNoX3N0YXJ0ID0gZnVuY3Rpb24oKXtcclxuXHJcblx0fVxyXG5cdHZhciBlbXB0eV9jaGFyc19kZWZhdWx0ID0gWycgJywgJ1x0JywgYFxyXG5gXTtcclxuXHR2YXIgaGVhZCA9IChhKSA9PiB7XHJcblx0XHRyZXR1cm4gYVswXTtcclxuXHR9XHJcblx0dmFyIHRhaWwgPSAoYSkgPT4ge1xyXG5cdFx0cmV0dXJuIGEuc2xpY2UoMSk7XHJcblx0fVxyXG5cclxuXHR2YXIgcGFyc2Vfc2VtYW50aWNzID0gZnVuY3Rpb24oY29uZmlnLCBzdHJ1Y3Qpe1xyXG5cdFx0aWYoc3RydWN0IGluc3RhbmNlb2YgQXJyYXkpe1xyXG5cdFx0XHRpZihzdHJ1Y3QubGVuZ3RoID09PSAxKXtcclxuXHRcdFx0XHRzdHJ1Y3QgPSBzdHJ1Y3RbMF07XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIHIgPSBbXTtcclxuXHRcdFx0XHRmb3IodmFyIGkgaW4gc3RydWN0KXtcclxuXHRcdFx0XHRcdHIucHVzaChwYXJzZV9zZW1hbnRpY3MoY29uZmlnLCBzdHJ1Y3RbaV0pKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmKCFzdHJ1Y3Qpe1xyXG5cdFx0XHRjb25zb2xlLndhcm4oJ29vcHMnLCBjb25maWcsIHN0cnVjdCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHZhciB0eXBlID0gc3RydWN0LnR5cGU7XHJcblx0XHR2YXIgY2hpbGRyZW4gPSBzdHJ1Y3QuY2hpbGRyZW47XHJcblx0XHR2YXIgc2VtID0gY29uZmlnW3R5cGVdO1xyXG5cdFx0aWYoIXNlbSl7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ05vIHRva2VuIHNlbWFudGljIGRlc2NyaXB0aW9uJywgdHlwZSwgc3RydWN0KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYoc2VtLnR5cGUpe1xyXG5cdFx0XHRzd2l0Y2goc2VtLnR5cGUpe1xyXG5cdFx0XHRcdGNhc2UgJ2Rvb3InOlxyXG5cdFx0XHRcdFx0dmFyIHRvX3BhcnNlID0gc2VtLnJldCA/IGNoaWxkcmVuW3NlbS5yZXQgLSAxXSA6IGNoaWxkcmVuO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlX3NlbWFudGljcyhjb25maWcsIHRvX3BhcnNlKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdjaGFycyc6XHJcblx0XHRcdFx0XHRyZXR1cm4ge2NoYXJzOiBzdHJ1Y3QuY2hhcnN9XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmKHNlbS5mdW5jKXtcclxuXHRcdFx0cmV0dXJuIHNlbS5mdW5jKHN0cnVjdCwgcGFyc2Vfc2VtYW50aWNzLmJpbmQobnVsbCwgY29uZmlnKSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0dmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihzdHJ1Y3QsIGFycil7XHJcblx0XHR2YXIgZ2V0X2NoaWxkcmVuID0gZnVuY3Rpb24oc3RydWN0LCBhcnIpe1xyXG5cdFx0XHRpZihzdHJ1Y3QuY2hpbGRyZW4pe1xyXG5cdFx0XHRcdGZvcih2YXIgaSBpbiBzdHJ1Y3QuY2hpbGRyZW4pe1xyXG5cdFx0XHRcdFx0aWYoc3RydWN0LmNoaWxkcmVuW2ldLnR5cGUpe1xyXG5cdFx0XHRcdFx0XHR2YXIgY2hpbGQgPSB7XHJcblx0XHRcdFx0XHRcdFx0dHlwZTogc3RydWN0LmNoaWxkcmVuW2ldLnR5cGUsXHJcblx0XHRcdFx0XHRcdFx0Y2hpbGRyZW46IFtdLFxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmKHN0cnVjdC5jaGlsZHJlbltpXS5jaGFycyl7XHJcblx0XHRcdFx0XHRcdFx0Y2hpbGQuY2hhcnMgPSBzdHJ1Y3QuY2hpbGRyZW5baV0uY2hhcnM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0YXJyLnB1c2goY2hpbGQpO1xyXG5cdFx0XHRcdFx0XHRnZXRfY2hpbGRyZW4oc3RydWN0LmNoaWxkcmVuW2ldLCBjaGlsZC5jaGlsZHJlbik7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRnZXRfY2hpbGRyZW4oc3RydWN0LmNoaWxkcmVuW2ldLCBhcnIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0dmFyIHJlcyA9IFtdO1xyXG5cdFx0Z2V0X2NoaWxkcmVuKHtjaGlsZHJlbjogW3N0cnVjdF19LCByZXMpO1xyXG5cdFx0cmV0dXJuIHJlc1swXTtcclxuXHR9XHJcblxyXG5cdHZhciBwYXJzZSA9IGZ1bmN0aW9uKGNvbmZpZywgc3RyLCBkZWJ1Zyl7XHJcblx0XHR2YXIgaXNfZW1wdHlfY2hhciA9IChjaGFyKSA9PiB7XHJcblx0XHRcdHZhciBlbXB0eV9jaGFycyA9IGNvbmZpZy5lbXB0eV9jaGFycyB8fCBlbXB0eV9jaGFyc19kZWZhdWx0O1xyXG5cdFx0XHRyZXR1cm4gZW1wdHlfY2hhcnMuaW5kZXhPZihjaGFyKSAhPT0gLTE7XHJcblx0XHR9XHJcblx0XHR2YXIgcGFyc2VfcmVjID0gZnVuY3Rpb24gcGFyc2VfcmVjKHR0LCBzdHIsIHBvcyl7XHJcblx0XHRcdHZhciBvcmlnaW5hbF9wb3MgPSBwb3M7XHJcblx0XHRcdHZhciBzaG93cG9zID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRyZXR1cm4gc3RyLnN1YnN0cigwLCBwb3MpICsgJ0BAQCcgKyBzdHIuc3Vic3RyKHBvcyk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnUGFyc2luZycsICdfX18nICsgdHQgKyAnX19fJywgJ3Rva2VuIGZyb20nLCBwb3MsIHNob3dwb3MoKSk7XHJcblx0XHRcdHZhciBjaGlsZHJlbjtcclxuXHRcdFx0dmFyIHJlcyA9IHtcclxuXHRcdFx0XHRjaGlsZHJlbjogW10sXHJcblx0XHRcdH07XHJcblx0XHRcdGlmKHR5cGVvZiB0dCA9PT0gJ3N0cmluZycpe1xyXG5cdFx0XHRcdHJlcy50eXBlID0gdHQ7XHJcblx0XHRcdFx0aWYoIWNvbmZpZy5zeW50YXhbdHRdKXtcclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1Rva2VuIG5vdCBmb3VuZDonLCB0dCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHZhciB0ayA9IGNvbmZpZy5zeW50YXhbdHRdO1xyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ1Rva2VuIHByb3BzOicsIHRrKTtcclxuXHRcdFx0XHRpZih0ay5zdGFydCAhPT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0XHRcdHZhciBzdGFydGVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHR2YXIgc3RhcnRfcG9zID0gcG9zO1xyXG5cdFx0XHRcdFx0d2hpbGUoKytwb3Mpe1xyXG5cdFx0XHRcdFx0XHR2YXIgY2hhciA9IHN0cltwb3MgLSAxXTtcclxuXHRcdFx0XHRcdFx0aWYoaXNfZW1wdHlfY2hhcihjaGFyKSl7XHJcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYoY2hhciAhPT0gdGsuc3RhcnQpe1xyXG5cdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ3BhcnNpbmcnLCB0dCwgJ2ZhaWxlZDonLCBwb3MsIFxyXG5cdFx0XHRcdFx0XHRcdC8vc3RyW3Bvc10sICdpbnN0ZWFkIG9mJywgdGsuc3RhcnQpO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBbZmFsc2UsIHN0YXJ0X3Bvc107XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYodGsuY2hpbGRyZW4pe1xyXG5cdFx0XHRcdFx0Y2hpbGRyZW4gPSB0ay5jaGlsZHJlbjtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aWYodGsuZnJlZV9jaGFycyl7XHJcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ1BhcnNpbmcgZnJlZSBjaGFycycpO1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RhcnRfcG9zID0gcG9zO1xyXG5cdFx0XHRcdFx0XHRpZih0ay5lbmQgfHwgdGsucmVnZXgpe1xyXG5cdFx0XHRcdFx0XHRcdHZhciBzdGFydGVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGxhZyA9IDA7XHJcblx0XHRcdFx0XHRcdFx0d2hpbGUoKytwb3Mpe1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGNoYXIgPSBzdHJbcG9zIC0gMV07XHJcblx0XHRcdFx0XHRcdFx0XHRpZihjaGFyID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyB3ZSByZWFjaGVkIHRoZSBlbmQhXHJcblx0XHRcdFx0XHRcdFx0XHRcdGlmKHBvcyAtIHN0YXJ0X3BvcyA+IDEpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ3dlIHJlYWNoZWQgdGhlIGVuZCEnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXMuY2hhcnMgPSBzdHIuc3Vic3RyKHN0YXJ0X3BvcywgcG9zIC0gc3RhcnRfcG9zIC0gMSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFtyZXMsIHBvcyAtIDFdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvL3JldHVybiBbcmVzLCBwb3MgKyAxXTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ3BhcnNpbmcgZnJlZSBjaGFycycsICdcIicgKyBjaGFyICsgJ1wiJywgJ2FzJywgdHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoaXNfZW1wdHlfY2hhcihjaGFyKSAmJiAhc3RhcnRlZCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCsrbGFnO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGlmKHRrLmVuZCAmJiBjaGFyID09PSB0ay5lbmQpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXMuY2hhcnMgPSBzdHIuc3Vic3RyKHN0YXJ0X3BvcywgcG9zIC0gc3RhcnRfcG9zIC0gMSArIGxhZyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBbcmVzLCBwb3NdO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYodGsucmVnZXgpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBzdHJpbmdfdG9fY29tcGFyZSA9IHN0ci5zdWJzdHIoc3RhcnRfcG9zICsgbGFnLCBwb3MgLSBzdGFydF9wb3MgLSBsYWcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBhMSA9ICEhY2hhci5tYXRjaCh0ay5yZWdleCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGEyID0gISFzdHJpbmdfdG9fY29tcGFyZS5tYXRjaCh0ay5yZWdleCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnbWF0Y2hpbmcgcmVnZXgnLCB0ay5yZWdleCwgJ2FnYWluc3QnLCBzdHJpbmdfdG9fY29tcGFyZSwgYTEsIHN0YXJ0ZWQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vaWYoYTEgIT09IGEyKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdDb21wYXJpbmcnLCBzdGFydF9wb3MsIGExLCBhMiwgdHQsICdcIicgKyBjaGFyICsgJ1wiJywgJ3ZzLicsICdcIicgKyBzdHJpbmdfdG9fY29tcGFyZSArICdcIi5tYXRjaCgnICsgdGsucmVnZXggKyAnKScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmKCFjaGFyIHx8ICEoc3RyaW5nX3RvX2NvbXBhcmUubWF0Y2godGsucmVnZXgpKSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZihzdGFydGVkKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzLmNoYXJzID0gc3RyLnN1YnN0cihzdGFydF9wb3MgKyBsYWcsIHBvcyAtIHN0YXJ0X3BvcyAtIDEgLSBsYWcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdfX19fX19fX19fX19fXyBzdWNjZXNzJywgcmVzLmNoYXJzKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFtyZXMsIHBvcyAtIDFdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnREVEIEVORCEnLCBjaGFyLCB0dCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBbZmFsc2UsIHBvcyAtIDEgLSBsYWddO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnRlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignQ291bGQgbm90IHBhcnNlIGZyZWUgY2hhcnMgd2l0aG91dCBlbmQhJyk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFtmYWxzZSwgcG9zXTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmKHRrLnN0cil7XHJcblx0XHRcdFx0XHRcdC8vIGp1c3QgZXhhY3Qgc3RyaW5nXHJcblx0XHRcdFx0XHRcdHZhciB0ZXN0X3N0ciA9IHN0ci5zdWJzdHIocG9zLCB0ay5zdHIubGVuZ3RoKTtcclxuXHRcdFx0XHRcdFx0aWYodGVzdF9zdHIgPT09IHRrLnN0cil7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFtyZXMsIHBvcyArIHRrLnN0ci5sZW5ndGhdO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBbZmFsc2UsIHBvc107XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignTm8gY2hhcnMgYW5kIG5vIHRva2VucyAtIHdoYXQgdG8gZG8/JywgdGspO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjaGlsZHJlbiA9IHR0O1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCFjaGlsZHJlbikgcmV0dXJuIHJlcztcclxuXHRcdFx0dmFyIGNoaWxkcmVuX3R5cGUgPSBoZWFkKGNoaWxkcmVuKTtcclxuXHRcdFx0dmFyIHJlc3RfY2hpbGRyZW4gPSB0YWlsKGNoaWxkcmVuKTtcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnY2h0eXBlJywgY2hpbGRyZW5fdHlwZSwgcmVzdF9jaGlsZHJlbik7XHJcblx0XHRcdHN3aXRjaChjaGlsZHJlbl90eXBlKXtcclxuXHRcdFx0XHRjYXNlICc+JzpcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ3BhcnNpbmcgPiBjaGlsZHJlbicsIHR0KTtcclxuXHRcdFx0XHRcdHZhciBwID0gcG9zO1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBiIG9mIHJlc3RfY2hpbGRyZW4pe1xyXG5cdFx0XHRcdFx0XHRpZih0eXBlb2YgYiA9PT0gJ3N0cmluZycpIGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHR2YXIgcjtcclxuXHRcdFx0XHRcdFx0dmFyIHN0cnVjdF90b19wYXJzZSA9IGIgaW5zdGFuY2VvZiBBcnJheSA/IGIgOiBiLnR5cGU7XHJcblx0XHRcdFx0XHRcdHZhciBvcHRpb25hbCA9IGIub3B0aW9uYWw7XHJcblx0XHRcdFx0XHRcdHZhciBtdWx0aXBsZSA9IGIubXVsdGlwbGU7XHJcblx0XHRcdFx0XHRcdGlmKHN0cnVjdF90b19wYXJzZSBpbnN0YW5jZW9mIEFycmF5ICYmIHR5cGVvZiBzdHJ1Y3RfdG9fcGFyc2Vbc3RydWN0X3RvX3BhcnNlLmxlbmd0aCAtIDFdID09PSAnc3RyaW5nJyl7XHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uYWwgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdG11bHRpcGxlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR3aGlsZSh0cnVlKXtcclxuXHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdwYXJzaW5nIG11bHRpcGxlJywgc3RydWN0X3RvX3BhcnNlLCAnYXMnLCB0dCwgYik7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHJ6ID0gcGFyc2VfcmVjKHN0cnVjdF90b19wYXJzZSwgc3RyLCBwKTtcclxuXHRcdFx0XHRcdFx0XHRyID0gcnpbMF07XHJcblx0XHRcdFx0XHRcdFx0cCA9IHJ6WzFdO1xyXG5cdFx0XHRcdFx0XHRcdGlmKCFyKXtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKG9wdGlvbmFsKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBbZmFsc2UsIHBdO1xyXG5cdFx0XHRcdFx0XHRcdH1cdFxyXG5cdFx0XHRcdFx0XHRcdHBvcyA9IHA7XHJcblx0XHRcdFx0XHRcdFx0cmVzLmNoaWxkcmVuLnB1c2gocik7XHJcblx0XHRcdFx0XHRcdFx0aWYobXVsdGlwbGUpe1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoc3RyW3BdID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnfCc6XHJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdwYXJzaW5nIHwgY2hpbGRyZW4nLCBjaGlsZHJlbik7XHJcblx0XHRcdFx0XHRmb3IodmFyIGIgb2YgcmVzdF9jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRcdGlmKHR5cGVvZiBiID09PSAnc3RyaW5nJykgY29udGludWU7XHJcblx0XHRcdFx0XHRcdHZhciByO1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RydWN0X3RvX3BhcnNlID0gYiBpbnN0YW5jZW9mIEFycmF5ID8gYiA6IGIudHlwZTtcclxuXHRcdFx0XHRcdFx0dmFyIHJ6ID0gcGFyc2VfcmVjKHN0cnVjdF90b19wYXJzZSwgc3RyLCBwb3MpO1xyXG5cdFx0XHRcdFx0XHRyID0gcnpbMF07XHJcblx0XHRcdFx0XHRcdHAgPSByelsxXTtcclxuXHRcdFx0XHRcdFx0aWYoIXIpe1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHJlcy5jaGlsZHJlbi5wdXNoKHIpO1xyXG5cdFx0XHRcdFx0XHRcdHBvcyA9IHA7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuIFtmYWxzZSwgcG9zXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKCFyZXMuY2hpbGRyZW4ubGVuZ3RoKXtcclxuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnTm90aGluZyBmb3VuZCcsIHR0KTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFtmYWxzZSwgcG9zXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignVW5rbm93biBjaGlsZHJlbiB0eXBlOicsIGNoaWxkcmVuX3R5cGUpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHRrICYmIHRrLmVuZCl7XHJcblx0XHRcdFx0dmFyIHBwID0gcG9zO1xyXG5cdFx0XHRcdHdoaWxlKCsrcHApe1xyXG5cdFx0XHRcdFx0dmFyIGNoYXIgPSBzdHJbcHAgLSAxXTtcclxuXHRcdFx0XHRcdGlmKGlzX2VtcHR5X2NoYXIoY2hhcikpe1xyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKGNoYXIgPT09IHRrLmVuZCl7XHJcblx0XHRcdFx0XHRcdHBvcyA9IHBwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBbcmVzLCBwb3NdO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHN0cnVjdCA9IHBhcnNlX3JlYygncm9vdF90b2tlbicsIHN0ciwgMCk7XHJcblx0XHRzdHJ1Y3QgPSBmbGF0dGVuKHN0cnVjdFswXSk7XHJcblx0XHQvLyBzZW1hdGljIHBhcnNpbmdcclxuXHRcdHZhciBzZW1hbnRpY3MgPSBwYXJzZV9zZW1hbnRpY3MoY29uZmlnLnNlbWFudGljcywgc3RydWN0KTtcclxuXHRcdHJldHVybiB7c3ludGF4OiBzdHJ1Y3QsIHNlbWFudGljc307XHJcblx0fVxyXG5cdG1vZHVsZS5leHBvcnRzID0ge1xyXG5cdFx0Z2V0X3BhcnNlcjogKGNvbmZpZykgPT4ge1xyXG5cdFx0XHRyZXR1cm4gcGFyc2UuYmluZChudWxsLCBjb25maWcpO1xyXG5cdFx0fSxcclxuXHRcdGR1bXA6IGZ1bmN0aW9uKHN0cnVjdCl7XHJcblx0XHRcdHZhciByZWMgPSBmdW5jdGlvbihzdHJ1Y3QsIGxldmVsKXtcclxuXHRcdFx0XHRpZighc3RydWN0KSByZXR1cm47XHJcblx0XHRcdFx0dmFyIHJlcyA9IFtdO1xyXG5cdFx0XHRcdGlmKHN0cnVjdC50eXBlKXtcclxuXHRcdFx0XHRcdHJlcy5wdXNoKCdUeXBlOiAnICsgc3RydWN0LnR5cGUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihzdHJ1Y3QuY2hhcnMpe1xyXG5cdFx0XHRcdFx0cmVzLnB1c2goJ1N0cjogJyArIHN0cnVjdC5jaGFycyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKHN0cnVjdC5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHR2YXIgciA9IFtdO1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBpIGluIHN0cnVjdC5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRcdHIucHVzaChyZWMoc3RydWN0LmNoaWxkcmVuW2ldLCBsZXZlbCsxKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXMucHVzaCgnPGRpdj4nICsgci5qb2luKCdcdCcpICsgJzwvZGl2PicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gJzxkaXY+JyArIHJlcy5qb2luKCc8YnI+JykgKyAnPC9kaXY+JztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVjKHN0cnVjdCwgMCk7XHJcblx0XHR9XHJcblx0fVxyXG4iLCJ2YXIgZmllbGRzID0gWydjbGFzc25hbWVzJywgJ3RhZ25hbWUnLCAnc3RyJywgJ3F1b3RlZF9zdHInXTtcclxudmFyIGluaXRfaWZfZW1wdHkgPSBmdW5jdGlvbihvYmovKmtleSwgdmFsLCBrZXkxLCB2YWwxLCAuLi4gKi8pIHtcclxuXHRmb3IobGV0IGkgID0gMTsgO2kgPSBpICsgMil7XHJcblx0XHR2YXIga2V5ID0gYXJndW1lbnRzW2ldO1xyXG5cdFx0dmFyIHZhbCA9IGFyZ3VtZW50c1tpICsgMV07XHJcblx0XHRpZigha2V5KSBicmVhaztcclxuXHJcblx0XHRpZihvYmpba2V5XSA9PT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0b2JqW2tleV0gPSB2YWw7XHJcblx0XHR9XHJcblx0XHRvYmogPSBvYmpba2V5XTtcclxuXHR9XHJcblx0cmV0dXJuIG9iajtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRlbXB0eV9jaGFyczogWycgJ10sXHJcblx0c3ludGF4OiB7XHJcblx0XHRyb290X3Rva2VuOiB7XHJcblx0XHRcdGNoaWxkcmVuOiBbXHJcblx0XHRcdFx0Jz4nLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6ICdpdGVtJyxcclxuXHRcdFx0XHRcdG11bHRpcGxlOiB0cnVlLFxyXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XVxyXG5cdFx0fSxcclxuXHRcdGl0ZW06IHtcclxuXHRcdFx0Y2hpbGRyZW46IFtcclxuXHRcdFx0XHQnPicsXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogJ2luZGVudCcsXHJcblx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdFtcclxuXHRcdFx0XHRcdCd8JyxcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dHlwZTogJ3Rlcm5hcnlfZWxzZScsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0W1xyXG5cdFx0XHRcdFx0XHQnPicsXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHR0eXBlOiAndGFnbmFtZScsXHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHR0eXBlOiAnY2xhc3NuYW1lcycsXHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFtcclxuXHRcdFx0XHRcdFx0XHQnfCcsIFxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdxdW90ZWRfc3RyJyxcclxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICd2YXJpYWJsZScsXHJcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdCdvcHRpb25hbCdcclxuXHRcdFx0XHRcdFx0XSxcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdicmFja2V0JyxcclxuXHRcdFx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdzdHInLFxyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XSxcclxuXHRcdFx0XHRdLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6ICdsaW5lZW5kJyxcclxuXHRcdFx0XHR9XHJcblx0XHRcdF1cclxuXHRcdH0sXHJcblx0XHRjb21tYToge1xyXG5cdFx0XHRyZWdleDogL15cXCxcXHM/JC8sXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0YnJhY2tldDoge1xyXG5cdFx0XHRzdGFydDogJygnLFxyXG5cdFx0XHRjaGlsZHJlbjogW1xyXG5cdFx0XHRcdCc+JyxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiAnYXNzaWduJyxcclxuXHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0W1xyXG5cdFx0XHRcdFx0Jz4nLFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0eXBlOiAnY29tbWEnLFxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dHlwZTogJ2Fzc2lnbidcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnb3B0aW9uYWwnXHJcblx0XHRcdFx0XVxyXG5cclxuXHRcdFx0XSxcclxuXHRcdFx0ZW5kOiAnKScsXHJcblx0XHR9LFxyXG5cdFx0YXNzaWduOiB7XHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHRcdHJlZ2V4OiAvXlteXFwpXlxcLF0qJC9cclxuXHRcdH0sXHJcblx0XHRxdW90ZWRfc3RyOiB7XHJcblx0XHRcdHN0YXJ0OiAnXCInLFxyXG5cdFx0XHRlbmQ6ICdcIicsXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0dmFyaWFibGU6IHtcclxuXHRcdFx0Y2hpbGRyZW46IFtcclxuXHRcdFx0XHQnPicsXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogJ3Zhcm5hbWUnLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogJ3Rlcm5hcnlfaWYnLFxyXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRdXHJcblx0XHR9LFxyXG5cdFx0dGVybmFyeV9pZjoge1xyXG5cdFx0XHRyZWdleDogL15cXD8kLyxcclxuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR0ZXJuYXJ5X2Vsc2U6IHtcclxuXHRcdFx0cmVnZXg6IC9eXFw6JC8sXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0dmFybmFtZToge1xyXG5cdFx0XHRyZWdleDogL15cXCRbYS16QS1aMC05XFwtXFxfXSokLyxcclxuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRpbmRlbnQ6IHtcclxuXHRcdFx0cmVnZXg6IC9eXFx0KyQvLFxyXG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGNsYXNzbmFtZXM6IHtcclxuXHRcdFx0cmVnZXg6IC9eXFwuW1xcXFwuYS16QS1aMC05XFwtXFxfXSokLyxcclxuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR0YWduYW1lOiB7XHJcblx0XHRcdHJlZ2V4OiAvXlthLXpBLVowLTldKyQvLFxyXG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHN0cjoge1xyXG5cdFx0XHRyZWdleDogL15bXlxcbl0rJC8sXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0bGluZWVuZDoge1xyXG5cdFx0XHRyZWdleDogL1xcbiQvLFxyXG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cdHNlbWFudGljczoge1xyXG5cdFx0cm9vdF90b2tlbjoge1xyXG5cdFx0XHRmdW5jOiAoc3RydWN0LCBwYXJzZXIpID0+IHtcclxuXHJcblx0XHRcdFx0dmFyIHJlcyA9IHtjaGlsZHJlbjogW119O1xyXG5cdFx0XHRcdHZhciBsYXN0X29mX2xldmVsID0ge1xyXG5cdFx0XHRcdFx0XCItMVwiOiByZXMsXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHZhciBjaGVfcmVzdWx0cyA9IHBhcnNlcihzdHJ1Y3QuY2hpbGRyZW4pO1xyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ1Jlc3VsdHMnLCBjaGVfcmVzdWx0cyk7XHJcblx0XHRcdFx0dmFyIG1heF9sZXZlbCA9IDA7XHJcblx0XHRcdFx0dmFyIGxhc3RfaWYgPSBbXTtcclxuXHRcdFx0XHRmb3IobGV0IGkgaW4gY2hlX3Jlc3VsdHMpe1xyXG5cdFx0XHRcdFx0bGV0IGNoaWxkID0gY2hlX3Jlc3VsdHNbaV07XHJcblx0XHRcdFx0XHRpZighY2hpbGQudGFnbmFtZSAmJiAhY2hpbGQuY2xhc3NuYW1lcyAmJiAhY2hpbGQucXVvdGVkX3N0ciAmJiAhY2hpbGQudmFyaWFibGUgJiYgIWNoaWxkLnR5cGUpIHtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZihjaGlsZC50eXBlID09PSAnSUYnKXtcclxuXHRcdFx0XHRcdFx0bGFzdF9pZi5wdXNoKGNoaWxkKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKGNoaWxkLnR5cGUgPT09ICdFTFNFJyl7XHJcblx0XHRcdFx0XHRcdHZhciBsaWYgPSBsYXN0X2lmLnBvcCgpO1xyXG5cdFx0XHRcdFx0XHRsaWYuZWxzZV9jaGlsZHJlbiA9IGNoaWxkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dmFyIGx2bCA9IGNoaWxkLmxldmVsIHx8IDA7XHJcblx0XHRcdFx0XHRpZihsdmwgPiBtYXhfbGV2ZWwpe1xyXG5cdFx0XHRcdFx0XHRtYXhfbGV2ZWwgPSBsdmw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR2YXIgcHV0X3RvID0gbHZsIC0gMTtcclxuXHRcdFx0XHRcdGNoaWxkLmNoaWxkcmVuID0gW107XHJcblx0XHRcdFx0XHRpZighbGFzdF9vZl9sZXZlbFtwdXRfdG9dKXtcclxuXHRcdFx0XHRcdFx0Zm9yKDtwdXRfdG8tLTtwdXRfdG8gPiAtMil7XHJcblx0XHRcdFx0XHRcdFx0aWYobGFzdF9vZl9sZXZlbFtwdXRfdG9dKSBicmVhaztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZighbGFzdF9vZl9sZXZlbFtwdXRfdG9dKXtcclxuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncHV0dGluZycsIGNoaWxkLCBwdXRfdG8sICd0bycsIGxhc3Rfb2ZfbGV2ZWxbcHV0X3RvXSk7XHJcblx0XHRcdFx0XHRsYXN0X29mX2xldmVsW3B1dF90b10uY2hpbGRyZW4ucHVzaChjaGlsZCk7XHJcblx0XHRcdFx0XHRsYXN0X29mX2xldmVsW2x2bF0gPSBjaGlsZDtcclxuXHRcdFx0XHRcdGlmKGx2bCArIDEgPCBtYXhfbGV2ZWwpe1xyXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdsdmwnLCBsdmwrMSwgbWF4X2xldmVsKTtcclxuXHRcdFx0XHRcdFx0dmFyIGogPSBsdmwgKyAxO1xyXG5cdFx0XHRcdFx0XHRmb3IodmFyIGogPSBsdmwgKyAxO2ogPD0gbWF4X2xldmVsO2orKyl7XHJcblx0XHRcdFx0XHRcdFx0aWYoIWxhc3Rfb2ZfbGV2ZWxbal0pIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2RlbGV0ZScsIGxhc3Rfb2ZfbGV2ZWxbal0pO1xyXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBsYXN0X29mX2xldmVsW2pdO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiByZXMuY2hpbGRyZW47XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRpdGVtOiB7XHJcblx0XHRcdGZ1bmM6IChzdHJ1Y3QsIHBhcnNlcikgPT4ge1xyXG5cdFx0XHRcdHZhciByZXMgPSB7fTtcclxuXHRcdFx0XHRmb3IobGV0IGNoaWxkIG9mIHN0cnVjdC5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRzd2l0Y2goY2hpbGQudHlwZSl7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ3ZhcmlhYmxlJzpcclxuXHRcdFx0XHRcdFx0XHRyZXMudmFybmFtZSA9IGNoaWxkLmNoaWxkcmVuWzBdLmNoYXJzLnNsaWNlKDEpO1xyXG5cdFx0XHRcdFx0XHRcdGlmKGNoaWxkLmNoaWxkcmVuWzFdKXtcclxuXHRcdFx0XHRcdFx0XHRcdHJlcy50eXBlID0gXCJJRlwiO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ3Rlcm5hcnlfZWxzZSc6XHJcblx0XHRcdFx0XHRcdFx0cmVzLnR5cGUgPSBcIkVMU0VcIjtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ2luZGVudCc6XHJcblx0XHRcdFx0XHRcdFx0cmVzLmxldmVsID0gY2hpbGQuY2hhcnMubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ0lOREVYJywgcmVzLmxldmVsKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ2JyYWNrZXQnOlxyXG5cdFx0XHRcdFx0XHRcdHJlcy5hc3NpZ25tZW50cyA9IFtdO1xyXG5cdFx0XHRcdFx0XHRcdGZvcihsZXQgY2hpbGQxIG9mIGNoaWxkLmNoaWxkcmVuKXtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKGNoaWxkMS50eXBlID09PSAnYXNzaWduJyl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBhc3NpZ24gPSBjaGlsZDEuY2hhcnMuc3BsaXQoJzonKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGtleSA9IGFzc2lnblswXS50cmltKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciB2YWwgPSBhc3NpZ25bMV0udHJpbSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZih2YWxbMF0gPT09ICckJyl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaXRzIHZhclxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxldCB2YXJuYW1lID0gdmFsLmxlbmd0aCA9PT0gMSA/IGtleSA6IHZhbC5zdWJzdHIoMSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aW5pdF9pZl9lbXB0eShyZXMsICdhdHRyU3R5bGVWYXJzJywgW10pLnB1c2goW3Zhcm5hbWUsIGtleV0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJlcy5hc3NpZ25tZW50cy5wdXNoKFtrZXksIHZhbF0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdJTkRFWCcsIHJlcy5sZXZlbCk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYoZmllbGRzLmluZGV4T2YoY2hpbGQudHlwZSkgIT09IC0xKXtcclxuXHRcdFx0XHRcdFx0cmVzW2NoaWxkLnR5cGVdID0gY2hpbGQuY2hhcnM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiByZXM7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRpbmRlbnQ6IHtcclxuXHRcdFx0dHlwZTogJ2NoYXJzJyxcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIiwidmFyIG96ZW5mYW50X2NvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnb29vX29vX28nKS5nZXRfcGFyc2VyKG96ZW5mYW50X2NvbmZpZyk7XG5cbnZhciBpbml0X2lmX2VtcHR5ID0gZnVuY3Rpb24ob2JqLyprZXksIHZhbCwga2V5MSwgdmFsMSwgLi4uICovKSB7XG5cdGZvcihsZXQgaSAgPSAxOyA7aSA9IGkgKyAyKXtcblx0XHR2YXIga2V5ID0gYXJndW1lbnRzW2ldO1xuXHRcdHZhciB2YWwgPSBhcmd1bWVudHNbaSArIDFdO1xuXHRcdGlmKCFrZXkpIGJyZWFrO1xuXG5cdFx0aWYob2JqW2tleV0gPT09IHVuZGVmaW5lZCl7XG5cdFx0XHRvYmpba2V5XSA9IHZhbDtcblx0XHR9XG5cdFx0b2JqID0gb2JqW2tleV07XG5cdH1cblx0cmV0dXJuIG9iajtcbn1cblxudmFyIGh0bWxfYXR0cnMgPSBuZXcgU2V0KFsnaHJlZicsICdzcmMnLCAnc3R5bGUnLCAndGFyZ2V0JywgJ2lkJywgJ2NsYXNzJywgJ3JlbCcsICd0eXBlJywgJ3ZhbHVlJ10pXG52YXIgaXNfYXR0ciA9IChzdHIpID0+IHtcblx0cmV0dXJuIGh0bWxfYXR0cnMuaGFzKHN0cikgfHwgc3RyLm1hdGNoKC9eZGF0YVxcLS8pO1xufVxuXG52YXIgT3plbmZhbnQgPSBmdW5jdGlvbihzdHIpe1xuXHRpZihzdHIgaW5zdGFuY2VvZiBPYmplY3Qpe1xuXHRcdHRoaXMuc3RydWN0ID0gc3RyOy8vIGNvbXBpbGVkIHN0cnVjdFxuXHR9IGVsc2Uge1xuXHRcdHRoaXMuc3RydWN0ID0gcGFyc2VyKHN0ciArIGBcbmApO1xuXHR9XG5cdHRoaXMubm9kZV92YXJzX3BhdGhzID0ge307XG5cdHRoaXMudGV4dF92YXJzX3BhdGhzID0ge307XG5cdHRoaXMubm9kZXNfdmFycyA9IHt9O1xuXHR0aGlzLnZhcl90eXBlcyA9IHt9O1xuXHR0aGlzLnN0YXRlID0ge307XG5cdHRoaXMuYmluZGluZ3MgPSB7fTtcblx0Z2V0X3ZhcnMoe2NoaWxkcmVuOiB0aGlzLnN0cnVjdC5zZW1hbnRpY3N9LCB0aGlzLm5vZGVfdmFyc19wYXRocywgdGhpcy50ZXh0X3ZhcnNfcGF0aHMsIHRoaXMubm9kZXNfdmFycywgJy4nLCB0aGlzLnZhcl90eXBlcywgW10pO1xuXHR0aGlzLmdldElmRWxzZVZhcnNJbmRleCgpO1xufTtcblxuT3plbmZhbnQucHJlcGFyZSA9IChzdHIpID0+IHtcblx0cmV0dXJuIHBhcnNlcihzdHIgKyBgXG5gKTtcbn1cblxudmFyIGdldF92YXJuYW1lID0gKG5vZGUpID0+IHtcblx0dmFyIGtleSA9IG5vZGUudmFybmFtZTtcblx0aWYoIWtleS5sZW5ndGgpe1xuXHRcdGlmKG5vZGUuY2xhc3NuYW1lcyl7XG5cdFx0XHRrZXkgPSBub2RlLmNsYXNzbmFtZXMuc3Vic3RyKDEpLnNwbGl0KCcuJylbMF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybignSW5jb3JyZWN0IHN0YXRlbWVudDogdmFyaWFibGUgd2l0aG91dCBuYW1lIGFuZCBkZWZhdWx0IGNsYXNzIScpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4ga2V5O1xufVxuXG52YXIgYWRkX3RvX2lmX2Vsc2VfcG9vbCA9IChwb29scywgdmFybmFtZSwgcGF0aCkgPT4ge1xuXHRmb3IodmFyIHBvb2wgb2YgcG9vbHMpe1xuXHRcdHBvb2xbdmFybmFtZV0gPSBwYXRoO1xuXHR9XG59XG5cbnZhciBnZXRfdmFycyA9IChub2RlLCBub2RlX3Bvb2wsIHRleHRfcG9vbCwgcGF0aF9wb29sLCBwYXRoLCB0eXBlcywgaWZfZWxzZV9wb29scykgPT4ge1xuXHRpZihub2RlID09PSB1bmRlZmluZWQpIGRlYnVnZ2VyO1xuXHRpZihub2RlLmNoaWxkcmVuKXtcblx0XHR2YXIgbm9kZXNfbGFnID0gMDtcblx0XHR2YXIgdGV4dF9sYWcgPSAwO1xuXHRcdGZvcih2YXIgaSBpbiBub2RlLmNoaWxkcmVuKXtcblx0XHRcdHZhciB6aWxkID0gbm9kZS5jaGlsZHJlbltpXTtcblx0XHRcdGlmKCF6aWxkLnRhZ25hbWUgJiYgIXppbGQuY2xhc3NuYW1lcyl7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ3RleHQgbm9kZSEnLCBub2RlLmNoaWxkcmVuW2ldKTtcblx0XHRcdFx0XHQrK25vZGVzX2xhZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Kyt0ZXh0X2xhZztcblx0XHRcdH1cblx0XHRcdHZhciBuZXdfcGF0aCA9IHBhdGggKyAnLypbJyArIChOdW1iZXIoaSkgKyAxIC0gbm9kZXNfbGFnKSArICddJztcblx0XHRcdGlmKHppbGQudHlwZSAmJiAoemlsZC50eXBlID09PSAnRUxTRScgfHwgemlsZC50eXBlID09PSAnSUYnKSl7XG5cdFx0XHRcdGlmKHppbGQudHlwZSA9PT0gJ0VMU0UnKXtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoemlsZC50eXBlID09PSAnSUYnKXtcblx0XHRcdFx0XHR2YXIgaWZfcG9vbCA9IHt9O1xuXHRcdFx0XHRcdHZhciBlbHNlX3Bvb2wgPSB7fTtcblxuXHRcdFx0XHRcdG5vZGVfcG9vbFtnZXRfdmFybmFtZSh6aWxkKV0gPSBuZXdfcGF0aDtcblx0XHRcdFx0XHRhZGRfdG9faWZfZWxzZV9wb29sKGlmX2Vsc2VfcG9vbHMsIGdldF92YXJuYW1lKHppbGQpLCBuZXdfcGF0aCk7XG5cdFx0XHRcdFx0dHlwZXNbZ2V0X3Zhcm5hbWUoemlsZCldID0ge1xuXHRcdFx0XHRcdFx0dHlwZTogJ0lGJyxcblx0XHRcdFx0XHRcdHN0cnVjdDogemlsZCxcblx0XHRcdFx0XHRcdGlmX3Bvb2wsXG5cdFx0XHRcdFx0XHRlbHNlX3Bvb2wsXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR2YXIgaWZfcG9vbHMgPSBpZl9lbHNlX3Bvb2xzLnNsaWNlKCk7XG5cdFx0XHRcdFx0aWZfcG9vbHMucHVzaChpZl9wb29sKTtcblx0XHRcdFx0XHR2YXIgZWxzZV9wb29scyA9IGlmX2Vsc2VfcG9vbHMuc2xpY2UoKTtcblx0XHRcdFx0XHRlbHNlX3Bvb2xzLnB1c2goZWxzZV9wb29sKTtcblx0XHRcdFx0XHRnZXRfdmFycyh6aWxkLCBub2RlX3Bvb2wsIHRleHRfcG9vbCwgcGF0aF9wb29sLCBuZXdfcGF0aCwgdHlwZXMsIGlmX3Bvb2xzKTtcblx0XHRcdFx0XHRnZXRfdmFycyh6aWxkLmVsc2VfY2hpbGRyZW4sIG5vZGVfcG9vbCwgdGV4dF9wb29sLCBwYXRoX3Bvb2wsIG5ld19wYXRoLCB0eXBlcywgZWxzZV9wb29scyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Z2V0X3ZhcnMoemlsZCwgbm9kZV9wb29sLCB0ZXh0X3Bvb2wsIHBhdGhfcG9vbCwgbmV3X3BhdGgsIHR5cGVzLCBpZl9lbHNlX3Bvb2xzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYoemlsZC52YXJuYW1lICE9PSB1bmRlZmluZWQpe1xuXHRcdFx0XHRcdGFkZF90b19pZl9lbHNlX3Bvb2woaWZfZWxzZV9wb29scywgZ2V0X3Zhcm5hbWUoemlsZCksIG5ld19wYXRoKTtcblx0XHRcdFx0XHRub2RlX3Bvb2xbZ2V0X3Zhcm5hbWUoemlsZCldID0gbmV3X3BhdGg7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnRm91bmQgdmFyIScsIGdldF92YXJuYW1lKG5vZGUuY2hpbGRyZW5baV0pLCB6aWxkKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih6aWxkLmF0dHJTdHlsZVZhcnMpe1xuXHRcdFx0XHRcdGZvcihsZXQgW3Zhcm5hbWUsIGF0dHJuYW1lXSBvZiB6aWxkLmF0dHJTdHlsZVZhcnMpe1xuXHRcdFx0XHRcdFx0bm9kZV9wb29sW3Zhcm5hbWVdID0gbmV3X3BhdGg7XG5cdFx0XHRcdFx0XHRsZXQgYXNfdHlwZSA9IGlzX2F0dHIoYXR0cm5hbWUpID8gJ0FUVFInIDogJ1NUWUxFJztcblx0XHRcdFx0XHRcdHR5cGVzW3Zhcm5hbWVdID0ge1xuXHRcdFx0XHRcdFx0XHR0eXBlOiBhc190eXBlLFxuXHRcdFx0XHRcdFx0XHRuYW1lOiBhdHRybmFtZSxcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Z2V0X3ZhcnMoemlsZCwgbm9kZV9wb29sLCB0ZXh0X3Bvb2wsIHBhdGhfcG9vbCwgbmV3X3BhdGgsIHR5cGVzLCBpZl9lbHNlX3Bvb2xzKTtcblx0XHRcdFx0fSBcblx0XHRcdFx0aWYoemlsZC5xdW90ZWRfc3RyKXtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzdHIhJywgbm9kZS5jaGlsZHJlbltpXS5xdW90ZWRfc3RyKTtcblx0XHRcdFx0XHR6aWxkLnF1b3RlZF9zdHIucmVwbGFjZSgvXFwkKFthLXpBLVowLTldKikvZywgKF8sIGtleSkgPT4ge1xuXHRcdFx0XHRcdFx0dmFyIHRleHRfcGF0aCA9IHBhdGggKyAnL3RleHQoKVsnICsgKE51bWJlcihpKSArIDEgLSB0ZXh0X2xhZykgKyAnXSc7XG5cdFx0XHRcdFx0XHRpZighcGF0aF9wb29sW3RleHRfcGF0aF0pe1xuXHRcdFx0XHRcdFx0XHRwYXRoX3Bvb2xbdGV4dF9wYXRoXSA9IHppbGQucXVvdGVkX3N0cjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRleHRfcG9vbFtrZXldID0gdGV4dF9wYXRoO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygndGV4dCBrZXkgZm91bmQnLCBrZXksIHRleHRfcGF0aCk7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSBcblx0XHRcdFx0Z2V0X3ZhcnMoemlsZCwgbm9kZV9wb29sLCB0ZXh0X3Bvb2wsIHBhdGhfcG9vbCwgbmV3X3BhdGgsIHR5cGVzLCBpZl9lbHNlX3Bvb2xzKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxudmFyIGlucHV0X3R5cGVzID0gbmV3IFNldChbJ3RleHQnLCAnc3VibWl0JywgJ2NoZWNrYm94JywgJ3JhZGlvJ10pO1xuXG52YXIgdG9IVE1MID0gZnVuY3Rpb24obm9kZSwgY29udGV4dCwgcGFyZW50X3RhZyl7XG5cdHZhciBpbmRlbnQgPSBgXG5gICsgbmV3IEFycmF5KG5vZGUubGV2ZWwpLmpvaW4oJ1x0Jyk7XG5cdHZhciByZXMxID0gW10sIHJlczIgPSBbXSwgYWZ0ZXIgPSAnJztcblx0aWYobm9kZS50eXBlID09PSAnRUxTRScpe1xuXHRcdHJldHVybiAnJztcblx0fVxuXHR2YXIgY2hpbGRzID0gbm9kZS5jaGlsZHJlbjtcblx0aWYobm9kZS50eXBlID09PSAnSUYnKXtcblx0XHRpZighY29udGV4dFtub2RlLnZhcm5hbWVdKXtcblx0XHRcdC8vIFwiRUxTRVwiIHBhcnRcblx0XHRcdGNoaWxkcyA9IG5vZGUuZWxzZV9jaGlsZHJlbi5jaGlsZHJlbjtcblx0XHR9XG5cdH1cblx0aWYobm9kZS50YWduYW1lIHx8IG5vZGUuY2xhc3NuYW1lcyB8fCAhcGFyZW50X3RhZyl7XG5cdFx0Ly8gaXQncyBhIG5vZGVcblx0XHR2YXIgdGFnO1xuXHRcdGlmKG5vZGUudGFnbmFtZSl7XG5cdFx0XHRpZihpbnB1dF90eXBlcy5oYXMobm9kZS50YWduYW1lKSkge1xuXHRcdFx0XHRub2RlLmFzc2lnbm1lbnRzID0gbm9kZS5hc3NpZ25tZW50cyB8fCBbXTtcblx0XHRcdFx0bm9kZS5hc3NpZ25tZW50cy5wdXNoKFsndHlwZScsIG5vZGUudGFnbmFtZV0pO1xuXHRcdFx0XHR0YWcgPSAnaW5wdXQnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGFnID0gbm9kZS50YWduYW1lO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzd2l0Y2gocGFyZW50X3RhZyl7XG5cdFx0XHRcdGNhc2UgJ29sJzpcblx0XHRcdFx0Y2FzZSAndWwnOlxuXHRcdFx0XHRcdHRhZyA9ICdsaSc7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICd0cic6XG5cdFx0XHRcdFx0dGFnID0gJ3RkJztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGFnID0gJ2Rpdic7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IobGV0IGNoaWxkIG9mIGNoaWxkcyl7XG5cdFx0XHRyZXMxLnB1c2godG9IVE1MKGNoaWxkLCBjb250ZXh0LCB0YWcpKTtcblx0XHR9XG5cdFx0aWYocGFyZW50X3RhZyl7XG5cdFx0XHRyZXMyLnB1c2goaW5kZW50ICsgJzwnICsgdGFnKTtcblx0XHRcdGlmKG5vZGUuY2xhc3NuYW1lcyAmJiBub2RlLmNsYXNzbmFtZXMubGVuZ3RoID4gMSl7XG5cdFx0XHRcdHJlczIucHVzaCgnIGNsYXNzPVwiJyArIG5vZGUuY2xhc3NuYW1lcy5zdWJzdHIoMSkucmVwbGFjZSgvXFwuL2csIFwiIFwiKSArICdcIicpO1xuXHRcdFx0fVxuXHRcdFx0aWYobm9kZS5hc3NpZ25tZW50cyl7XG5cdFx0XHRcdHZhciBzdHlsZXMgPSBbXTtcblx0XHRcdFx0Zm9yKGxldCBhc3Mgb2Ygbm9kZS5hc3NpZ25tZW50cyl7XG5cdFx0XHRcdFx0dmFyIFtrZXksIHZhbF0gPSBhc3M7XG5cdFx0XHRcdFx0aWYodmFsWzBdID09PSAnJCcpe1xuXHRcdFx0XHRcdFx0Ly8gaXRzIHZhcmlhYmxlLCBsZXRzIHRha2UgaXRzIHZhbCBmcm9tIGNvbnRleHRcblx0XHRcdFx0XHRcdHZhciByZWFsX2tleSA9IHZhbC5sZW5ndGggPT09IDEgPyBrZXkgOiB2YWwuc3Vic3RyKDEpO1xuXHRcdFx0XHRcdFx0dmFsID0gY29udGV4dFtyZWFsX2tleV0gIT09IHVuZGVmaW5lZCA/IGNvbnRleHRbcmVhbF9rZXldIDogJyc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGlzX2F0dHIoa2V5KSl7XG5cdFx0XHRcdFx0XHRyZXMyLnB1c2goJyAnICsga2V5ICsgJz1cIicgKyB2YWwgKyAnXCInKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3R5bGVzLnB1c2goa2V5ICsgJzogJyArIHZhbCArICc7Jyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHN0eWxlcy5sZW5ndGgpe1xuXHRcdFx0XHRcdHJlczIucHVzaCgnIHN0eWxlPVwiJyArIHN0eWxlcy5qb2luKCcnKSArICdcIicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXMyLnB1c2goJz4nKTtcblx0XHRcdGlmKG5vZGUudmFybmFtZSAhPT0gdW5kZWZpbmVkICYmICFub2RlLnR5cGUpe1xuXHRcdFx0XHR2YXIga2V5ID0gZ2V0X3Zhcm5hbWUobm9kZSk7XG5cdFx0XHRcdHJlczIucHVzaChpbmRlbnQgKyAnXHQnICsgKGNvbnRleHRba2V5XSAhPT0gdW5kZWZpbmVkID8gY29udGV4dFtrZXldIDogJycpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlczIucHVzaChyZXMxLmpvaW4oJyAnKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXMyLnB1c2goaW5kZW50ICsgJzwvJyArIHRhZyArICc+Jyk7XG5cdFx0XHRyZXR1cm4gcmVzMi5qb2luKCcnKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Ly8gaXRzIHZhciBvZiB0ZXh0IG5vZGVcblx0XHRpZihub2RlLnF1b3RlZF9zdHIpe1xuXHRcdFx0cmV0dXJuIGluZGVudCArIG5vZGUucXVvdGVkX3N0ci5yZXBsYWNlKC9cXCQoW2EtekEtWjAtOV0qKS9nLCBmdW5jdGlvbihfLCBrZXkpe1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdGb3VuZCEnLCBrZXksIGNvbnRleHRba2V5XSk7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0W2tleV0gIT09IHVuZGVmaW5lZCA/IGNvbnRleHRba2V5XSA6ICcnO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmKG5vZGUudmFyaWFibGUpe1xuXHRcdFx0cmV0dXJuIGluZGVudCArIG5vZGUudmFyaWFibGU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXMxLmpvaW4oJyAnKTtcbn1cblxuT3plbmZhbnQucHJvdG90eXBlLnRvSFRNTCA9IGZ1bmN0aW9uKGNvbnRleHQgPSB7fSl7XG5cdHZhciByZXMgPSB0b0hUTUwoe2NoaWxkcmVuOiB0aGlzLnN0cnVjdC5zZW1hbnRpY3N9LCBjb250ZXh0ID0gY29udGV4dCk7XG5cdHJldHVybiByZXM7XG59XG5cbk96ZW5mYW50LnByb3RvdHlwZS5zZWFyY2hCeVBhdGggPSBmdW5jdGlvbihwYXRoKXtcblx0cmV0dXJuIE96ZW5mYW50LnhwT25lKHBhdGgsIHRoaXMucm9vdCk7XG59XG5cbk96ZW5mYW50LnByb3RvdHlwZS5nZXRJZkVsc2VWYXJzSW5kZXggPSBmdW5jdGlvbigpe1xuXHR0aGlzLmlmX2Vsc2VfdmFycyA9IHt9O1xuXHRmb3IodmFyIG9uZSBpbiB0aGlzLnZhcl90eXBlcyl7XG5cdFx0Zm9yKHZhciB2YXJuYW1lIGluIHRoaXMudmFyX3R5cGVzW29uZV0uaWZfcG9vbCl7XG5cdFx0XHR2YXIgcGF0aCA9IHRoaXMudmFyX3R5cGVzW29uZV0uaWZfcG9vbFt2YXJuYW1lXTtcblx0XHRcdGluaXRfaWZfZW1wdHkodGhpcy5pZl9lbHNlX3ZhcnMsIHZhcm5hbWUsIHt9LCBvbmUsIHRydWUpO1xuXHRcdH1cblx0XHRmb3IodmFyIHZhcm5hbWUgaW4gdGhpcy52YXJfdHlwZXNbb25lXS5lbHNlX3Bvb2wpe1xuXHRcdFx0dmFyIHBhdGggPSB0aGlzLnZhcl90eXBlc1tvbmVdLmlmX3Bvb2xbdmFybmFtZV07XG5cdFx0XHRpbml0X2lmX2VtcHR5KHRoaXMuaWZfZWxzZV92YXJzLCB2YXJuYW1lLCB7fSwgb25lLCBmYWxzZSk7XG5cdFx0fVxuXHR9XG59XG5cbk96ZW5mYW50LnByb3RvdHlwZS51cGRhdGVCaW5kaW5ncyA9IGZ1bmN0aW9uKCl7XG5cdHRoaXMuYmluZGluZ3MgPSB7fTtcblx0Zm9yKGxldCB2YXJuYW1lIGluIHRoaXMubm9kZV92YXJzX3BhdGhzKXtcblx0XHRpZih0aGlzLmlmX2Vsc2VfdmFyc1t2YXJuYW1lXSl7XG5cdFx0XHR2YXIgYnJlYWtlciA9IGZhbHNlO1xuXHRcdFx0Zm9yKGxldCB2biBpbiB0aGlzLmlmX2Vsc2VfdmFyc1t2YXJuYW1lXSl7XG5cdFx0XHRcdHZhciBleHBlY3RlZF92YWwgPSB0aGlzLmlmX2Vsc2VfdmFyc1t2YXJuYW1lXVt2bl07XG5cdFx0XHRcdHZhciByZWFsX3ZhbCA9IHRoaXMuc3RhdGVbdm5dO1xuXHRcdFx0XHQvLyBYT1Jcblx0XHRcdFx0aWYoISgoZXhwZWN0ZWRfdmFsICYmIHJlYWxfdmFsKSB8fCAhKGV4cGVjdGVkX3ZhbCB8fCByZWFsX3ZhbCkpKXtcblx0XHRcdFx0XHRicmVha2VyID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYoYnJlYWtlcikgeyBcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuYmluZGluZ3NbdmFybmFtZV0gPSB0aGlzLnNlYXJjaEJ5UGF0aCh0aGlzLm5vZGVfdmFyc19wYXRoc1t2YXJuYW1lXSk7XG5cdFx0aWYoIXRoaXMuYmluZGluZ3NbdmFybmFtZV0pe1xuXHRcdFx0Y29uc29sZS53YXJuKCdObyBub2RlIGZvdW5kIGZvciB2YXInLCB2YXJuYW1lLCAnaW4gcGF0aDonLCB0aGlzLm5vZGVfdmFyc19wYXRoc1t2YXJuYW1lXSwgJ2luIGNvbnRleHQnLCB0aGlzLnJvb3QsICcsIGNvbnRleHQnLCB0aGlzLnN0YXRlKTtcblx0XHR9XG5cdH1cblx0Zm9yKGxldCB2YXJuYW1lIGluIHRoaXMudGV4dF92YXJzX3BhdGhzKXtcblx0XHR0aGlzLmJpbmRpbmdzW3Zhcm5hbWVdID0gdGhpcy5zZWFyY2hCeVBhdGgodGhpcy50ZXh0X3ZhcnNfcGF0aHNbdmFybmFtZV0pO1xuXHRcdGlmKCF0aGlzLmJpbmRpbmdzW3Zhcm5hbWVdKXtcblx0XHRcdGNvbnNvbGUud2FybignTm8gbm9kZSBmb3VuZCBmb3IgcGF0aDonLCB0aGlzLnRleHRfdmFyc19wYXRoc1t2YXJuYW1lXSwgJ2luIGNvbnRleHQnLCB0aGlzLnJvb3QpO1xuXHRcdH1cblx0fVxufVxuT3plbmZhbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKG5vZGUsIGNvbnRleHQpe1xuXHR0aGlzLnJvb3QgPSBub2RlO1xuXHR0aGlzLnN0YXRlID0gY29udGV4dDtcblx0bm9kZS5pbm5lckhUTUwgPSB0aGlzLnRvSFRNTCh0aGlzLnN0YXRlKTtcblx0dGhpcy51cGRhdGVCaW5kaW5ncygpO1xufVxuT3plbmZhbnQucHJvdG90eXBlLmdldEhUTUwgPSBmdW5jdGlvbihjb250ZXh0ID0gZmFsc2Upe1xuXHRpZihjb250ZXh0KSB7IFxuXHRcdHRoaXMuc3RhdGUgPSBjb250ZXh0O1xuXHR9XG5cdHJldHVybiB0aGlzLnRvSFRNTCh0aGlzLnN0YXRlKTtcbn1cbk96ZW5mYW50LnByb3RvdHlwZS5zZXRSb290ID0gZnVuY3Rpb24obm9kZSl7XG5cdHRoaXMucm9vdCA9IG5vZGU7XG59XG5PemVuZmFudC5wcm90b3R5cGUuX3NldFZhclZhbCA9IGZ1bmN0aW9uKGtleSwgdmFsKXtcblx0aWYodGhpcy5pZl9lbHNlX3ZhcnNba2V5XSl7XG5cdFx0Ly9jb25zb2xlLmxvZygnaWZlbHNldmFyJywga2V5LCB0aGlzLmlmX2Vsc2VfdmFyc1trZXldKTtcblx0XHRmb3IodmFyIHZhcm5hbWUgaW4gdGhpcy5pZl9lbHNlX3ZhcnNba2V5XSl7XG5cdFx0XHR2YXIgZmxhZyA9IHRoaXMuaWZfZWxzZV92YXJzW2tleV1bdmFybmFtZV0gPyB0aGlzLnN0YXRlW3Zhcm5hbWVdIDogIXRoaXMuc3RhdGVbdmFybmFtZV07XG5cdFx0XHRpZighZmxhZykge1xuXHRcdFx0XHQvLyB0aGlzIHZhciBpcyBpbiBpbmFjdGl2ZSBibG9ja1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRoaXMuYmluZGluZ3Nba2V5XS50ZXh0Q29udGVudCA9IHZhbDtcbn1cbk96ZW5mYW50LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbCl7XG5cdHRoaXMuc3RhdGVba2V5XSA9IHZhbDtcblx0aWYoIXRoaXMuYmluZGluZ3Nba2V5XSl7XG5cdFx0Ly9jb25zb2xlLndhcm4oJ1Vua25vd24ga2V5IGZvciBiaW5kaW5nOicsIGtleSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmKCF0aGlzLnJvb3QpIHJldHVybjtcblx0Ly9jb25zb2xlLmxvZygncGF0aCcsIHRoaXMudGV4dF92YXJzX3BhdGhzW2tleV0sICd2YXJzJywgdGhpcy5ub2Rlc192YXJzKTtcblx0aWYodGhpcy5ub2Rlc192YXJzW3RoaXMudGV4dF92YXJzX3BhdGhzW2tleV1dKXtcblx0XHR2YXIgdGVtcGxhdGUgPSB0aGlzLm5vZGVzX3ZhcnNbdGhpcy50ZXh0X3ZhcnNfcGF0aHNba2V5XV1cblx0XHR2YXIgbmV3X3N0ciA9IHRlbXBsYXRlLnJlcGxhY2UoL1xcJChbYS16QS1aMC05XSopL2csIChfLCBrZXkpID0+IHtcblx0XHRcdHJldHVybiB0aGlzLnN0YXRlW2tleV07XG5cdFx0fSk7XG5cdFx0dGhpcy5fc2V0VmFyVmFsKGtleSwgbmV3X3N0cik7XG5cdFx0dGhpcy5iaW5kaW5nc1trZXldLnRleHRDb250ZW50ID0gbmV3X3N0cjtcblx0fSBlbHNlIHtcblx0XHRpZih0aGlzLnZhcl90eXBlc1trZXldKXtcblx0XHRcdHN3aXRjaCh0aGlzLnZhcl90eXBlc1trZXldLnR5cGUpe1xuXHRcdFx0XHRjYXNlICdJRic6XG5cdFx0XHRcdFx0dmFyIHN0cnVjdCA9IHZhbCBcblx0XHRcdFx0XHQ/IHRoaXMudmFyX3R5cGVzW2tleV0uc3RydWN0LmNoaWxkcmVuIFxuXHRcdFx0XHRcdDogdGhpcy52YXJfdHlwZXNba2V5XS5zdHJ1Y3QuZWxzZV9jaGlsZHJlbi5jaGlsZHJlbjtcblx0XHRcdFx0XHR2YXIgaHRtbCA9IHRvSFRNTCh7Y2hpbGRyZW46IHN0cnVjdH0sIHRoaXMuc3RhdGUpO1xuXHRcdFx0XHRcdHRoaXMuYmluZGluZ3Nba2V5XS5pbm5lckhUTUwgPSBodG1sO1xuXHRcdFx0XHRcdC8vIEB0b2RvIHNob3VsZCBiZSBvcHRpbWl6ZWQhIHVwZGF0ZSBiaW5kaW5ncyBvbmx5IGZvciBkZXBlbmRlbnQgdmFycyFcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZUJpbmRpbmdzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdBVFRSJzpcblx0XHRcdFx0XHR0aGlzLmJpbmRpbmdzW2tleV0uc2V0QXR0cmlidXRlKHRoaXMudmFyX3R5cGVzW2tleV0ubmFtZSwgdmFsKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1NUWUxFJzpcblx0XHRcdFx0XHR0aGlzLmJpbmRpbmdzW2tleV0uc3R5bGVbdGhpcy52YXJfdHlwZXNba2V5XS5uYW1lXSA9IHZhbDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3NldFZhclZhbChrZXksIHZhbCk7XG5cdFx0fVxuXHR9XG59XG5PemVuZmFudC54cE9uZSA9IChwYXRoLCBub2RlID0gZG9jdW1lbnQpID0+IHtcblx0Ly9jb25zb2xlLmxvZygnTk9ERScsIG5vZGUpO1xuXHRyZXR1cm4gZG9jdW1lbnQuZXZhbHVhdGUocGF0aCwgbm9kZSwgbnVsbCwgWFBhdGhSZXN1bHQuQU5ZX1RZUEUsIG51bGwpLml0ZXJhdGVOZXh0KCk7IFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE96ZW5mYW50O1xuXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5wcm9jZXNzLm5leHRUaWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FuU2V0SW1tZWRpYXRlID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlO1xuICAgIHZhciBjYW5Qb3N0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cucG9zdE1lc3NhZ2UgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXJcbiAgICA7XG5cbiAgICBpZiAoY2FuU2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZikgeyByZXR1cm4gd2luZG93LnNldEltbWVkaWF0ZShmKSB9O1xuICAgIH1cblxuICAgIGlmIChjYW5Qb3N0KSB7XG4gICAgICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGV2LnNvdXJjZTtcbiAgICAgICAgICAgIGlmICgoc291cmNlID09PSB3aW5kb3cgfHwgc291cmNlID09PSBudWxsKSAmJiBldi5kYXRhID09PSAncHJvY2Vzcy10aWNrJykge1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgICAgICAgICAgd2luZG93LnBvc3RNZXNzYWdlKCdwcm9jZXNzLXRpY2snLCAnKicpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICBzZXRUaW1lb3V0KGZuLCAwKTtcbiAgICB9O1xufSkoKTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHRzeW50YXg6IHtcblx0XHRyb290X3Rva2VuOiB7XG5cdFx0XHRjaGlsZHJlbjogW1xuXHRcdFx0XHQnPicsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnc2V0J1xuXHRcdFx0XHR9LFxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0c2V0OiB7XG5cdFx0XHRjaGlsZHJlbjogW1xuXHRcdFx0XHQnPicsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnb3BlcmF0b3InLFxuXHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2l0ZW0nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ2l0ZW1fd2l0aF9jb21tYScsXG5cdFx0XHRcdFx0bXVsdGlwbGU6IHRydWUsXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXG5cdFx0XHRcdH1cblx0XHRcdF0sXG5cdFx0fSxcblx0XHRvcGVyYXRvcjoge1xuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcblx0XHRcdHJlZ2V4OiAvXihbXFw+XFx8XFwmfFxcL10pKyQvLFxuXHRcdH0sXG5cdFx0aXRlbV93aXRoX2NvbW1hOiB7XG5cdFx0XHRjaGlsZHJlbjogW1xuXHRcdFx0XHQnPicsXG5cdFx0XHRcdHsgXG5cdFx0XHRcdFx0dHlwZTogJ2NvbW1hJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7IFxuXHRcdFx0XHRcdHR5cGU6ICdpdGVtJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9LFxuXHRcdGl0ZW06IHtcblx0XHRcdGNoaWxkcmVuOiBbXG5cdFx0XHRcdCd8JywgXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnZnVuYycsXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFtcblx0XHRcdFx0XHQnPicsXG5cdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0J3wnLFxuXHRcdFx0XHRcdFx0eyBcblx0XHRcdFx0XHRcdFx0dHlwZTogJ3F1b3RlZF9jZWxsbmFtZSdcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR7IFxuXHRcdFx0XHRcdFx0XHR0eXBlOiAnY2VsbG5hbWUnXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAnYnJhY2tldF9leHRlbmRlZCdcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAnY29uZCcsXG5cdFx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcblx0XHRcdFx0XHR9LCBcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAncGlwZScsXG5cdFx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6ICdvdXRwdXQnLFxuXHRcdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAncXVhbnRpZmllcicsXG5cdFx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdF1cblx0XHR9LFxuXHRcdGJyYWNrZXRfZXh0ZW5kZWQ6IHtcblx0XHRcdGNoaWxkcmVuOiBbXG5cdFx0XHRcdCc+Jyxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdicmFja2V0Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdwaXBlJyxcblx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdvdXRwdXQnLFxuXHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ3F1YW50aWZpZXInLFxuXHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdH0sXG5cdFx0YnJhY2tldDoge1xuXHRcdFx0c3RhcnQ6ICcoJyxcblx0XHRcdGNoaWxkcmVuOiBbXG5cdFx0XHRcdCc+Jyxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdzZXQnLFxuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0ZW5kOiAnKScsXG5cdFx0fSxcblx0XHRxdW90ZWRfY2VsbG5hbWU6IHtcblx0XHRcdHN0YXJ0OiAnXCInLFxuXHRcdFx0ZW5kOiAnXCInLFxuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcblx0XHR9LFxuXHRcdGNlbGxuYW1lOiB7XG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxuXHRcdFx0cmVnZXg6IC9eXFxzPyhbYS16QS1aMC05X1xcLV0pK1xccz8kLyxcblx0XHR9LFxuXHRcdG91dHB1dDoge1xuXHRcdFx0c3RhcnQ6ICcvJyxcblx0XHRcdGVuZDogJy8nLFxuXHRcdFx0Y2hpbGRyZW46IFtcblx0XHRcdFx0Jz4nLFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0J3wnLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6ICdxdW90ZWRfY2VsbG5hbWUnXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAnY2VsbG5hbWUnXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XSwgXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAncGlwZScsXG5cdFx0XHRcdFx0bXVsdGlwbGU6IHRydWUsXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXG5cdFx0XHRcdH1cblx0XHRcdF0sXG5cdFx0XHRyZWdleDogL14oW2EtekEtWjAtOV9cXC1dKSskL1xuXHRcdH0sXG5cdFx0cGlwZToge1xuXHRcdFx0c3RhcnQ6ICd8Jyxcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXG5cdFx0XHRyZWdleDogL14oW2EtekEtWjAtOV9cXC1dKSskL1xuXHRcdH0sXG5cdFx0dGhyZWVkb3RzOiB7XG5cdFx0XHRzdHI6ICcuLi4nLFxuXHRcdH0sXG5cdFx0Y29uZDoge1xuXHRcdFx0c3RhcnQ6ICc/Jyxcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXG5cdFx0XHRyZWdleDogL14oW2EtekEtWjAtOV9cXC1dKSskL1xuXHRcdH0sXG5cdFx0Y29tbWE6IHtcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXG5cdFx0XHRyZWdleDogL15bXFwsXSskLyxcblx0XHR9LFxuXHRcdGZ1bmM6IHtcblx0XHRcdGNoaWxkcmVuOiBbXG5cdFx0XHRcdCc+Jyxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdjZWxsbmFtZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAnZnVuY19wYXJhbXMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dHlwZTogJ3RocmVlZG90cycsXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAncGlwZScsXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRdXG5cdFx0fSwgXG5cdFx0ZnVuY19wYXJhbXM6IHtcblx0XHRcdHN0YXJ0OiAnKCcsXG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxuXHRcdFx0ZW5kOiAnKSdcblx0XHR9LFxuXHRcdHF1YW50aWZpZXJfY2hhcjoge1xuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcblx0XHRcdHJlZ2V4OiAvXltcXCpcXCtdKyQvLFxuXHRcdH0sXG5cdFx0cXVhbnRpZmllcl9udW06IHtcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXG5cdFx0XHRzdGFydDogJ3snLFxuXHRcdFx0ZW5kOiAnfScsXG5cdFx0fSxcblx0XHRxdWFudGlmaWVyOiB7XG5cdFx0XHRjaGlsZHJlbjogW1xuXHRcdFx0XHQnfCcsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0eXBlOiAncXVhbnRpZmllcl9jaGFyJyxcblx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6ICdxdWFudGlmaWVyX251bScsXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXG5cdFx0XHRcdH0sXG5cdFx0XHRdXG5cdFx0fSxcblx0fSxcblx0c2VtYW50aWNzOiB7XG5cdFx0cm9vdF90b2tlbjoge1xuXHRcdFx0dHlwZTogJ2Rvb3InLFxuXHRcdH0sXG5cdFx0YnJhY2tldDoge1xuXHRcdFx0dHlwZTogJ2Rvb3InLFxuXHRcdH0sXG5cdFx0YnJhY2tldF9leHRlbmRlZDoge1xuXHRcdFx0ZnVuYzogZnVuY3Rpb24oc3RydWN0LCBwYXJzZXIpe1xuXHRcdFx0XHR2YXIgcmV2b2x2ZXIgPSBwYXJzZXIoc3RydWN0LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKTtcblx0XHRcdFx0dmFyIHByb3BzID0gc3RydWN0LmNoaWxkcmVuLnNsaWNlKDEpO1xuXHRcdFx0XHRpZighcHJvcHMubGVuZ3RoKXtcblx0XHRcdFx0XHRyZXR1cm4gcmV2b2x2ZXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYocmV2b2x2ZXIuc3VidHlwZSAhPT0gJ3wnKXtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnVXNlbGVzcyBxdWFudCBvciBvdXRwdXQgLSB3cm9uZyByZXZvbHZlciB0eXBlJywgcHJvcHMpO1xuXHRcdFx0XHRcdHJldHVybiByZXZvbHZlcjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdPSywgcHJvcHMnICsgcmV2b2x2ZXIuc3VidHlwZSwgcHJvcHMpO1xuXHRcdFx0XHRmb3IobGV0IGNoaWxkIG9mIHByb3BzKXtcblx0XHRcdFx0XHRpZihjaGlsZC50eXBlID09PSAnb3V0cHV0Jyl7XG5cdFx0XHRcdFx0XHRyZXZvbHZlci5vdXRwdXQgPSBwYXJzZXIoY2hpbGQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihjaGlsZC50eXBlID09PSAncGlwZScpe1xuXHRcdFx0XHRcdFx0cmV2b2x2ZXIucGlwZSA9IHBhcnNlcihjaGlsZCkuY2hhcnM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGNoaWxkLnR5cGUgPT09ICdxdWFudGlmaWVyJyl7XG5cdFx0XHRcdFx0XHR2YXIgcmVzID0ge30sIHF1YW50ID0gcGFyc2VyKGNoaWxkKTtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ0ZvdW5kIHF1YW50aWZpZXInLCBxdWFudCk7XG5cdFx0XHRcdFx0XHRzd2l0Y2gocXVhbnQuY2hhcnMpe1xuXHRcdFx0XHRcdFx0XHRjYXNlICcqJzpcblx0XHRcdFx0XHRcdFx0XHRyZXMubWluID0gMDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJysnOlxuXHRcdFx0XHRcdFx0XHRcdHJlcy5taW4gPSAxO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRpZihxdWFudC5jaGFycy5pbmRleE9mKCcsJykgIT09IC0xKXtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBwaWVjZXMgPSBxdWFudC5jaGFycy5zcGxpdCgnLCcpO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYocGllY2VzWzBdKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzLm1pbiA9IE51bWJlcihwaWVjZXNbMF0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYocGllY2VzWzFdKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzLm1heCA9IE51bWJlcihwaWVjZXNbMV0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBqdXN0IG9uZSBudW1iZXIsIGxpa2UgezQyfVxuXHRcdFx0XHRcdFx0XHRcdFx0cmVzLm1pbiA9IHJlcy5tYXggPSBOdW1iZXIocXVhbnQuY2hhcnMpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXZvbHZlci5xdWFudGlmaWVyID0gcmVzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmV2b2x2ZXI7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8qdHlwZTogJ2Rvb3InLFxuXHRcdFx0cmV0OiAxLCovXG5cdFx0fSxcblx0XHRxdWFudGlmaWVyOiB7XG5cdFx0XHR0eXBlOiAnZG9vcicsXG5cdFx0fSxcblx0XHRxdWFudGlmaWVyX2NoYXI6IHtcblx0XHRcdHR5cGU6ICdjaGFycycsXG5cdFx0fSxcblx0XHRxdWFudGlmaWVyX251bToge1xuXHRcdFx0dHlwZTogJ2NoYXJzJyxcblx0XHR9LFxuXHRcdGNvbmQ6IHtcblx0XHRcdHR5cGU6ICdjaGFycycsXG5cdFx0fSxcblx0XHRwaXBlOiB7XG5cdFx0XHR0eXBlOiAnY2hhcnMnLFxuXHRcdH0sXG5cdFx0c2V0OiB7XG5cdFx0XHRmdW5jOiAoc3RydWN0LCBwYXJzZXIpID0+IHtcblx0XHRcdFx0dmFyIGNoaWxkcmVuID0gc3RydWN0LmNoaWxkcmVuO1xuXHRcdFx0XHRpZihjaGlsZHJlblswXS50eXBlID09PSAnb3BlcmF0b3InKXtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogJ3Jldm9sdmVyJyxcblx0XHRcdFx0XHRcdHN1YnR5cGU6IGNoaWxkcmVuWzBdLmNoYXJzLFxuXHRcdFx0XHRcdFx0Y2hpbGRyZW46IHBhcnNlcihjaGlsZHJlbi5zbGljZSgxKSksXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmKGNoaWxkcmVuLmxlbmd0aCA+IDEpe1xuXHRcdFx0XHRcdFx0Ly8gXCI+XCIgYmUgZGVmYXVsdFxuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0dHlwZTogJ3Jldm9sdmVyJyxcblx0XHRcdFx0XHRcdFx0c3VidHlwZTogJz4nLFxuXHRcdFx0XHRcdFx0XHRjaGlsZHJlbjogcGFyc2VyKGNoaWxkcmVuKSxcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHBhcnNlcihjaGlsZHJlblswXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvdXRwdXQ6IHtcblx0XHRcdGZ1bmM6IChzdHJ1Y3QpID0+IHtcblx0XHRcdFx0dmFyIHNlbGYgPSB7XG5cdFx0XHRcdFx0dGl0bGU6IGZhbHNlLFxuXHRcdFx0XHRcdHBpcGVzOiBbXSxcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IobGV0IGNoaWxkIG9mIHN0cnVjdC5jaGlsZHJlbil7XG5cdFx0XHRcdFx0c3dpdGNoKGNoaWxkLnR5cGUpe1xuXHRcdFx0XHRcdFx0Y2FzZSAnY2VsbG5hbWUnOlxuXHRcdFx0XHRcdFx0Y2FzZSAncXVvdGVkX2NlbGxuYW1lJzpcblx0XHRcdFx0XHRcdFx0c2VsZi50aXRsZSA9IGNoaWxkLmNoYXJzO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzZWxmLnBpcGVzLnB1c2goY2hpbGQuY2hhcnMpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZWxmO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZnVuYzoge1xuXHRcdFx0ZnVuYzogKHN0cnVjdCwgcGFyc2VyKSA9PiB7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2FuYWx5emluZyBmdW5jIScsIHN0cnVjdCwgcGFyc2VyKTtcblx0XHRcdFx0dmFyIHNlbGYgPSB7XG5cdFx0XHRcdFx0bmFtZTogc3RydWN0LmNoaWxkcmVuWzBdLmNoYXJzLFxuXHRcdFx0XHRcdHBhcmFtczogc3RydWN0LmNoaWxkcmVuWzFdLmNoYXJzID8gc3RydWN0LmNoaWxkcmVuWzFdLmNoYXJzIDogJycsXG5cdFx0XHRcdFx0dHlwZTogJ2Z1bmMnLFxuXHRcdFx0XHRcdHN1YnR5cGU6ICdzeW5jJ1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRmb3IobGV0IGNoaWxkIG9mIHN0cnVjdC5jaGlsZHJlbil7XG5cdFx0XHRcdFx0aWYoY2hpbGQudHlwZSA9PT0gJ291dHB1dCcpe1xuXHRcdFx0XHRcdFx0c2VsZi5vdXRwdXQgPSBwYXJzZXIoY2hpbGQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihjaGlsZC50eXBlID09PSAncGlwZScpe1xuXHRcdFx0XHRcdFx0c2VsZi5waXBlID0gcGFyc2VyKGNoaWxkKS5jaGFycztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoY2hpbGQudHlwZSA9PT0gJ2NvbmQnKXtcblx0XHRcdFx0XHRcdHNlbGYuY29uZCA9IHBhcnNlcihjaGlsZCkuY2hhcnM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGNoaWxkLnR5cGUgPT09ICd0aHJlZWRvdHMnKXtcblx0XHRcdFx0XHRcdHNlbGYuc3VidHlwZSA9ICdhc3luYyc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZWxmO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aXRlbToge1xuXHRcdFx0ZnVuYzogKHN0cnVjdCwgcGFyc2VyKSA9PiB7XG5cdFx0XHRcdHZhciBzZWxmID0ge307XG5cdFx0XHRcdGlmKHN0cnVjdC5jaGlsZHJlbi5sZW5ndGggPT09IDEpe1xuXHRcdFx0XHRcdHN3aXRjaChzdHJ1Y3QuY2hpbGRyZW5bMF0udHlwZSl7XG5cdFx0XHRcdFx0XHRjYXNlICdjZWxsbmFtZSc6XG5cdFx0XHRcdFx0XHRjYXNlICdxdW90ZWRfY2VsbG5hbWUnOlxuXHRcdFx0XHRcdFx0XHRzZWxmLmV2ZW50ID0ge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWU6IHN0cnVjdC5jaGlsZHJlblswXS5jaGFycy50cmltKCksXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogJ2NlbGwnLFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXJzZXIoc3RydWN0LmNoaWxkcmVuWzBdKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN3aXRjaChzdHJ1Y3QuY2hpbGRyZW5bMF0udHlwZSl7XG5cdFx0XHRcdFx0Y2FzZSAnY2VsbG5hbWUnOlxuXHRcdFx0XHRcdGNhc2UgJ3F1b3RlZF9jZWxsbmFtZSc6XG5cdFx0XHRcdFx0XHRzZWxmLmV2ZW50ID0ge1xuXHRcdFx0XHRcdFx0XHRuYW1lOiBzdHJ1Y3QuY2hpbGRyZW5bMF0uY2hhcnMudHJpbSgpLFxuXHRcdFx0XHRcdFx0XHR0eXBlOiAnY2VsbCcsXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHNlbGYuZXZlbnQgPSBwYXJzZXIoc3RydWN0LmNoaWxkcmVuWzBdKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cdFx0XHRcdGZvcihsZXQgY2hpbGQgb2Ygc3RydWN0LmNoaWxkcmVuKXtcblx0XHRcdFx0XHRpZihjaGlsZC50eXBlID09PSAnb3V0cHV0Jyl7XG5cdFx0XHRcdFx0XHRzZWxmLm91dHB1dCA9IHBhcnNlcihjaGlsZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGNoaWxkLnR5cGUgPT09ICdxdWFudGlmaWVyJyl7XG5cdFx0XHRcdFx0XHR2YXIgcmVzID0ge30sIHF1YW50ID0gcGFyc2VyKGNoaWxkKTtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ0ZvdW5kIHF1YW50aWZpZXInLCBxdWFudCk7XG5cdFx0XHRcdFx0XHRzd2l0Y2gocXVhbnQuY2hhcnMpe1xuXHRcdFx0XHRcdFx0XHRjYXNlICcqJzpcblx0XHRcdFx0XHRcdFx0XHRyZXMubWluID0gMDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJysnOlxuXHRcdFx0XHRcdFx0XHRcdHJlcy5taW4gPSAxO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRpZihxdWFudC5jaGFycy5pbmRleE9mKCcsJykgIT09IC0xKXtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBwaWVjZXMgPSBxdWFudC5jaGFycy5zcGxpdCgnLCcpO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYocGllY2VzWzBdKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzLm1pbiA9IE51bWJlcihwaWVjZXNbMF0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYocGllY2VzWzFdKXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzLm1heCA9IE51bWJlcihwaWVjZXNbMV0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBqdXN0IG9uZSBudW1iZXIsIGxpa2UgezQyfVxuXHRcdFx0XHRcdFx0XHRcdFx0cmVzLm1pbiA9IHJlcy5tYXggPSBOdW1iZXIocXVhbnQuY2hhcnMpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzZWxmLnF1YW50aWZpZXIgPSByZXM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGNoaWxkLnR5cGUgPT09ICdwaXBlJyl7XG5cdFx0XHRcdFx0XHRzZWxmLnBpcGUgPSBwYXJzZXIoY2hpbGQpLmNoYXJzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihjaGlsZC50eXBlID09PSAnY29uZCcpe1xuXHRcdFx0XHRcdFx0c2VsZi5jb25kID0gcGFyc2VyKGNoaWxkKS5jaGFycztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNlbGY7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRpdGVtX3dpdGhfY29tbWE6IHtcblx0XHRcdHR5cGU6ICdkb29yJyxcblx0XHRcdHJldDogMixcblx0XHR9XG5cdH1cbn0iLCJ2YXIgcGFyc2VyUGFja2FnZSA9IHJlcXVpcmUoJ29vb19vb19vJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcblxudmFyIHBhcnNlciA9IHBhcnNlclBhY2thZ2UuZ2V0X3BhcnNlcihjb25maWcpO1xudmFyIHBhcnNlZF9wb29sID0ge307XG5cbnZhciBnZXRfc3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uKHN0cnVjdCwgY2VsbHNfc2V0KXtcblx0aWYoc3RydWN0LmV2ZW50KSBzdHJ1Y3QgPSBzdHJ1Y3QuZXZlbnQ7XG5cdGlmKCFzdHJ1Y3QudHlwZSl7XG5cdFx0Y29uc29sZS53YXJuKCdObyB0eXBlJywgc3RydWN0KTtcblx0fVxuXHRzd2l0Y2goc3RydWN0LnR5cGUpe1xuXHRcdGNhc2UgJ3Jldm9sdmVyJzpcblx0XHRcdHN3aXRjaChzdHJ1Y3Quc3VidHlwZSl7XG5cdFx0XHRcdGNhc2UgJ3wnOlxuXHRcdFx0XHRcdGZvcih2YXIgaSA9IDA7aSA8IHN0cnVjdC5jaGlsZHJlbi5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0XHR2YXIgY2hpbGQgPSBzdHJ1Y3QuY2hpbGRyZW5baV07XG5cdFx0XHRcdFx0XHRpZihjaGlsZC5ldmVudCl7XG5cdFx0XHRcdFx0XHRcdGNoaWxkID0gY2hpbGQuZXZlbnQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRnZXRfc3Vic2NyaXB0aW9ucyhzdHJ1Y3QuY2hpbGRyZW5baV0sIGNlbGxzX3NldCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnPic6XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gc3RydWN0LmNoaWxkcmVuWzBdO1xuXHRcdFx0XHRcdGlmKGNoaWxkLmV2ZW50KXtcblx0XHRcdFx0XHRcdGNoaWxkID0gY2hpbGQuZXZlbnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdldF9zdWJzY3JpcHRpb25zKGNoaWxkLCBjZWxsc19zZXQpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRicmVhaztcblx0XHRjYXNlICdjZWxsJzpcblx0XHRcdGNlbGxzX3NldC5hZGQoc3RydWN0Lm5hbWUpO1xuXHRcdGJyZWFrO1xuXHR9XG5cdHJldHVybiBjZWxsc19zZXQ7XG59XG5cbnZhciBvdXRwdXQgPSBmdW5jdGlvbigpe1xuXG59XG5cbmZ1bmN0aW9uIGRyaXByZXMoZnVsbF9zdWNjZXNzID0gZmFsc2UsIHBhcnRpY3VsYXJfc3VjY2VzcyA9IGZhbHNlLCB2YWx1ZSl7XG5cdHJldHVybiB7ZnVsbF9zdWNjZXNzLCBwYXJ0aWN1bGFyX3N1Y2Nlc3MsIHZhbHVlfTtcbn1cblxudmFyIGlzX2x1Y2sgPSAoYSkgPT4ge1xuXHRyZXR1cm4gYS5mdWxsX3N1Y2Nlc3M7XG59XG52YXIgaGFzX3BhcnRpY3VsYXJfc3VjY2VzcyA9IChhKSA9PiB7XG5cdHJldHVybiBhLnBhcnRpY3VsYXJfc3VjY2Vzcztcbn1cbnZhciBnZXRfdmFsdWUgPSAoYSkgPT4ge1xuXHRyZXR1cm4gYS52YWx1ZTtcbn1cblxudmFyIGlzX211bHRpcGxlID0gKHF1YW50KSA9PiB7XG5cdHJldHVybiAhIShxdWFudCAmJiAocXVhbnQubWF4ICE9PSAxKSk7XG59XG5cbnZhciBpc19udW0gPSAoYSkgPT4gTnVtYmVyKGEpID09IGE7XG5cbnZhciBkZWZhdWx0U3RhdGVNdXRhdG9yID0gZnVuY3Rpb24oc3RhdGUsIGtleSwgdmFsKXtcblx0aWYodmFsICE9PSB1bmRlZmluZWQpe1xuXHRcdHN0YXRlW2tleV0gPSB2YWw7XG5cdH1cblx0cmV0dXJuIHN0YXRlO1xufVxuXG5cbnZhciBDaGV4ID0gZnVuY3Rpb24oc3RydWN0LCBsaW5raW5nID0ge30sIGNhbGxiYWNrcyA9IFtdKXtcblx0dGhpcy5zdHJ1Y3QgPSBzdHJ1Y3Q7XG5cdHRoaXMub25PdXRwdXQgPSBsaW5raW5nLm9uT3V0cHV0O1xuXHR0aGlzLm9uU3VjY2VzcyA9IGxpbmtpbmcub25TdWNjZXNzO1xuXHR0aGlzLnN0YXRlTXV0YXRvciA9IGxpbmtpbmcuc3RhdGVNdXRhdG9yID8gbGlua2luZy5zdGF0ZU11dGF0b3IgOiBkZWZhdWx0U3RhdGVNdXRhdG9yO1xuXHR0aGlzLmNhbGxiYWNrcyA9IGNhbGxiYWNrcztcblx0dGhpcy5zdGF0ZSA9IHt9O1xuXHR0aGlzLm1pcnJvciA9IHtcblx0XHRjaGlsZHJlbjogW10sXG5cdH07XG5cdHRoaXMucmVmcmVzaFN1YnNjcmlwdGlvbnMoKTtcblx0dGhpcy5hY3RpdmF0ZV9uZWVkZWRfZXZlbnRzKCk7XG59O1xuXG5DaGV4LnByb3RvdHlwZS5nZXRTdHJ1Y3QgPSBmdW5jdGlvbihzdHJ1Y3Qpe1xuXHRyZXR1cm4gdGhpcy5zdHJ1Y3Q7XG59XG5cbkNoZXgucHJvdG90eXBlLl9fcnVuQ2FsbGJhY2sgPSBmdW5jdGlvbihwaXBlLCB2YWx1ZSl7XG5cdHZhciBjYjtcblx0aWYoaXNfbnVtKHBpcGUpKXtcblx0XHQvLyBpdHMgbnVtYmVyXG5cdFx0LS1waXBlOyAvLyBiZWNhdXNlIGl0J3MgMS1iYXNlZFxuXHRcdGNiID0gdGhpcy5jYWxsYmFja3NbcGlwZV07XG5cdH0gZWxzZSB7XG5cdFx0Y2IgPSB0aGlzLmNhbGxiYWNrc1swXVtwaXBlXTtcblx0fVxuXHRpZighKGNiIGluc3RhbmNlb2YgRnVuY3Rpb24pKXtcblx0XHRjb25zb2xlLmVycm9yKCdDYWxsYmFjayBzaG91bGQgYmUgYSBmdW5jdGlvbiEnKTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5ld19zdGF0ZSA9IGNiKHRoaXMuc3RhdGUsIHZhbHVlKTtcblx0Ly9jb25zb2xlLmxvZygnQ291bnRpbmcgbmV3IHN0YXRlIGZyb20nLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKSwgbmV3X3N0YXRlKTtcblx0dGhpcy5zdGF0ZSA9IG5ld19zdGF0ZTtcblx0aWYoIXRoaXMuc3RhdGUgaW5zdGFuY2VvZiBPYmplY3Qpe1xuXHRcdGNvbnNvbGUuZXJyb3IoJ05ldyBzdGF0ZSBzaG91bGQgYmUgYW4gb2JqZWN0IHRvbyEnLCB0aGlzLnN0YXRlKTtcblx0fVxufVxuXG5DaGV4LnByb3RvdHlwZS5hYnNvcmIgPSBmdW5jdGlvbihzdHJ1Y3QsIG1pcnJvcl9zdHJ1Y3QsIGNlbGxuYW1lLCB2YWx1ZSl7XG5cdC8vY29uc29sZS5sb2coJ2NoZWNraW5nIGNoaWxkcmVuJywgc3RydWN0LmNoaWxkcmVuKTtcblx0dmFyIHJlcztcblx0dmFyIGNoZWNrID0gKGkpID0+IHtcblx0XHRsZXQgY2hpbGQgPSBzdHJ1Y3QuY2hpbGRyZW5baV07XG5cdFx0aWYoY2hpbGQuZXZlbnQpe1xuXHRcdFx0Y2hpbGQgPSBjaGlsZC5ldmVudDtcblx0XHR9XG5cdFx0c3dpdGNoKGNoaWxkLnR5cGUpe1xuXHRcdFx0Y2FzZSAnY2VsbCc6XG5cdFx0XHRjYXNlICdmdW5jJzpcblx0XHRcdFx0aWYoY2hpbGQubmFtZSA9PT0gY2VsbG5hbWUpe1xuXHRcdFx0XHRcdHZhciBjb25kID0gc3RydWN0LmNoaWxkcmVuW2ldLmNvbmQ7XG5cdFx0XHRcdFx0aWYoY29uZCl7XG5cdFx0XHRcdFx0XHQtLWNvbmQ7IC8vIGJlY2F1c2UgaXQncyAxLWJhc2VkXG5cdFx0XHRcdFx0XHRpZighdGhpcy5jYWxsYmFja3NbY29uZF0pe1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdObyBjYWxsYmFjayBmb3IgY29uZDonLCBjb25kKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZhciBsYWttdXMgPSB0aGlzLmNhbGxiYWNrc1tjb25kXSh0aGlzLnN0YXRlLCB2YWx1ZSk7XG5cdFx0XHRcdFx0XHRpZighbGFrbXVzKSByZXR1cm4gZHJpcHJlcygpO1xuXHRcdFx0XHRcdH0gXG5cdFx0XHRcdFx0dmFyIHN0YXRlID0gbWlycm9yX3N0cnVjdC5jaGlsZHJlbltpXTtcblx0XHRcdFx0XHRcdHN0YXRlLmNvdW50ZXIgPSBzdGF0ZS5jb3VudGVyID8gc3RhdGUuY291bnRlciArIDEgOiAxO1xuXHRcdFx0XHRcdHZhciBwaXBlID0gc3RydWN0LmNoaWxkcmVuW2ldLnBpcGU7XG5cdFx0XHRcdFx0dmFyIHF1YW50ID0gc3RydWN0LmNoaWxkcmVuW2ldLnF1YW50aWZpZXI7XG5cdFx0XHRcdFx0aWYocXVhbnQgJiYgcXVhbnQubWF4ICE9PSB1bmRlZmluZWQgJiYgcXVhbnQubWF4IDwgc3RhdGUuY291bnRlcil7XG5cdFx0XHRcdFx0XHQvLyBjb3VudGVyIGV4Y2VlZGVkXG5cdFx0XHRcdFx0XHRyZXR1cm4gZHJpcHJlcygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihwaXBlKXtcblx0XHRcdFx0XHRcdHRoaXMuX19ydW5DYWxsYmFjayhwaXBlLCB2YWx1ZSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIHJlZ3VsYXIgam9pblxuXHRcdFx0XHRcdFx0dmFyIGFzX2FycmF5ID0gaXNfbXVsdGlwbGUocXVhbnQpO1xuXHRcdFx0XHRcdFx0aWYoYXNfYXJyYXkpe1xuXHRcdFx0XHRcdFx0XHRpZighdGhpcy5zdGF0ZVtjZWxsbmFtZV0pe1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc3RhdGVbY2VsbG5hbWVdID0gW107XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dGhpcy5zdGF0ZVtjZWxsbmFtZV0ucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnN0YXRlTXV0YXRvcih0aGlzLnN0YXRlLCBjZWxsbmFtZSwgdmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihxdWFudCl7XG5cdFx0XHRcdFx0XHRpZihzdGF0ZS5jb3VudGVyID49IHF1YW50Lm1pbil7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBkcmlwcmVzKHRydWUsIHRydWUsIHZhbHVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBkcmlwcmVzKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBcblx0XHRcdFx0XHRyZXR1cm4gZHJpcHJlcyh0cnVlLCB0cnVlLCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAncmV2b2x2ZXInOlxuXHRcdFx0XHRpZighbWlycm9yX3N0cnVjdC5jaGlsZHJlbltpXSl7XG5cdFx0XHRcdFx0bWlycm9yX3N0cnVjdC5jaGlsZHJlbltpXSA9IHtcblx0XHRcdFx0XHRcdGNoaWxkcmVuOiBbXSxcblx0XHRcdFx0XHRcdC8vdHlwZTogY2hpbGQuc3VidHlwZSxcblx0XHRcdFx0XHRcdC8vcGFyZW50OiBtaXJyb3Jfc3RydWN0LFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcy5hYnNvcmIoY2hpbGQsIG1pcnJvcl9zdHJ1Y3QuY2hpbGRyZW5baV0sIGNlbGxuYW1lLCB2YWx1ZSk7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIGRyaXByZXMoKTtcblx0fVxuXHR2YXIgb3V0cHV0ID0gKG91dHB1dCwgdmFsKSA9PiB7XG5cdFx0dmFyIHRpdGxlID0gb3V0cHV0LnRpdGxlO1xuXHRcdGlmKG91dHB1dC5waXBlcy5sZW5ndGgpe1xuXHRcdFx0Zm9yKGxldCBjYl9udW0gb2Ygb3V0cHV0LnBpcGVzKXtcblx0XHRcdFx0aWYoIXRoaXMuY2FsbGJhY2tzW2NiX251bSAtIDFdKXtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdObyBjYWxsYmFjayBwcm92aWRlZCAtICcsIGNiX251bSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFsID0gdGhpcy5jYWxsYmFja3NbY2JfbnVtIC0gMV0odGhpcy5zdGF0ZSwgdmFsKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5vbk91dHB1dCh0aXRsZSwgdmFsKTtcblx0fVxuXHRpZighc3RydWN0LnN1YnR5cGUpe1xuXHRcdHN0cnVjdCA9IHN0cnVjdC5ldmVudDtcblx0fVxuXHR2YXIgbHVja19oYXBlbm5lZCA9IGZhbHNlO1xuXHRzd2l0Y2goc3RydWN0LnN1YnR5cGUpe1xuXHRcdGNhc2UgJ3wnOlxuXHRcdFx0Zm9yKGxldCBpIGluIHN0cnVjdC5jaGlsZHJlbil7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2NoZWNraW5nJywgc3RydWN0LmNoaWxkcmVuW2ldKTtcblx0XHRcdFx0cmVzID0gY2hlY2soaSk7XG5cdFx0XHRcdGlmKGlzX2x1Y2socmVzKSl7XG5cdFx0XHRcdFx0aWYoc3RydWN0LmNoaWxkcmVuW2ldLm91dHB1dCl7XG5cdFx0XHRcdFx0XHRvdXRwdXQoc3RydWN0LmNoaWxkcmVuW2ldLm91dHB1dCwgZ2V0X3ZhbHVlKHJlcykpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZHJpcHJlcyh0cnVlLCB0cnVlLCB2YWx1ZSk7O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0YnJlYWs7XG5cdFx0Y2FzZSAnLyc6XG5cdFx0XHRmb3IobGV0IGkgaW4gc3RydWN0LmNoaWxkcmVuKXtcblx0XHRcdFx0aWYobWlycm9yX3N0cnVjdC5zdWNjZXNzZnVsX2JyYW5jaCAhPT0gdW5kZWZpbmVkICYmIG1pcnJvcl9zdHJ1Y3Quc3VjY2Vzc2Z1bF9icmFuY2ggIT09IGkpe1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ25vdyB3ZSBza2lwIGl0IScsIGkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJlcyA9IGNoZWNrKGkpO1xuXHRcdFx0XHRpZihoYXNfcGFydGljdWxhcl9zdWNjZXNzKHJlcykpe1xuXHRcdFx0XHRcdG1pcnJvcl9zdHJ1Y3Quc3VjY2Vzc2Z1bF9icmFuY2ggPSBpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGlzX2x1Y2socmVzKSl7XG5cdFx0XHRcdFx0aWYoc3RydWN0LmNoaWxkcmVuW2ldLm91dHB1dCl7XG5cdFx0XHRcdFx0XHRvdXRwdXQoc3RydWN0LmNoaWxkcmVuW2ldLm91dHB1dCwgZ2V0X3ZhbHVlKHJlcykpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZHJpcHJlcyh0cnVlLCB0cnVlLCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYobWlycm9yX3N0cnVjdC5zdWNjZXNzZnVsX2JyYW5jaCA9PT0gaSl7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRicmVhaztcblx0XHRjYXNlICcmJzpcblx0XHRcdG1pcnJvcl9zdHJ1Y3QuY291bnRfYWxsX2NvdW50ZXIgPSBtaXJyb3Jfc3RydWN0LmNvdW50X2FsbF9jb3VudGVyIHx8IDA7XG5cdFx0XHRtaXJyb3Jfc3RydWN0LmNvdW50X2FsbF9lYWNoX2V2ZW50ID0gbWlycm9yX3N0cnVjdC5jb3VudF9hbGxfZWFjaF9ldmVudCB8fCB7fTtcblx0XHRcdGZvcihsZXQgaSBpbiBzdHJ1Y3QuY2hpbGRyZW4pe1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjaGVja2luZycsIHN0cnVjdC5jaGlsZHJlbltpXSwgaSwgbWlycm9yX3N0cnVjdC5jb3VudF9hbGxfY291bnRlcik7XG5cdFx0XHRcdHJlcyA9IGNoZWNrKGkpO1xuXHRcdFx0XHRpZihpc19sdWNrKHJlcykpe1xuXHRcdFx0XHRcdGx1Y2tfaGFwZW5uZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGlmKHN0cnVjdC5jaGlsZHJlbltpXS5vdXRwdXQpe1xuXHRcdFx0XHRcdFx0b3V0cHV0KHN0cnVjdC5jaGlsZHJlbltpXS5vdXRwdXQsIGdldF92YWx1ZShyZXMpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoIW1pcnJvcl9zdHJ1Y3QuY291bnRfYWxsX2VhY2hfZXZlbnRbaV0pe1xuXHRcdFx0XHRcdFx0bWlycm9yX3N0cnVjdC5jb3VudF9hbGxfY291bnRlcisrO1xuXHRcdFx0XHRcdFx0aWYobWlycm9yX3N0cnVjdC5jb3VudF9hbGxfY291bnRlciA9PT0gc3RydWN0LmNoaWxkcmVuLmxlbmd0aCl7XG5cdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ0Z1bGwgc3VjY2VzcyEnKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGRyaXByZXModHJ1ZSwgdHJ1ZSwgdmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtaXJyb3Jfc3RydWN0LmNvdW50X2FsbF9lYWNoX2V2ZW50W2ldID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdGJyZWFrO1xuXHRcdGNhc2UgJz4nOlxuXHRcdFx0dmFyIHBvcyA9IG1pcnJvcl9zdHJ1Y3QucG9zIHx8IDA7XG5cdFx0XHRmb3IobGV0IGkgPSBwb3M7IDsgaSsrKXtcblx0XHRcdFx0aWYoIXN0cnVjdC5jaGlsZHJlbltpXSl7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmVzID0gY2hlY2soaSk7XG5cdFx0XHRcdHZhciBzdGF0ZSA9IG1pcnJvcl9zdHJ1Y3QuY2hpbGRyZW5baV07XG5cdFx0XHRcdFx0c3RhdGUuY291bnRlciA9IHN0YXRlLmNvdW50ZXIgfHwgMDtcblx0XHRcdFx0aWYoaXNfbHVjayhyZXMpKXtcblx0XHRcdFx0XHRsdWNrX2hhcGVubmVkID0gdHJ1ZTtcblx0XHRcdFx0XHRpZihtaXJyb3Jfc3RydWN0LmNvdW50ZXIgPT09IHVuZGVmaW5lZCl7XG5cdFx0XHRcdFx0XHRtaXJyb3Jfc3RydWN0LmNvdW50ZXIgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQrK21pcnJvcl9zdHJ1Y3QuY291bnRlcjtcblx0XHRcdFx0XHRpZihzdHJ1Y3QuY2hpbGRyZW5baV0ub3V0cHV0KXtcblx0XHRcdFx0XHRcdG91dHB1dChzdHJ1Y3QuY2hpbGRyZW5baV0ub3V0cHV0LCBnZXRfdmFsdWUocmVzKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBuZXh0X3BvcyA9IHBvcyArIDE7XG5cdFx0XHRcdFx0aWYoIXN0cnVjdC5jaGlsZHJlbltuZXh0X3Bvc10pe1xuXHRcdFx0XHRcdFx0Ly8gcmV2b2x2ZXIgZmluaXNoZWRcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coc3RydWN0LmNoaWxkcmVuLCBuZXh0X3BvcywgJz4gUkVWT0xWRVIgU1VDQ0VTUyEnKTtcblx0XHRcdFx0XHRcdHJldHVybiBkcmlwcmVzKHRydWUsIHRydWUsIHZhbHVlKTs7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmKCFzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllciBcblx0XHRcdFx0XHRcdFx0XHR8fCBtaXJyb3Jfc3RydWN0LmNvdW50ZXIgPiBzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllci5tYXgpe1xuXHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKHN0cnVjdC5jaGlsZHJlbltpXS5xdWFudGlmaWVyLCBtaXJyb3Jfc3RydWN0LmNvdW50ZXIpO1xuXHRcdFx0XHRcdFx0XHQvLyBpZiBpdCdzIGZpbml0ZVxuXHRcdFx0XHRcdFx0XHRwb3MgPSBpO1xuXHRcdFx0XHRcdFx0XHQrK3Bvcztcblx0XHRcdFx0XHRcdFx0bWlycm9yX3N0cnVjdC5wb3MgPSBwb3M7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmKFxuXHRcdFx0XHRcdFx0XHRzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllciBcblx0XHRcdFx0XHRcdFx0JiYgc3RydWN0LmNoaWxkcmVuW2ldLnF1YW50aWZpZXIubWluICE9PSAwXG5cdFx0XHRcdFx0XHRcdCYmIHN0YXRlLmNvdW50ZXIgPCBzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllci5taW5cblx0XHRcdFx0XHQpe1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKCFzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllciB8fCAhaXNfbXVsdGlwbGUoc3RydWN0LmNoaWxkcmVuW2ldLnF1YW50aWZpZXIpKXtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzaG91bGQgYnJlYWsnLCBzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllcik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoXG5cdFx0XHRcdFx0XHRzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllciBcblx0XHRcdFx0XHRcdCYmIHN0cnVjdC5jaGlsZHJlbltpXS5xdWFudGlmaWVyLm1heCAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdFx0XHQmJiBtaXJyb3Jfc3RydWN0LmNvdW50ZXIgPCBzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllci5tYXhcblx0XHRcdFx0KXtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKTtcblx0XHRcdFx0XHQvLyBzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllci5tYXggPCBtaXJyb3Jfc3RydWN0LmNvdW50ZXJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzaG91bGQgYnJlYWsnLCBzdHJ1Y3QuY2hpbGRyZW5baV0ucXVhbnRpZmllcik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS5sb2coJ1Vua25vd24gcmV2b2x2ZXIgdHlwZTonLCBzdHJ1Y3Quc3VidHlwZSk7XG5cdFx0YnJlYWs7XG5cdH1cblx0cmV0dXJuIGRyaXByZXMoZmFsc2UsIGx1Y2tfaGFwZW5uZWQpO1xufVxuXG5DaGV4LnByb3RvdHlwZS5yZWZyZXNoU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uKCl7XG5cdHZhciBzdWJzY3IgPSBuZXcgU2V0O1xuXHR0aGlzLnN1YnNjcmlwdGlvbnMgPSBnZXRfc3Vic2NyaXB0aW9ucyh0aGlzLmdldFN0cnVjdCgpLCBzdWJzY3IpO1xufVxuXG5DaGV4LnByb3RvdHlwZS5zbGVlcCA9IGZ1bmN0aW9uKCl7XG5cdHRoaXMubWlycm9yID0ge1xuXHRcdGNoaWxkcmVuOiBbXSxcblx0fTtcblx0dGhpcy5zdGF0ZSA9IHt9O1xuXHR0aGlzLnNsZWVwaW5nID0gdHJ1ZTtcbn1cblxuQ2hleC5wcm90b3R5cGUuYXdha2UgPSBmdW5jdGlvbigpe1xuXHR0aGlzLnNsZWVwaW5nID0gZmFsc2U7XG59XG5cbkNoZXgucHJvdG90eXBlLmFjdGl2YXRlX25lZWRlZF9ldmVudHMgPSBmdW5jdGlvbigpe1xuXHR2YXIgY2VsbHNfYW5kX2Z1bmNzID0gdGhpcy5nZXRfYWN0aXZlX2NlbGxzX2FuZF9mdW5jcyhudWxsLCBudWxsLCB0aGlzLnN0cnVjdCwgdGhpcy5taXJyb3IpO1xuXHR0aGlzLm5lZWRlZF9ldmVudHMgPSBjZWxsc19hbmRfZnVuY3NbMF07XG5cdHZhciBjYiA9IGZ1bmN0aW9uKGZuYywgZG9uZSwgdmFsdWUpe1xuXHRcdHRoaXMuZHJpcChmbmMubmFtZSwgdmFsdWUpO1xuXHR9XG5cdGZvcihsZXQgZm5jIG9mIGNlbGxzX2FuZF9mdW5jc1sxXSl7XG5cdFx0dmFyIHN1YnR5cGUgPSBmbmMuc3VidHlwZTtcblx0XHRpZihmbmMubWlycm9yLnJ1bil7XG5cdFx0XHQvLyBhbHJlYWR5IHJ1blxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmKHN1YnR5cGUgPT09ICdzeW5jJyl7XG5cdFx0XHR2YXIgdmFsdWUgPSB0aGlzLmNhbGxiYWNrc1swXVtmbmMubmFtZV0odGhpcy5zdGF0ZSk7XG5cdFx0XHRjYi5jYWxsKHRoaXMsIGZuYywgdHJ1ZSwgdmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZighdGhpcy5jYWxsYmFja3NbMF0pe1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdZb3Ugc2hvdWxkIHByb3ZpZGUgYSBjYWxsYmFjayBvYmplY3Qgd2l0aCBcIicgKyBmbmMubmFtZSArICdcIiBrZXkhJyk7XG5cdFx0XHR9XG5cdFx0XHRpZighKHRoaXMuY2FsbGJhY2tzWzBdW2ZuYy5uYW1lXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0V4cGVjdGluZyAnICsgZm5jLm5hbWUgKyAnIHRvIGJlIGEgZnVuY3Rpb24sIGdpdmVuJywgdHlwZW9mIHRoaXMuY2FsbGJhY2tzWzBdW2ZuYy5uYW1lXSwgJ2luc3RlYWQhJyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmNhbGxiYWNrc1swXVtmbmMubmFtZV0odGhpcy5zdGF0ZSwgY2IuYmluZCh0aGlzLCBmbmMpKTtcblx0XHR9XG5cdFx0Zm5jLm1pcnJvci5ydW4gPSB0cnVlO1xuXHR9XG5cdC8vIEB0b2RvOiBjaGVjayBmb3IgbGlua2VkIGNoZXgnIGFuZCBhY3RpdmF0ZSB0aGVtXG59XG5cbkNoZXgucHJvdG90eXBlLmdldF9hY3RpdmVfY2VsbHNfYW5kX2Z1bmNzID0gZnVuY3Rpb24ocGFyZW50LCBwYXJlbnRfbWlycm9yLCBicmFuY2gsIG1pcnJvciwgY2VsbHMgPSBuZXcgU2V0LCBmdW5jcyA9IG5ldyBTZXQpe1xuXHR2YXIgcmVzID0gW107XG5cdGlmKGJyYW5jaC50eXBlID09PSAnZnVuYycpe1xuXHRcdGNlbGxzLmFkZChicmFuY2gubmFtZSk7XG5cdFx0ZnVuY3MuYWRkKE9iamVjdC5hc3NpZ24oe3BhcmVudF9taXJyb3I6IHBhcmVudF9taXJyb3IsIG1pcnJvcjogbWlycm9yLCBwYXJlbnQ6IHBhcmVudH0sIGJyYW5jaCkpO1xuXHRcdHJldHVybiBbY2VsbHMsIGZ1bmNzXTtcblx0fVxuXHRpZihicmFuY2gudHlwZSA9PT0gJ3Jldm9sdmVyJyl7XG5cdFx0aWYoIW1pcnJvci5jaGlsZHJlbil7XG5cdFx0XHRtaXJyb3IuY2hpbGRyZW4gPSBbXTtcblx0XHR9XG5cdFx0c3dpdGNoKGJyYW5jaC5zdWJ0eXBlKXtcblx0XHRcdGNhc2UgJz4nOlxuXHRcdFx0XHRtaXJyb3IucG9zID0gbWlycm9yLnBvcyB8fCAwO1xuXHRcdFx0XHRpZighYnJhbmNoLmNoaWxkcmVuW21pcnJvci5wb3NdKXtcblx0XHRcdFx0XHQvLyByZXZvbHZlciBmaW5pc2hlZFxuXHRcdFx0XHRcdHJldHVybiBbY2VsbHMsIGZ1bmNzXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dmFyIHAgPSBtaXJyb3IucG9zO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYoIW1pcnJvci5jaGlsZHJlbltwXSkgbWlycm9yLmNoaWxkcmVuW3BdID0ge2NoaWxkcmVuOiBbXX07XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygndHJhdmVyc2luZyA+JywgYnJhbmNoLmNoaWxkcmVuLCBwKTtcblx0XHRcdFx0XHR0aGlzLmdldF9hY3RpdmVfY2VsbHNfYW5kX2Z1bmNzKGJyYW5jaCwgbWlycm9yLCBicmFuY2guY2hpbGRyZW5bcF0sIG1pcnJvci5jaGlsZHJlbltwXSwgY2VsbHMsIGZ1bmNzKTtcblx0XHRcdFx0XHRwKys7XG5cdFx0XHRcdH0gd2hpbGUoXG5cdFx0XHRcdFx0KFxuXHRcdFx0XHRcdFx0YnJhbmNoLmNoaWxkcmVuW3AgLSAxXSAmJiAhKCFicmFuY2guY2hpbGRyZW5bcCAtIDFdLnF1YW50aWZpZXIgfHwgYnJhbmNoLmNoaWxkcmVuW3AtMV0ubWF4KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0XHR8fFxuXHRcdFx0XHRcdGJyYW5jaC5jaGlsZHJlbltwIC0gMV0udHlwZSA9PT0gJ2Z1bmMnXG5cdFx0XHRcdClcblx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Zm9yKGxldCBwIGluIGJyYW5jaC5jaGlsZHJlbil7XG5cdFx0XHRcdFx0aWYoIW1pcnJvci5jaGlsZHJlbltwXSl7XG5cdFx0XHRcdFx0XHRtaXJyb3IuY2hpbGRyZW5bcF0gPSB7XG5cdFx0XHRcdFx0XHRcdGNoaWxkcmVuOiBbXSxcblx0XHRcdFx0XHRcdFx0Ly9wYXJlbnQ6IG1pcnJvcixcblx0XHRcdFx0XHRcdFx0Ly90eXBlOiBicmFuY2guc3VidHlwZSxcblx0XHRcdFx0XHRcdFx0Ly9pZDogKyttaXJpZHNcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuZ2V0X2FjdGl2ZV9jZWxsc19hbmRfZnVuY3MoYnJhbmNoLCBtaXJyb3IsIGJyYW5jaC5jaGlsZHJlbltwXSwgXG5cdFx0XHRcdFx0bWlycm9yLmNoaWxkcmVuW3BdLCBjZWxscywgZnVuY3MpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ0FjdGl2YXRlIGVhY2ggcGFydCBvZiByZXZvbHZlcicpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGlmKCFicmFuY2guZXZlbnQpe1xuXHRcdFx0Y29uc29sZS5sb2coJ1NvIHdoYXQgaXMgaXQ/JywgYnJhbmNoKTtcblx0XHR9XG5cdFx0c3dpdGNoKGJyYW5jaC5ldmVudC50eXBlKXtcblx0XHRcdGNhc2UgJ2NlbGwnOlxuXHRcdFx0XHRjZWxscy5hZGQoYnJhbmNoLmV2ZW50Lm5hbWUpO1xuXHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdyZXZvbHZlcic6XG5cdFx0XHRcdC8qaWYoIW1pcnJvci5jaGlsZHJlblswXSl7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ35+fn5+fn4gQUREIENISUxEIFRPIE1JUlJPUl9fX19fX19fX19fJywgbWlyaWRzKzEsIGJyYW5jaCwgbWlycm9yKTtcblx0XHRcdFx0XHRtaXJyb3IuY2hpbGRyZW5bMF0gPSB7XG5cdFx0XHRcdFx0XHRjaGlsZHJlbjogW10sXG5cdFx0XHRcdFx0XHRwYXJlbnQ6IG1pcnJvcixcblx0XHRcdFx0XHRcdHR5cGU6IGJyYW5jaC5ldmVudC5zdWJ0eXBlLFxuXHRcdFx0XHRcdFx0aWQ6ICsrbWlyaWRzXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSovXG5cdFx0XHRcdHRoaXMuZ2V0X2FjdGl2ZV9jZWxsc19hbmRfZnVuY3MoYnJhbmNoLCBtaXJyb3IsIGJyYW5jaC5ldmVudCwgXG5cdFx0XHRcdG1pcnJvciwgY2VsbHMsIGZ1bmNzKTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gW2NlbGxzLCBmdW5jc107XG59XG5cbkNoZXgucHJvdG90eXBlLmRyaXAgPSBmdW5jdGlvbihjZWxsbmFtZSwgdmFsKXtcblx0Ly9jb25zb2xlLmxvZygnZHJpcHBpbmcnLCBjZWxsbmFtZSk7XG5cdGlmKHRoaXMuZmluaXNoZWQpe1xuXHRcdC8vY29uc29sZS5sb2coJ05vIHdheSwgaXRcXCdzIG92ZXIhJyk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmKHRoaXMuc2xlZXBpbmcpe1xuXHRcdC8vY29uc29sZS5sb2coJ05vLCBJXFwnbSBzbGVlcGluZyEnKTtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYoIXRoaXMubmVlZGVkX2V2ZW50cy5oYXMoY2VsbG5hbWUpKXtcblx0XHQvL2NvbnNvbGUubG9nKCdXZSBhcmUgbm90IGludGVyZXN0ZWQgaW4gdGhpcyBldmVudCBub3cnLCBjZWxsbmFtZSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciByZXMgPSB0aGlzLmFic29yYih0aGlzLnN0cnVjdCwgdGhpcy5taXJyb3IsIGNlbGxuYW1lLCB2YWwpO1xuXHR0aGlzLmFjdGl2YXRlX25lZWRlZF9ldmVudHMoKTtcblx0Ly9jb25zb2xlLmxvZygnX19fX2RyaXBwZWQnLCB0aGlzLm5lZWRlZF9ldmVudHMpO1xuXHRpZihpc19sdWNrKHJlcykpe1xuXHRcdC8vIHBhdHRlcm4gZG9uZVxuXHRcdC8vY29uc29sZS5sb2coJ19fX19fX19fIEZJTklTSCEnKTtcblx0XHR0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcblx0XHR0aGlzLm1pcnJvciA9IHtcblx0XHRcdGNoaWxkcmVuOiBbXSxcblx0XHR9O1xuXHRcdGlmKHRoaXMub25TdWNjZXNzKXtcblx0XHRcdHRoaXMub25TdWNjZXNzKCk7XG5cdFx0fVxuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRjcmVhdGU6IGZ1bmN0aW9uKGNoZV9leHByZXNzaW9uLCBsaW5raW5nLCAuLi5jYWxsYmFja3Mpe1xuXHRcdHZhciBzdHJ1Y3Q7XG5cdFx0aWYocGFyc2VkX3Bvb2xbY2hlX2V4cHJlc3Npb25dKXtcblx0XHRcdHN0cnVjdCA9IHBhcnNlZF9wb29sW2NoZV9leHByZXNzaW9uXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RydWN0ID0gcGFyc2VkX3Bvb2xbY2hlX2V4cHJlc3Npb25dID0gcGFyc2VyKGNoZV9leHByZXNzaW9uKTtcblx0XHR9XG5cdFx0Ly9jb25zb2xlLmxvZygnU2VtJywgc3RydWN0LnNlbWFudGljcyk7XG5cdFx0dmFyIHN0YXRlID0gbmV3IENoZXgoc3RydWN0LnNlbWFudGljcywgbGlua2luZywgY2FsbGJhY2tzKTtcblx0XHRyZXR1cm4gc3RhdGU7XG5cdH0sXG59IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcInYzZ28xRFwiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pIiwidmFyIEZpcmVyYSA9IHJlcXVpcmUoJy4uL2ZpcmVyYScpO1xyXG52YXIgY2hlID0gcmVxdWlyZSgnc2hjaGUnKTtcclxudmFyIE96ZW5mYW50ID0gcmVxdWlyZSgnb3plbmZhbnQnKTtcclxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xyXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG5cclxudmFyIGlkID0gYSA9PiBhO1xyXG52YXIgbm90ID0gYSA9PiAhYTtcclxudmFyIGFsd2F5cyA9IGZ1bmN0aW9uKGEpeyBcclxuXHRyZXR1cm4gZnVuY3Rpb24oKXtcclxuXHRcdHJldHVybiBhO1xyXG5cdH1cclxufVxyXG5cclxuXHJcblx0dmFyIHR0aW1lcl9wb29sID0ge307XHJcblx0dmFyIHR0aW1lciA9IHtcclxuXHRcdFx0c3RhcnQ6IGZ1bmN0aW9uKGtleSl7XHJcblx0XHRcdFx0XHRpZighdHRpbWVyX3Bvb2xba2V5XSl7XHJcblx0XHRcdFx0XHRcdFx0dHRpbWVyX3Bvb2xba2V5XSA9IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0c3VtOiAwLFxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHR0aW1lcl9wb29sW2tleV0uY3VycmVudCA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRzdG9wOiBmdW5jdGlvbihrZXkpe1xyXG5cdFx0XHRcdFx0dHRpbWVyX3Bvb2xba2V5XS5zdW0gKz0gcGVyZm9ybWFuY2Uubm93KCkgLSB0dGltZXJfcG9vbFtrZXldLmN1cnJlbnQ7XHJcblx0XHRcdH0sXHJcblx0fVxyXG5cclxudmFyIGRlY29yYXRlID0gKGZuYywgbXNnKSA9PiB7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCl7XHJcblx0XHRjb25zb2xlLmxvZyhcIkBcIiwgbXNnLCBhcmd1bWVudHMpO1xyXG5cdFx0cmV0dXJuIGZuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG5cdH1cclxufVxyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblx0d2luZG93LnBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlIHx8IHt9O1xyXG5cdHBlcmZvcm1hbmNlLm5vdyA9IChmdW5jdGlvbigpIHtcclxuXHQgIHJldHVybiBwZXJmb3JtYW5jZS5ub3cgICAgICAgfHxcclxuXHRcdFx0IHBlcmZvcm1hbmNlLm1vek5vdyAgICB8fFxyXG5cdFx0XHQgcGVyZm9ybWFuY2UubXNOb3cgICAgIHx8XHJcblx0XHRcdCBwZXJmb3JtYW5jZS5vTm93ICAgICAgfHxcclxuXHRcdFx0IHBlcmZvcm1hbmNlLndlYmtpdE5vdyB8fFxyXG5cdFx0XHQgZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcclxuXHR9KSgpO1xyXG5cdHZhciBwb29sID0ge307XHJcblx0dmFyIFRpbWVyID0gZnVuY3Rpb24obmFtZSl7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy5zdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cdFx0dGhpcy50aW1lID0gMDtcclxuXHR9O1xyXG5cclxuXHRUaW1lci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpe1xyXG5cdFx0aWYodGhpcy5wYXVzZWQpe1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKCdhbHJlYWR5IHBhdXNlZCEnKTtcclxuXHRcdH1cclxuXHRcdHZhciBlbmQgID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblx0XHR0aGlzLnRpbWUgPSB0aGlzLnRpbWUgKyAoZW5kIC0gdGhpcy5zdGFydCk7XHJcblx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XHJcblx0fVxyXG5cdFRpbWVyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpe1xyXG5cdFx0aWYoIXRoaXMucGF1c2VkKXtcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnSVMgTk9UIHBhdXNlZCEnKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHRcdHRoaXMucGF1c2VkID0gZmFsc2U7XHJcblx0fVxyXG5cdFRpbWVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKXtcclxuXHRcdGlmKCF0aGlzLnBhdXNlZCl7XHJcblx0XHRcdHZhciBlbmQgID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblx0XHRcdHRoaXMudGltZSA9IHRoaXMudGltZSArIChlbmQgLSB0aGlzLnN0YXJ0KTtcclxuXHRcdH1cclxuXHRcdHRoaXMuc3RvcHBlZCA9IHRydWU7XHJcblx0XHRjb25zb2xlLmxvZyh0aGlzLm5hbWUsICd0b29rJywgdGhpcy50aW1lLCAnbXMnKTtcclxuXHRcdGRlbGV0ZSBwb29sW3RoaXMubmFtZV07XHJcblx0fVxyXG5cclxuXHR3aW5kb3cudGltZXIgPSBmdW5jdGlvbihuYW1lKSB7XHJcblx0XHRpZihuYW1lID09ICdzdG9wX2FsbCcpe1xyXG5cdFx0XHRmb3IodmFyIGkgaW4gcG9vbCl7XHJcblx0XHRcdFx0cG9vbFtpXS5zdG9wKCk7XHJcblx0XHRcdFx0ZGVsZXRlIHBvb2xbaV07XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYoIXBvb2xbbmFtZV0gfHwgKHBvb2xbbmFtZV0uc3RvcHBlZCA9PSB0cnVlKSl7XHJcblx0XHRcdC8vY29uc29sZS5sb2coJ2NyZWF0aW5nIG5ldyB0aW1lcicsIG5hbWUpO1xyXG5cdFx0XHRwb29sW25hbWVdID0gbmV3IFRpbWVyKG5hbWUpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHBvb2xbbmFtZV07XHJcblx0fTtcclxufSkoKVxyXG5cclxudmFyIHByb3AgPSAoa2V5KSA9PiB7XHJcblx0cmV0dXJuIChhKSA9PiB7XHJcblx0XHRyZXR1cm4gYSBpbnN0YW5jZW9mIE9iamVjdCA/IGFba2V5XSA6IHVuZGVmaW5lZDtcclxuXHR9XHJcbn1cclxudmFyIGFkZGVyID0gKGEpID0+IHtcclxuXHRyZXR1cm4gKGIpID0+IHtcclxuXHRcdHJldHVybiBiK2E7XHJcblx0fVxyXG59XHJcbnZhciBzZWNvbmQgPSAoX18sIGEpID0+IGE7XHJcblxyXG52YXIgYXMgPSAocHJvcE5hbWUsIGRlZlZhbHVlcyA9IHt9KSA9PiB7XHJcblx0cmV0dXJuICh2YWwpID0+IHtcclxuXHRcdGlmKHZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcblx0XHR2YXIgb2JqID0ge307XHJcblx0XHRvYmpbcHJvcE5hbWVdID0gdmFsO1xyXG5cdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24ob2JqLCBkZWZWYWx1ZXMpO1xyXG5cdH1cclxufVxyXG5cclxudmFyIGluZCA9IGZ1bmN0aW9uKGluZGV4ID0gMCl7XHJcblx0cmV0dXJuIChhcnIpID0+IHtcclxuXHRcdHJldHVybiBhcnIgaW5zdGFuY2VvZiBPYmplY3QgPyBhcnJbaW5kZXhdIDogbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcbndpbmRvdy50cmlnZ2VyRW50ZXIgPSAoZWwpID0+IHtcclxuXHR2YXIgZSA9ICQuRXZlbnQoXCJrZXl1cFwiKTtcclxuXHRlLndoaWNoID0gMTM7IC8vY2hvb3NlIHRoZSBvbmUgeW91IHdhbnRcclxuXHRlLmtleUNvZGUgPSAxMztcclxuXHRlbC50cmlnZ2VyKGUpO1xyXG59XHJcblxyXG52YXIgZnJvbU1hcCA9IGZ1bmN0aW9uKG1hcCwgZGVmKXtcclxuXHRyZXR1cm4gKHZhbCkgPT4ge1xyXG5cdFx0cmV0dXJuIChtYXBbdmFsXSAhPT0gdW5kZWZpbmVkKSA/IG1hcFt2YWxdIDogZGVmO1xyXG5cdH1cclxufVxyXG5cclxuZGVzY3JpYmUoJ0Jhc2ljIEZpcmVyYSBmdW5jdGlvbmFsaXR5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgLyppdCgnVGVzdGluZyBzaW1wbGUgdmFsdWVzIGNvbnZlcnNpb24nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBiID0ge1xyXG4gICAgICAgICAgICAnYSc6IDEwLFxyXG4gICAgICAgICAgICAnYic6IDMyLFxyXG4gICAgICAgICAgICAnYyc6IFsnKycsICdhJywgJ2InXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGJzID0gRmlyZXJhLmZ1bmNfdGVzdF9leHBvcnQucGFyc2VfcGIocGIpLnBsYWluX2Jhc2U7XHJcbiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChwYnMuJGluaXQsIHtcclxuICAgICAgICAgICAgYTogMTAsXHJcbiAgICAgICAgICAgIGI6IDMyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChwYnMuY1sxXSgxLCAyKSwgMyk7XHJcbiAgICB9KTsqL1xyXG4gICAgaXQoJ1Rlc3Rpbmcgc2ltcGxlIGdyaWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFwcCA9IEZpcmVyYSh7XHJcbiAgICAgICAgICAgIF9fcm9vdDoge1xyXG5cdFx0XHRcdGE6IDEwLFxyXG5cdFx0XHRcdGI6IDMyLFxyXG4gICAgICAgICAgICAgICAgJ2MnOiBbJysnLCAnYScsICdiJ11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ3RvZG8nOiB7fSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYXBwLmdldCgnYycpLCA0Mik7XHJcbiAgICAgICAgYXBwLnNldCgnYScsIDIwKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYXBwLmdldCgnYycpLCA1Mik7XHJcbiAgICB9KTtcclxuICAgIGl0KCdUZXN0aW5nIG5lc3RlZCBmZXhwcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXBwID0gRmlyZXJhKHtcclxuICAgICAgICAgICAgX19yb290OiB7XHJcblx0XHRcdFx0YTogMTAsXHJcblx0XHRcdFx0YjogMjAsXHJcblx0XHRcdFx0YzogMTIsXHJcbiAgICAgICAgICAgICAgICBkOiBbJysnLCBbJy0nLCAnYicsICdjJ10sICdhJ11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ3RvZG8nOiB7fSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYXBwLmdldCgnZCcpLCAxOCk7XHJcbiAgICAgICAgYXBwLnNldCgnYScsIDIwKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYXBwLmdldCgnZCcpLCAyOCk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdUZXN0aW5nIGFzeW5jJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24oZSwgY2Ipe1xyXG4gICAgICAgICAgICBjYigkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFwcCA9IEZpcmVyYSh7XHJcbiAgICAgICAgICAgIF9fcm9vdDoge1xyXG4gICAgICAgICAgICAgICAgJyRlbCc6ICQoXCIuZHVtbXlcIiksXHJcbiAgICAgICAgICAgICAgICAnaW5wJzogWydhc3luYycsIGZ1bmN0aW9uIChkb25lLCBbJHByZXZfZWwsICRub3dfZWxdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ0FUVEFDSElORyBIQU5ETEVSUycsICRub3dfZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZigkcHJldl9lbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcHJldl9lbC51bmJpbmQoJ2tleXVwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJG5vd19lbC5iaW5kKCdrZXl1cCcsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lKCQodGhpcykudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0tFWVVQJywgYXBwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJ14kZWwnXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnU0VUVElORyBWQUxVRVMgRlJPTSBET00nKTtcclxuICAgICAgICBhcHAuc2V0KCckZWwnLCAkKFwiLmFzeW5jLWV4IGlucHV0XCIpKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKGFwcC5yb290KTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ1Rlc3RpbmcgcGFzc2l2ZSBsaXN0ZW5pbmcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFwcCA9IEZpcmVyYSh7XHJcbiAgICAgICAgICAgIF9fcm9vdDoge1xyXG5cdFx0XHRcdCdhJzogMTAsXHJcblx0XHRcdFx0J2InOiAzMixcclxuICAgICAgICAgICAgICAgICdjJzogWycrJywgJ2EnLCAnLWInXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2MnKSwgNDIpO1xyXG4gICAgICAgIGFwcC5zZXQoJ2EnLCAyMCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2MnKSwgNTIpO1xyXG4gICAgICAgIGFwcC5zZXQoJ2InLCA0Mik7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2MnKSwgNTIpO1xyXG4gICAgICAgIGFwcC5zZXQoJ2EnLCAzMCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2MnKSwgNzIpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnVGVzdGluZyBtYXAgZGVwZW5kZW5jeScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXBwID0gRmlyZXJhKHtcclxuICAgICAgICAgICAgX19yb290OiB7XHJcblx0XHRcdFx0J2EnOiAxMCxcclxuXHRcdFx0XHQnYic6IDMyLFxyXG4gICAgICAgICAgICAgICAgJ2MnOiBbJ21hcCcsIHtcclxuICAgICAgICAgICAgICAgICAgICBhOiBmdW5jdGlvbih6KXsgcmV0dXJuIHogKyAxO30sIFxyXG4gICAgICAgICAgICAgICAgICAgIGI6IGZ1bmN0aW9uKHopeyByZXR1cm4geiooLTEpO1xyXG4gICAgICAgICAgICAgICAgfX1dXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBhcHAuc2V0KCdhJywgMjApO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdjJyksIDIxKTtcclxuICAgICAgICBhcHAuc2V0KCdiJywgNDIpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdjJyksIC00Mik7XHJcbiAgICB9KTtcclxuICAgIGl0KCdUZXN0aW5nIEZVTk5FTCBkZXBlbmRlbmN5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuXHRcdFx0XHQnYSc6IDEwLFxyXG5cdFx0XHRcdCdiJzogMzIsXHJcbiAgICAgICAgICAgICAgICAnYyc6IFsnZnVubmVsJywgZnVuY3Rpb24oY2VsbG5hbWUsIHZhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZ290IEZVTk5FTCcsIGFyZ3VtZW50cyk7IFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxsbmFtZSArICdfJyArIHZhbDtcclxuICAgICAgICAgICAgICAgIH0sICdhJywgJ2InXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXBwLnNldCgnYScsIDIwKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYXBwLmdldCgnYycpLCAnYV8yMCcpO1xyXG4gICAgICAgIGFwcC5zZXQoJ2InLCA0Mik7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2MnKSwgJ2JfNDInKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ1Rlc3RpbmcgYmFzaWMgaHRtbCBmdW5jdGlvbmFsaXR5OiB2aXNpYmlsaXR5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuICAgICAgICAgICAgICAgICRlbDogJChcIi50ZXN0LWh0bWxcIiksXHJcbiAgICAgICAgICAgICAgICAnc29tZXZhbCc6IFtpZCwgJ2lucHV0fGdldHZhbCddLFxyXG4gICAgICAgICAgICAgICAgJy5ibGlua2VyfHZpc2liaWxpdHknOiBbKGEpID0+IChhICYmIGEubGVuZ3RoJTIpLCAnc29tZXZhbCddXHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcdCRwYWNrYWdlczogWydzaW1wbGVIdG1sVGVtcGxhdGVzJywgJ2h0bWxDZWxscyddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLnRlc3QtaHRtbCBpbnB1dCcpLnZhbCgnb2xvbG8nKS5rZXl1cCgpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdzb21ldmFsJyksICdvbG9sbycpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnVGVzdGluZyBiYXNpYyBodG1sIGZ1bmN0aW9uYWxpdHk6IGNsaWNrJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGMgPSAwO1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuICAgICAgICAgICAgICAgICRlbDogJChcIi50ZXN0LWh0bWxcIiksXHJcbiAgICAgICAgICAgICAgICAnZm9vJzogWygpID0+IHtcclxuXHRcdFx0XHRcdFx0KytjO1xyXG5cdFx0XHRcdH0sICcuYSA+ICo6bnRoLWNoaWxkKDIpIGRpdiBzcGFufGNsaWNrJ11cclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0JHBhY2thZ2VzOiBbJ3NpbXBsZUh0bWxUZW1wbGF0ZXMnLCAnaHRtbENlbGxzJ11cclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCdzcGFuJykuY2xpY2soKTtcclxuICAgICAgICAkKCdzcGFuJykuY2xpY2soKTtcclxuICAgICAgICAkKCdzcGFuJykuY2xpY2soKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYywgMyk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdUZXN0aW5nIG5lc3RlZCBoYXNoZXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHN0ciA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuICAgICAgICAgICAgICAgICRlbDogJChcIi50ZXN0LW5lc3RlZFwiKSxcclxuICAgICAgICAgICAgICAgIHNvbWV2YWw6IFtpZCwgJ3RvZG8vY29tcGxldGVkJ10sXHJcbiAgICAgICAgICAgICAgICAkY2hpbGRfdG9kbzogJ2l0ZW0nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnaXRlbSc6IHtcclxuXHRcdFx0XHQkaW5pdDoge1xyXG5cdFx0XHRcdFx0Y29tcGxldGVkOiBzdHIsXHJcblx0XHRcdFx0fSxcclxuICAgICAgICAgICAgXHRjb21wbGV0ZWQ6IFsnbWFwJywge1xyXG4gICAgICAgICAgICBcdFx0Jy5kb25lfGNsaWNrJzogdHJ1ZSxcclxuICAgICAgICAgICAgXHR9XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8kKCcudGVzdC1odG1sIGlucHV0JykudmFsKCdvbG9sbycpLmtleXVwKCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ3NvbWV2YWwnKSwgc3RyKTtcclxuICAgICAgICBhcHAuc2V0KCdjb21wbGV0ZWQnLCB0cnVlLCAndG9kbycpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdzb21ldmFsJyksIHRydWUpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnVGVzdGluZyBtdWx0aXBsZSBjaGlsZHJlbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc3RyID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGFwcCA9IEZpcmVyYSh7XHJcbiAgICAgICAgICAgIF9fcm9vdDoge1xyXG4gICAgICAgICAgICAgICAgJGVsOiAkKFwiLnRlc3QtbmVzdGVkXCIpLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGVkX2NvdW50ZXI6IFsnY2xvc3VyZScsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFycil7XHJcblx0XHRcdFx0XHRcdFx0aWYoIWFycikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGFyclswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2X3ZhbCA9IGFyclsxXVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBhcnJbMV1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwcmV2X3ZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMtLTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgJyovY2hhbmdlcyddLFxyXG4gICAgICAgICAgICAgICAgJGNoaWxkcmVuOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgMTogJ2l0ZW0nLFxyXG4gICAgICAgICAgICAgICAgICAgIDI6ICdpdGVtJyxcclxuICAgICAgICAgICAgICAgICAgICAzOiAnaXRlbScsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnaXRlbSc6IHtcclxuXHRcdFx0XHQkaW5pdDoge1xyXG5cdFx0XHRcdFx0Y29tcGxldGVkOiBzdHIsXHJcblx0XHRcdFx0fSxcclxuICAgICAgICAgICAgXHRjb21wbGV0ZWQ6IFsnbWFwJywge1xyXG4gICAgICAgICAgICBcdFx0Jy5kb25lfGNsaWNrJzogdHJ1ZSxcclxuICAgICAgICAgICAgXHR9XSxcclxuICAgICAgICAgICAgICAgICdjaGFuZ2VzJzogWydeY29tcGxldGVkJ10sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBhcHAuc2V0KCdjb21wbGV0ZWQnLCB0cnVlLCAnMicpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdjb21wbGV0ZWRfY291bnRlcicpLCAxKTtcclxuICAgICAgICBhcHAuc2V0KCdjb21wbGV0ZWQnLCB0cnVlLCAnMScpO1xyXG4gICAgICAgIGFwcC5zZXQoJ2NvbXBsZXRlZCcsIHRydWUsICczJyk7XHJcbiAgICAgICAgYXBwLnNldCgnY29tcGxldGVkJywgZmFsc2UsICcyJyk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2NvbXBsZXRlZF9jb3VudGVyJyksIDIpO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ05vdyBjb21wbGV0ZWQnLCBhcHAuZ2V0KCdjb21wbGV0ZWRfY291bnRlcicpKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ1Rlc3RpbmcgbmVzdGVkIGNlbGxzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuICAgICAgICAgICAgICAgIGE6IDQyLFxyXG4gICAgICAgICAgICAgICAgZm9vOiBbJ25lc3RlZCcsIGZ1bmN0aW9uKGNiLCBhKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoYSAlIDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IoJ29kZCcsIGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IoJ2V2ZW4nLCBhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgWydvZGQnLCAnZXZlbiddLCAnYSddLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2Zvby5ldmVuJyksIDQyKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYXBwLmdldCgnZm9vLm9kZCcpLCBudWxsKTtcclxuICAgICAgICBcclxuICAgICAgICBhcHAuc2V0KCdhJywgMTMpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdmb28uZXZlbicpLCA0Mik7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2Zvby5vZGQnKSwgMTMpO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgYWRkID0gKGEsIGIpID0+IGEgKyBiO1xyXG4gICAgLyppdCgnVGVzdGluZyBjdXJjdWxhciBkZXBlbmRlbmN5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuICAgICAgICAgICAgICAgIGE6IFthZGQuYmluZChudWxsLCAxMCksICdiJ10sXHJcbiAgICAgICAgICAgICAgICBiOiBbYWRkLmJpbmQobnVsbCwgMjApLCAnYyddLFxyXG4gICAgICAgICAgICAgICAgYzogWycrJywgJ2EnLCAnZCddLFxyXG4gICAgICAgICAgICAgICAgZDogNDIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyovXHJcbiAgICBcclxuICAgIHZhciBnZXRfYnlfc2VsZWN0b3IgPSBmdW5jdGlvbihuYW1lLCAkZWwpe1xyXG4gICAgICAgIC8vY29uc29sZS5pbmZvKFwiR0JTXCIsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgcmV0dXJuICRlbCA/ICRlbC5maW5kKCdbZGF0YS1mcj0nICsgbmFtZSArICddJykgOiBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKml0KCdUZXN0aW5nIEhUTUwgcGFja2FnZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXBwID0gRmlyZXJhKHtcclxuICAgICAgICAgICAgX19yb290OiB7XHJcbiAgICAgICAgICAgICAgICBhOiA0MixcclxuICAgICAgICAgICAgICAgIGI6IFthZGQuYmluZChudWxsLCAyMCksICdhJ10sXHJcbiAgICAgICAgICAgICAgICAkY2hpbGRfaXRlbTogJ3BlcnNvbicsXHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcdCRwYWNrYWdlczogWydzaW1wbGVIdG1sVGVtcGxhdGVzJywgJ2h0bWxDZWxscyddLFxyXG4gICAgICAgICAgICBwZXJzb246IHtcclxuXHRcdFx0XHQnbmFtZSc6ICdKb2huJyxcclxuXHRcdFx0XHQnc3VybmFtZSc6ICdLb3ZhbGVua28nLFxyXG4gICAgICAgICAgICAgICAgJyRlbCc6IFtnZXRfYnlfc2VsZWN0b3IsICckbmFtZScsICcuLi8kZWwnXSxcclxuICAgICAgICAgICAgICAgICdkdW1teSc6IFtpZCwgJyR3cml0ZXInXSxcclxuICAgICAgICAgICAgICAgICdkdW1teTInOiBbaWQsICckd3JpdGVyJ10sXHJcbiAgICAgICAgICAgICAgICAnZHVtbXkzJzogW2lkLCAnZHVtbXknXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gaWYgJGVsIGluIHJvb3QgaXMgZW1wdHksIGl0J3MgPGJvZHk+IGJ5IGRlZmF1bHRcclxuICAgICAgICBhc3NlcnQuZXF1YWwoXHJcblx0XHRcdGFwcC5nZXQoJyRlbCcpLmdldCgpWzBdLCBcclxuXHRcdFx0JCgnYm9keScpLmdldCgpWzBdXHJcblx0XHQpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChcclxuICAgICAgICAgICAgYXBwLmdldCgnJGVsJywgJ2l0ZW0nKS5nZXQoKVswXSwgXHJcbiAgICAgICAgICAgICQoJ2RpdltkYXRhLWZyPWl0ZW1dJykuZ2V0KClbMF1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBhcHAuc2V0KCduYW1lJywgJ015a29sYScsICdpdGVtJyk7XHJcbiAgICB9KTsqL1xyXG5cclxuICAgIGl0KCdUZXN0aW5nIGR5bmFtaWMgJGNoaWxkcmVuIG1lbWJlcnMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFwcCA9IEZpcmVyYSh7XHJcbiAgICAgICAgXHRfX3Jvb3Q6IHtcclxuICAgICAgICBcdFx0cmVnaXN0ZXJlZDogZmFsc2UsXHJcblx0ICAgICAgICBcdHZhbDogW2lkLCAnYmxvY2svZm9vJ10sXHJcblx0ICAgICAgICBcdCRjaGlsZF9ibG9jazogW1xyXG5cdFx0XHRcdFx0YWx3YXlzKFxyXG5cdFx0XHRcdFx0XHRbe1xyXG5cdFx0XHRcdFx0XHRcdCRpbml0OiB7XHJcblx0XHRcdFx0XHRcdFx0XHRmb286ICdiYXInXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9LCB7XHJcblxyXG5cdFx0XHRcdFx0XHR9XVxyXG5cdFx0XHRcdFx0KSwgXHJcblx0XHRcdFx0XHQncmVnaXN0ZXJlZCdcclxuXHRcdFx0XHRdLFxyXG4gICAgICAgIFx0fSxcclxuICAgICAgICB9KVxyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCd2YWwnKSwgJ2JhcicpO1xyXG4gICAgICAgIGFwcC5zZXQoJ3JlZ2lzdGVyZWQnLCB0cnVlKTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ1Rlc3RpbmcgaGFzaCBsaW5raW5nJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgIFx0X19yb290OiB7XHJcblx0XHRcdFx0cmVnaXN0ZXJlZDogZmFsc2UsXHJcblx0XHRcdFx0dmFsOiBudWxsLFxyXG5cdCAgICAgICAgXHQkY2hpbGRfYmxvY2s6IFthbHdheXMoXHJcblx0XHRcdFx0XHRcdFt7XHJcblx0XHRcdFx0XHRcdFx0JGluaXQ6IHtcclxuXHRcdFx0XHRcdFx0XHRcdGZvbzogJ2JhcicsXHJcblx0XHRcdFx0XHRcdFx0XHRib286IG51bGxcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdFx0XHQndmFsJzogJ2ZvbydcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdCdib28nOiAncmVnaXN0ZXJlZCdcclxuXHRcdFx0XHRcdFx0fV1cclxuXHRcdFx0XHRcdCksICdyZWdpc3RlcmVkJ1xyXG5cdFx0XHRcdF0sXHJcbiAgICAgICAgXHR9LFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ3ZhbCcpLCAnYmFyJyk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2JvbycsICdibG9jaycpLCBmYWxzZSk7XHJcbiAgICAgICAgYXBwLnNldCgncmVnaXN0ZXJlZCcsIHRydWUpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdib28nLCAnYmxvY2snKSwgdHJ1ZSk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdUZXN0aW5nIGRlbHRhcywgYXJyYXlzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgIFx0X19yb290OiB7XHJcblx0XHRcdFx0c2hvdzogJ2FsbCcsXHJcblx0XHRcdFx0bnVtYmVyczogWydqdXN0JywgWzEsIDIsIDNdXSxcclxuICAgICAgICAgICAgICAgIGFycl9jaGFuZ2VzOiBbJ2Fycl9kZWx0YXMnLCAnbnVtYmVycyddXHJcbiAgICAgICAgXHR9XHJcbiAgICAgICAgfSlcclxuICAgICAgICBhcHAuc2V0KCdudW1iZXJzJywgWzEsIDIsIDUsIDVdKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgZGVsdGFzID0gYXBwLmdldCgnYXJyX2NoYW5nZXMnKTtcclxuICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKGRlbHRhcywgW1tcImFkZFwiLFwiM1wiLDVdLFtcImNoYW5nZVwiLFwiMlwiLDVdXSk7XHJcbiAgICAgICAgYXBwLnNldCgnbnVtYmVycycsIFtdKTtcclxuICAgICAgICBcclxuICAgICAgICBkZWx0YXMgPSBhcHAuZ2V0KCdhcnJfY2hhbmdlcycpO1xyXG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwoZGVsdGFzLCBbW1wicmVtb3ZlXCIsXCIwXCJdLFtcInJlbW92ZVwiLFwiMVwiXSxbXCJyZW1vdmVcIixcIjJcIl0sW1wicmVtb3ZlXCIsXCIzXCJdXSk7XHJcbiAgICAgICAgYXBwLnNldCgnbnVtYmVycycsIFsxLCAyLCA1LCA1XSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgdmFyIGFkZCA9IGZ1bmN0aW9uKHZhbHMpe1xyXG4gICAgICAgIGlmKHZhbHMpe1xyXG4gICAgICAgICAgICByZXR1cm4gW1snYWRkJywgbnVsbCwgYXMoJ3RleHQnKSh2YWxzKV1dO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIHNlY29uZCA9IChfXywgYSkgPT4gYTtcclxuXHR2YXIgZ2V0ID0gKGkpID0+IHtcclxuXHRcdHJldHVybiAoYSkgPT4ge1xyXG5cdFx0XHRpZihhICYmIGFbaV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGFbaV07XHJcblx0XHR9XHJcblx0fVxyXG4gICAgXHJcbiAgICBpdCgnVGVzdGluZyBodG1sIHZhbCBzZXQgJiBnZXQnLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuICAgICAgICAgICAgICAgICRlbDogWydqdXN0JywgJChcIi50ZXN0LWlucHV0LXNldGdldFwiKV0sXHJcbiAgICAgICAgICAgICAgICBcImZvb1wiOiBbKGEpID0+IHsgY29uc29sZS5sb2coJ05ldyB0b2RvOicsIGEpfSwgJ25ld190b2RvJ10sXHJcbiAgICAgICAgICAgICAgICBcIm5ld190b2RvXCI6IFtzZWNvbmQsICdpbnB1dHxwcmVzcyhFbnRlcixFc2MpJywgJy1pbnB1dHxnZXR2YWwnXSxcclxuICAgICAgICAgICAgICAgIFwiaW5wdXR8c2V0dmFsXCI6IFthbHdheXMoJycpLCAnbmV3X3RvZG8nXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnaXRlbSc6IHtcclxuXHRcdFx0XHR0ZXh0OiAnJyxcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogWydtYXAnLCB7XHJcblx0XHRcdFx0XHQnLmRvbmV8Y2xpY2snOiB0cnVlXHJcblx0XHRcdFx0fSwgZmFsc2VdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgfSk7XHJcblx0dmFyIG1rX2xvZ2dlciA9IChhKSA9PiB7XHJcblx0XHRyZXR1cm4gKGIpID0+IHtcclxuXHRcdFx0Y29uc29sZS5sb2coYSwgYik7XHJcblx0XHRcdHJldHVybiBiO1xyXG5cdFx0fVxyXG5cdH1cclxuICAgIHZhciBsb2dnZXIgPSAodmFybmFtZSwgYSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZhcm5hbWUsICc6JywgYSk7XHJcbiAgICAgICAgcmV0dXJuIGE7XHJcbiAgICB9XHJcbiAgICBpdCgnVGVzdGluZyByZW1vdmluZyBmcm9tIGxpc3QnLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciAkcm9vdCA9ICQoXCIudGVzdC1saXN0LXJlbW92ZVwiKTtcclxuICAgICAgICB2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0JHBhY2thZ2VzOiBbJ3NpbXBsZUh0bWxUZW1wbGF0ZXMnLCAnaHRtbENlbGxzJ10sXHJcbiAgICAgICAgICAgIF9fcm9vdDoge1xyXG4gICAgICAgICAgICAgICAgJGNoaWxkX3RvZG9zOiBbJ2xpc3QnLCB7XHJcblx0XHRcdFx0XHR0eXBlOiAnaXRlbScsXHJcblx0XHRcdFx0XHRwdXNoOiBbYXMoJ3RleHQnKSwgJy4uL25ld190b2RvJ10sXHJcblx0XHRcdFx0XHRwb3A6IFtmdW5jdGlvbihhKXtcclxuXHRcdFx0XHRcdFx0aWYoYSAmJiBhWzBdICE9PSB1bmRlZmluZWQpIHJldHVybiBhWzBdO1xyXG5cdFx0XHRcdFx0fSwgJyovcmVtb3ZlJ10sXHJcblx0XHRcdFx0XHRzZWxmOiB7XHJcblx0XHRcdFx0XHRcdGNvbXBsZXRlZF9udW1iZXI6IFsnY291bnQnLCAnY29tcGxldGVkJ11cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fV0sXHJcbiAgICAgICAgICAgICAgICAkZWw6ICRyb290LFxyXG4gICAgICAgICAgICAgICAgdG9kb3NfbnVtYmVyOiBbJ3RvZG9zLyRhcnJfZGF0YS5sZW5ndGgnXSxcclxuICAgICAgICAgICAgICAgIFwibmV3X3RvZG9cIjogW3NlY29uZCwgJ2J1dHRvbi5hZGQtdG9kb3xjbGljaycsICctaW5wdXR8Z2V0dmFsJ10sXHJcbiAgICAgICAgICAgICAgICBcImlucHV0fHNldHZhbFwiOiBbYWx3YXlzKCcnKSwgJ25ld190b2RvJ11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2l0ZW0nOiB7XHJcblx0XHRcdFx0dGV4dDogJycsXHJcblx0XHRcdFx0JHRlbXBsYXRlOiBgXHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwidGQtaXRlbVwiPlxyXG5cdFx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNvbXBsZXRlZFwiIC8+IC0gY29tcGxldGVkXHJcblx0XHRcdFx0XHRcdDxkaXYgZGF0YS1mcj1cInRleHRcIj5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ0by1yaWdodFwiPlxyXG5cdFx0XHRcdFx0XHRcdDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJyZW1vdmVcIj5SZW1vdmU8L2E+XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdGAsXHJcblx0XHRcdFx0cmVtb3ZlOiBbKGUpID0+IHtcclxuXHRcdFx0XHRcdHJldHVybiBlO1xyXG5cdFx0XHRcdH0sICcucmVtb3ZlfGNsaWNrJ10sXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IFsnaW5wdXRbdHlwZT1jaGVja2JveF18Z2V0dmFsJ11cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblx0XHR2YXIgYWRkX2l0ZW0gPSBmdW5jdGlvbihzdHIgPSAnb2xvbG8nKXtcclxuXHRcdFx0JHJvb3QuZmluZCgnaW5wdXRbdHlwZT10ZXh0XScpLnZhbChzdHIpLmNoYW5nZSgpO1xyXG5cdFx0XHQkcm9vdC5maW5kKCdidXR0b24nKS5jbGljaygpO1xyXG5cdFx0fVxyXG5cdFx0Ly9jb25zb2xlLmxvZygnYXBwJywgYXBwKTtcclxuXHRcdGFkZF9pdGVtKCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJyRhcnJfZGF0YS5sZW5ndGgnLCAndG9kb3MnKSwgMSk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2NvbXBsZXRlZF9udW1iZXInLCAndG9kb3MnKSwgMCk7XHJcblx0XHRhZGRfaXRlbSgnb2wnKTtcclxuXHRcdGFkZF9pdGVtKCdhbCcpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCckYXJyX2RhdGEubGVuZ3RoJywgJ3RvZG9zJyksIDMpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdjb21wbGV0ZWRfbnVtYmVyJywgJ3RvZG9zJyksIDApO1xyXG5cdFx0XHJcblx0XHQkcm9vdC5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLmNsaWNrKCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2NvbXBsZXRlZF9udW1iZXInLCAndG9kb3MnKSwgMyk7XHJcblx0XHRcclxuXHRcdCRyb290LmZpbmQoJ1tkYXRhLWZyPXRvZG9zXSA+ICo6Zmlyc3QtY2hpbGQgLnJlbW92ZScpLmNsaWNrKCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKCRyb290LmZpbmQoJ2lucHV0W3R5cGU9Y2hlY2tib3hdOmNoZWNrZWQnKS5sZW5ndGgsIDIpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdjb21wbGV0ZWRfbnVtYmVyJywgJ3RvZG9zJyksIDIpO1xyXG5cdFx0JHJvb3QuZmluZCgnW2RhdGEtZnI9dG9kb3NdID4gKjpmaXJzdC1jaGlsZCAucmVtb3ZlJykuY2xpY2soKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYXBwLmdldCgnY29tcGxldGVkX251bWJlcicsICd0b2RvcycpLCAxKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoJHJvb3QuZmluZCgnaW5wdXRbdHlwZT1jaGVja2JveF06Y2hlY2tlZCcpLmxlbmd0aCwgMSk7XHJcblx0XHRhZGRfaXRlbSgpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdjb21wbGV0ZWRfbnVtYmVyJywgJ3RvZG9zJyksIDEpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbCgkcm9vdC5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XTpjaGVja2VkJykubGVuZ3RoLCAxKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpdCgnVGVzdGluZyBhc3luYycsIGZ1bmN0aW9uKGRvbmUpe1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuICAgICAgICAgICAgICAgIGI6IFsnanVzdCcsIDQyXSxcclxuICAgICAgICAgICAgICAgIGE6IFsnYXN5bmMnLCBmdW5jdGlvbihjYiwgYil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnc2V0dGluZyBiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYihiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9LCAnYiddXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdhJyksIEZpcmVyYS51bmRlZik7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChhcHAuZ2V0KCdhJyksIDQyKTtcclxuICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgIH0sIDEwKVxyXG4gICAgfSlcclxuXHRcclxuXHR2YXIgYXJyX3JlYWxfbGVuZ3RoID0gKGEpID0+IE9iamVjdC5rZXlzKGEpLmxlbmd0aDtcclxuXHRcclxuXHRpdCgnQ2FzdGluZyBsaXN0IGFzIGFycmF5JywgZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgJHJvb3QgPSAkKFwiLnRlc3QtdHJhaW5zXCIpO1xyXG5cdFx0dmFyIGFkZF9pdGVtID0gKCkgPT4ge1xyXG5cdFx0XHQkcm9vdC5maW5kKCdidXR0b24nKS5jbGljaygpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGFwcCA9IEZpcmVyYSh7XHJcblx0XHRcdCRwYWNrYWdlczogWydzaW1wbGVIdG1sVGVtcGxhdGVzJywgJ2h0bWxDZWxscyddLFxyXG5cdFx0XHRfX3Jvb3Q6IHtcclxuXHRcdFx0XHQkZWw6ICQoXCIudGVzdC10cmFpbnNcIiksXHJcblx0XHRcdFx0JGNoaWxkX3RyYWluczogWydsaXN0Jywge1xyXG5cdFx0XHRcdFx0dHlwZTogJ3RyYWluJyxcclxuXHRcdFx0XHRcdHB1c2g6IFsnLi4vYWRkX3RyYWluJ10sXHJcblx0XHRcdFx0XHRwb3A6IFtnZXQoMCksICcqLy5yZW1vdmV8Y2xpY2snXSxcclxuXHRcdFx0XHRcdHNlbGY6IHtcclxuXHRcdFx0XHRcdFx0YXJyOiBbJ2FzQXJyYXknLCBbJ25hbWUnXV1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fV0sXHJcblx0XHRcdFx0YWRkX3RyYWluOiBbJ2lzJywgKGEpID0+IHtcclxuXHRcdFx0XHRcdGlmKGEgIT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0XHRcdHJldHVybiB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCAnLmFkZC10cmFpbnxjbGljayddLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR0cmFpbjoge1xyXG5cdFx0XHRcdCR0ZW1wbGF0ZTogYFxyXG5cdFx0XHRcdFx0PGRpdj5Tb21lIHRyYWluPC9kaXY+XHJcblx0XHRcdFx0XHQ8aW5wdXQ+IC0gZW50ZXIgbmFtZVxyXG5cdFx0XHRcdFx0PGRpdj48YSBocmVmPVwiI1wiIGNsYXNzPVwicmVtb3ZlXCI+RGVsPC9hPjwvZGl2PlxyXG5cdFx0XHRcdGAsXHJcblx0XHRcdFx0bmFtZTogWydpbnB1dHxnZXR2YWwnXSxcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdGFkZF9pdGVtKCk7XHJcblx0XHRhZGRfaXRlbSgpO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2FycicsICd0cmFpbnMnKS5sZW5ndGgsIDIpO1xyXG5cdFx0XHJcblx0XHQkcm9vdC5maW5kKCdbZGF0YS1mcj10cmFpbnNdID4gKjpmaXJzdC1jaGlsZCAucmVtb3ZlJykuY2xpY2soKTtcclxuXHRcdC8vY29uc29sZS5sb2coJ1RSQUlOUycsIGFwcC5nZXQoJ2FycicsICd0cmFpbnMnKSk7XHJcblx0XHRhc3NlcnQuZXF1YWwoYXJyX3JlYWxfbGVuZ3RoKGFwcC5nZXQoJ2FycicsICd0cmFpbnMnKSksIDEpO1xyXG5cdFx0XHJcblx0XHR2YXIgaW5wID0gJHJvb3QuZmluZCgnW2RhdGEtZnI9dHJhaW5zXSA+ICo6Zmlyc3QtY2hpbGQgaW5wdXQnKTtcclxuXHRcdGlucC52YWwoJ29sb2xvJykua2V5dXAoKTtcclxuXHRcdGFzc2VydC5kZWVwRXF1YWwoYXBwLmdldCgnYXJyJywgJ3RyYWlucycpLCBbe1xyXG5cdFx0XHRcdG5hbWU6ICdvbG9sbydcclxuXHRcdH1dKTtcclxuXHR9KVxyXG5cdFxyXG5cdGl0KCckZGF0YXNvdXJjZScsIGZ1bmN0aW9uKCl7XHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0JGNoaWxkX3Blb3BsZTogWydsaXN0Jywge1xyXG5cdFx0XHRcdFx0dHlwZTogJ2h1bWFuJyxcclxuXHRcdFx0XHRcdGRhdGFzb3VyY2U6IFsnLi4vcGVvcGxlJ10sXHJcblx0XHRcdFx0XHRzZWxmOiB7cGVvcGxlX2FnZXM6IFsnYXNBcnJheScsIFsnbmFtZScsICdhZ2UnXV19LFxyXG5cdFx0XHRcdH1dLFxyXG5cdFx0XHRcdHBlb3BsZTogWydqdXN0JywgW1xyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRuYW1lOiAnSXZhbicsXHJcblx0XHRcdFx0XHRcdGFnZTogMzUsXHJcblx0XHRcdFx0XHRcdGdlbmRlcjogJ21hbGUnXHJcblx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdG5hbWU6ICdQeWx5cCcsXHJcblx0XHRcdFx0XHRcdGFnZTogOTMsXHJcblx0XHRcdFx0XHRcdGdlbmRlcjogJ21hbGUnXHJcblx0XHRcdFx0XHR9LCB7XHJcblx0XHRcdFx0XHRcdG5hbWU6ICdZYXZkb2toYScsXHJcblx0XHRcdFx0XHRcdGFnZTogOTEsXHJcblx0XHRcdFx0XHRcdGdlbmRlcjogJ2ZlbWFsZSdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRdXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRodW1hbjoge1xyXG5cdFx0XHRcdFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJyRhcnJfZGF0YS5sZW5ndGgnLCAncGVvcGxlJyksIDMpO1xyXG5cdFx0XHJcblx0XHRhcHAuc2V0KCdwZW9wbGUnLCBbe1xyXG5cdFx0XHRuYW1lOiAnSXZhbicsXHJcblx0XHRcdGFnZTogMzZcclxuXHRcdH0sIHtcclxuXHRcdFx0bmFtZTogJ1B5bHlwJyxcclxuXHRcdFx0YWdlOiA5NCxcclxuXHRcdH0sIHtcclxuXHRcdFx0bmFtZTogJ1lhdmRva2hhJyxcclxuXHRcdFx0YWdlOiA5MixcclxuXHRcdH1dKTtcclxuXHRcclxuXHRcdFxyXG5cdFx0YXNzZXJ0LmRlZXBFcXVhbChhcHAuZ2V0KCdwZW9wbGVfYWdlcycsICdwZW9wbGUnKSwgW3tcclxuXHRcdFx0bmFtZTogJ0l2YW4nLFxyXG5cdFx0XHRhZ2U6IDM2XHJcblx0XHR9LCB7XHJcblx0XHRcdG5hbWU6ICdQeWx5cCcsXHJcblx0XHRcdGFnZTogOTQsXHJcblx0XHR9LCB7XHJcblx0XHRcdG5hbWU6ICdZYXZkb2toYScsXHJcblx0XHRcdGFnZTogOTIsXHJcblx0XHR9XSk7XHJcblx0XHJcblx0XHRhcHAuc2V0KCckYXJyX2RhdGEubGVuZ3RoJywgW10sICdwZW9wbGUnKTtcclxuXHRcdGFzc2VydC5lcXVhbChhcHAuZ2V0KCckYXJyX2RhdGEubGVuZ3RoJywgJ3Blb3BsZScpLCAwKTtcclxuXHR9KVxyXG5cdFxyXG5cdGl0KCdSZWR1Y2UocG9zaXRpb24tZnJlZSknLCBmdW5jdGlvbigpe1xyXG5cdFx0Ly8gdGJkLi4uXHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0JGNoaWxkX3Blb3BsZTogWydsaXN0Jywge1xyXG5cdFx0XHRcdFx0dHlwZTogJ2h1bWFuJywgXHJcblx0XHRcdFx0XHRkYXRhc291cmNlOiBbJy4uL3Blb3BsZSddLFxyXG5cdFx0XHRcdFx0c2VsZjogeyBcclxuXHRcdFx0XHRcdFx0c3VtX2FnZTogWydyZWR1Y2UnLCAnYWdlJywge1xyXG5cdFx0XHRcdFx0XHRcdGFkZDogKGEsIHN1bSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHN1bSArIGE7XHJcblx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHRyZW1vdmU6IChhLCBzdW0pID0+IHN1bSAtIGEsXHJcblx0XHRcdFx0XHRcdFx0Y2hhbmdlOiAoYSwgcHJldl9hLCBzdW0pID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAoYSAtIHByZXZfYSkgKyBzdW07XHJcblx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHRkZWY6IDAsXHJcblx0XHRcdFx0XHRcdH1dXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fV0sXHJcblx0XHRcdFx0cGVvcGxlOiBbJ2p1c3QnLCBbe1xyXG5cdFx0XHRcdFx0XHRuYW1lOiAnSXZhbicsXHJcblx0XHRcdFx0XHRcdGFnZTogMzVcclxuXHRcdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdFx0bmFtZTogJ1B5bHlwJyxcclxuXHRcdFx0XHRcdFx0YWdlOiA5MyxcclxuXHRcdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdFx0bmFtZTogJ1lhdmRva2hhJyxcclxuXHRcdFx0XHRcdFx0YWdlOiA5MSxcclxuXHRcdFx0XHRcdH1dXHJcblx0XHRcdFx0XSxcclxuXHRcdFx0fSxcclxuXHRcdFx0aHVtYW46IHtcclxuXHRcdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdGFzc2VydC5lcXVhbChhcHAuZ2V0KCdzdW1fYWdlJywgJ3Blb3BsZScpLCAyMTkpO1xyXG5cdFx0YXBwLnNldCgnYWdlJywgMzYsICdwZW9wbGUvMCcpO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ3N1bV9hZ2UnLCAncGVvcGxlJyksIDIyMCk7XHJcblx0fSlcclxuXHRcclxuXHRpdCgnU2ltcGxlIHRlbXBsYXRlcyB3aXRoIE96ZW5mYW50JywgZnVuY3Rpb24oZG9uZSl7XHJcbiAgICAgICAgdmFyIGFwcCA9IEZpcmVyYSh7XHJcbiAgICAgICAgICAgIF9fcm9vdDoge1xyXG5cdFx0XHRcdCRlbDogJChcIi50ZXN0LW96ZW5mYW50XCIpLFxyXG5cdFx0XHRcdHRleHQ6ICdUaGlzIGlzIE96ZW5mYW50IScsXHJcblx0XHRcdFx0JHRlbXBsYXRlOiBgXHJcblx0XHRcdFx0LlxyXG5cdFx0XHRcdFx0Zm9ybVxyXG5cdFx0XHRcdFx0XHRoMVxyXG5cdFx0XHRcdFx0XHRcdFwiSGVsbG8hXCJcclxuXHRcdFx0XHRcdFx0LlxyXG5cdFx0XHRcdFx0XHQudGV4dCRcclxuXHJcblx0XHRcdFx0YFxyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHQkcGFja2FnZXM6IFsnb3plbmZhbnRfbmV3JywgJ2h0bWxDZWxscyddXHJcbiAgICAgICAgfSk7XHJcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0YXBwLnNldCgndGV4dCcsICdvbG9sbycpO1xyXG5cdFx0XHRhc3NlcnQuZXF1YWwoJCgnLnRlc3Qtb3plbmZhbnQgLnRleHQnKS5odG1sKCksICdvbG9sbycpO1xyXG5cdFx0XHRkb25lKCk7XHJcblx0XHR9LCAxMClcclxuXHR9KVxyXG5cdGl0KCdOZXN0ZWQgdGVtcGxhdGVzIHdpdGggT3plbmZhbnQnLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciBhcHAgPSBGaXJlcmEoe1xyXG4gICAgICAgICAgICBfX3Jvb3Q6IHtcclxuICAgICAgICAgICAgICAgICRpbml0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGVsOiAkKFwiLnRlc3Qtb3plbmZhbnQtbmVzdGVkXCIpLFxyXG5cdFx0XHRcdFx0cGVvcGxlX2FycjogW3tuYW1lOiAnSm9obid9LCB7bmFtZTogJ0l2YW4nfSwge25hbWU6ICdTZW1lbid9XSxcclxuXHRcdFx0XHRcdCR0ZW1wbGF0ZTogYFxyXG5cdFx0XHRcdFx0LlxyXG5cdFx0XHRcdFx0XHRoMVxyXG5cdFx0XHRcdFx0XHRcdFwiUGVvcGxlXCJcclxuXHRcdFx0XHRcdFx0dWwucGVvcGxlJFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRgXHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cdFx0XHRcdCRjaGlsZF9wZW9wbGU6IFsnbGlzdCcsIHt0eXBlOiAnaHVtYW4nLCBkYXRhc291cmNlOiBbJy4uL3Blb3BsZV9hcnInXX1dLFxyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHRodW1hbjoge1xyXG5cdFx0XHRcdCR0ZW1wbGF0ZTogYFxyXG5cdFx0XHRcdC5cclxuXHRcdFx0XHRcdFwiSGVsbG8sIFwiXHJcblx0XHRcdFx0XHRzcGFuJG5hbWVcclxuXHRcdFx0XHRcdFwiIVwiXHJcblx0XHRcdFx0XHRgXHJcblx0XHRcdH0sXHJcblx0XHRcdCRwYWNrYWdlczogWydvemVuZmFudF9uZXcnLCAnaHRtbENlbGxzJ11cclxuICAgICAgICB9KTtcclxuXHRcdGNvbnNvbGUubG9nKCdhcHAnLCBhcHApO1xyXG5cdFx0YXBwLnNldCgndGV4dCcsICdvbG9sbycpO1xyXG5cdFx0dmFyIGV4X3JlcyA9IGBIZWxsbyxJdmFuIWA7XHJcblx0XHR2YXIgcmVzID0gJC50cmltKCQoJy50ZXN0LW96ZW5mYW50LW5lc3RlZCA+ICogPiB1bCA+ICo6bnRoLWNoaWxkKDIpID4gZGl2JykudGV4dCgpKS5yZXBsYWNlKC8oXFx0fFxccykvZywgXCJcIik7XHJcblx0XHRhc3NlcnQuZXF1YWwocmVzLCBleF9yZXMpO1xyXG5cdH0pXHJcblx0XHJcblx0aXQoJ1Rlc3RpbmcgaW5kaWNlcyBwcmVkaWNhdGUnLCBmdW5jdGlvbigpe1xyXG5cdFx0dmFyICRyb290ID0gJChcIi50ZXN0LWluZGljZXNcIik7XHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0JHBhY2thZ2VzOiBbJ296ZW5mYW50X25ldycsICdodG1sQ2VsbHMnXSxcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0JGluaXQ6IHtcclxuXHRcdFx0XHRcdHVuZG9uZV9udW06IDAsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQkZWw6ICRyb290LFxyXG5cdFx0XHRcdGFkZF9uZXc6IFsnLmFkZC10b2RvfGNsaWNrJ10sXHJcblx0XHRcdFx0JHRlbXBsYXRlOiBgXHJcblx0XHRcdFx0XHQuXHJcblx0XHRcdFx0XHRcdFwidG9kbyBsaXN0XCJcclxuXHRcdFx0XHRcdFx0dWwkdG9kb3NcclxuXHRcdFx0XHRcdFx0LmFkZC10b2RvXHJcblx0XHRcdFx0XHRcdFx0XCJBZGQgdG9kb1wiXHJcblx0XHRcdFx0XHRcdC5cclxuXHRcdFx0XHRcdFx0XHRcIlVuZG9uZTpcIlxyXG5cdFx0XHRcdFx0XHRcdHNwYW4udW5kb25lX251bSRcclxuXHRcdFx0XHRgLFxyXG5cdFx0XHRcdHVuZG9uZV9udW06IFtwcm9wKCdzaXplJyksICd0b2Rvcy91bmRvbmUnXSxcclxuXHRcdFx0XHQkY2hpbGRfdG9kb3M6IFsnbGlzdCcsIHtcclxuXHRcdFx0XHRcdHR5cGU6ICd0b2RvJyxcclxuXHRcdFx0XHRcdHB1c2g6IFthbHdheXMoe3RleHQ6ICdEbyBzb21ldGhpbmcnLCBjb21wbGV0ZWQ6IGZhbHNlfSksICcuLi9hZGRfbmV3J10sXHJcblx0XHRcdFx0XHRzZWxmOiB7IFxyXG5cdFx0XHRcdFx0XHR1bmRvbmU6IFsnaW5kaWNlcycsIG5vdCwgJ2NvbXBsZXRlZCddXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdH1dXHJcblx0XHRcdH0sXHJcblx0XHRcdHRvZG86IHtcclxuXHRcdFx0XHQkdGVtcGxhdGU6IGBcclxuXHRcdFx0XHRcdGxpXHJcblx0XHRcdFx0XHRcdC4kdGV4dFxyXG5cdFx0XHRcdFx0XHQuY29tcGxldGVcclxuXHRcdFx0XHRcdFx0XHRcIkNvbXBsZXRlIVwiXHJcblx0XHRcdFx0YCxcclxuXHRcdFx0XHRjb21wbGV0ZWQ6IFthbHdheXModHJ1ZSksICcuY29tcGxldGV8Y2xpY2snXSxcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdCRyb290LmZpbmQoJy5hZGQtdG9kbycpLmNsaWNrKCk7XHJcblx0XHQkcm9vdC5maW5kKCcuYWRkLXRvZG8nKS5jbGljaygpO1xyXG5cdFx0JHJvb3QuZmluZCgnLmFkZC10b2RvJykuY2xpY2soKTtcclxuXHRcdCRyb290LmZpbmQoJy5hZGQtdG9kbycpLmNsaWNrKCk7XHJcblx0XHQkcm9vdC5maW5kKCd1bCA+ICo6bnRoLWNoaWxkKDMpIC5jb21wbGV0ZScpLmNsaWNrKCk7XHJcblx0XHQvL2NvbnNvbGUubG9nKCdhcHAnLCBhcHApO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKCRyb290LmZpbmQoJy51bmRvbmVfbnVtJykuaHRtbCgpLCAnMycpO1xyXG5cdFx0XHJcblx0XHRcclxuXHR9KVxyXG5cdFxyXG5cdGl0KCdHZXR0aW5nIGRhdGEgZnJvbSBhcnJheXMgYnkgaW5kZXgnLCBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIGFwcCA9IEZpcmVyYSh7XHJcblx0XHRcdF9fcm9vdDoge1xyXG5cdFx0XHRcdCR0ZW1wbGF0ZTogYFxyXG5cdFx0XHRcdFx0XHRoMVxyXG5cdFx0XHRcdFx0XHRcdFwiVHJhaW5zXCJcclxuXHRcdFx0XHRcdFx0LnRyYWlucyRcclxuXHRcdFx0XHRcdFx0LlxyXG5cdFx0XHRcdFx0XHRcdC5cclxuXHRcdFx0XHRcdFx0XHRcdFwiRWRpdCB0cmFpblwiXHJcblx0XHRcdFx0XHRcdFx0LmVkaXQtdHJhaW4tZm9ybSRlZGl0X3RyYWluX2Zvcm1cclxuXHRcdFx0XHRgLFxyXG5cdFx0XHRcdCRlbDogJChcIi50ZXN0LXRyYWluczJcIiksXHJcblx0XHRcdFx0dHJhaW5zX2FycjogWydqdXN0JywgW1xyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRudW1iZXI6IDExNyxcclxuXHRcdFx0XHRcdFx0aWQ6IDEsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRudW1iZXI6IDE0OCxcclxuXHRcdFx0XHRcdFx0aWQ6IDIsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRudW1iZXI6IDQ5LFxyXG5cdFx0XHRcdFx0XHRpZDogMyxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XV0sXHJcblx0XHRcdFx0JGNoaWxkcmVuOiB7XHJcblx0XHRcdFx0XHR0cmFpbnM6IFsnbGlzdCcsICd0cmFpbicsICcuLi90cmFpbnNfYXJyJ10sXHJcblx0XHRcdFx0XHRlZGl0X3RyYWluX2Zvcm06IHtcclxuXHRcdFx0XHRcdFx0dHlwZTogJ2VkaXRfdHJhaW5fZm9ybScsXHJcblx0XHRcdFx0XHRcdGFkZDogJ2VkaXRfdHJhaW4nLFxyXG5cdFx0XHRcdFx0XHRyZW1vdmU6ICdlZGl0X3RyYWluX2Zvcm0vY2xvc2UnXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRlZGl0X3RyYWluOiBbXHJcblx0XHRcdFx0XHRmdW5jdGlvbihhKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdDbGljayEnLCBhKTtcclxuXHRcdFx0XHRcdH0sICd0cmFpbnMvKi9lZGl0X3RyYWluJ1xyXG5cdFx0XHRcdF1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZWRpdF90cmFpbl9mb3JtOiB7XHJcblx0XHRcdFx0JHRlbXBsYXRlOiBgXHJcblx0XHRcdFx0LlxyXG5cdFx0XHRcdFx0XCJlZGl0aW5nIHRyYWluLi4uXCJcclxuXHRcdFx0XHRcdGEuY2xvc2UoaHJlZjogb2xvbG8pXHJcblx0XHRcdFx0XHRcdFwiQ2xvc2VcIlxyXG5cdFx0XHRcdGAsXHJcblx0XHRcdFx0Y2xvc2U6IFsnLmNsb3NlfGNsaWNrJ11cclxuXHRcdFx0fSxcclxuXHRcdFx0dHJhaW46IHtcclxuXHRcdFx0XHQkdGVtcGxhdGU6IGBcclxuXHRcdFx0XHRcdGxpXHJcblx0XHRcdFx0XHRcdC5cclxuXHRcdFx0XHRcdFx0XHRcIlRyYWluICNcIlxyXG5cdFx0XHRcdFx0XHRcdHNwYW4ubnVtYmVyJFxyXG5cdFx0XHRcdFx0XHQuXHJcblx0XHRcdFx0XHRcdFx0YS5lZGl0KGhyZWY6ICMpXHJcblx0XHRcdFx0XHRcdFx0XHRcIkVkaXRcIlxyXG5cdFx0XHRcdFx0YCxcclxuXHRcdFx0XHRlZGl0X3RyYWluOiBbJ3NlY29uZCcsICcuZWRpdHxjbGljaycsICctJHJlYWxfdmFsdWVzJ11cclxuXHRcdFx0fSxcclxuXHRcdFx0JHBhY2thZ2VzOiBbJ296ZW5mYW50X25ldycsICdodG1sQ2VsbHMnXVxyXG5cdFx0fSlcclxuXHRcdC8vY29uc29sZS5sb2coJ2FwcCcsIGFwcCk7XHJcblx0fSlcclxuXHRpdCgnVGVzdGluZyBuZXcgJGNoaWxkIGludGVyZmFjZScsIGZ1bmN0aW9uKCl7XHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0YTogMTAsXHJcblx0XHRcdFx0YjogMjAsXHJcblx0XHRcdFx0JGNoaWxkX3RvZG86ICd0b2RvJyxcclxuXHRcdFx0XHRjOiBbJysnLCAnYScsICdiJ10sXHJcblx0XHRcdH0sXHJcblx0XHRcdHRvZG86IHtcclxuXHRcdFx0XHRkOiBbYWRkZXIoMTIpLCAnLi4vYyddLFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2QnLCAndG9kbycpLCA0Mik7XHJcblx0fSlcclxuXHRpdCgnVGVzdGluZyBuZXcgJGNoaWxkIGludGVyZmFjZScsIGZ1bmN0aW9uKCl7XHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0YTogMTAsXHJcblx0XHRcdFx0YjogMjAsXHJcblx0XHRcdFx0JGNoaWxkX3RvZG86ICd0b2RvJyxcclxuXHRcdFx0XHRjOiBbJysnLCAnYScsICdiJ10sXHJcblx0XHRcdH0sXHJcblx0XHRcdHRvZG86IHtcclxuXHRcdFx0XHRkOiBbYWRkZXIoMTIpLCAnLi4vYyddLFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2QnLCAndG9kbycpLCA0Mik7XHJcblx0fSlcclxuXHRpdCgnVGVzdGluZyBuZXcgJGNoaWxkIGludGVyZmFjZSAyJywgZnVuY3Rpb24oKXtcclxuXHRcdHZhciBhcHAgPSBGaXJlcmEoe1xyXG5cdFx0XHRfX3Jvb3Q6IHtcclxuXHRcdFx0XHRhOiAxMCxcclxuXHRcdFx0XHRiOiAyMCxcclxuXHRcdFx0XHQkY2hpbGRfdG9kbzoge1xyXG5cdFx0XHRcdFx0ZDogW2FkZGVyKDEyKSwgJy4uL2MnXSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGM6IFsnKycsICdhJywgJ2InXSxcclxuXHRcdFx0fSxcclxuXHRcdH0pXHJcblx0XHRhc3NlcnQuZXF1YWwoYXBwLmdldCgnZCcsICd0b2RvJyksIDQyKTtcclxuXHR9KVxyXG5cdGl0KCdUZXN0aW5nIG5ldyAkY2hpbGQgaW50ZXJmYWNlIDM6IGFkZCBhbmQgcmVtb3ZlJywgZnVuY3Rpb24oKXtcclxuXHRcdHZhciBhcHAgPSBGaXJlcmEoe1xyXG5cdFx0XHRfX3Jvb3Q6IHtcclxuXHRcdFx0XHRhOiAxMCxcclxuXHRcdFx0XHRiOiAyMCxcclxuXHRcdFx0XHQkZWw6ICQoXCIudGVzdC1uZXctY2hpbGRyZW5cIiksXHJcblx0XHRcdFx0c29tZXZhbDogWyd0b2RvL29sb2xvJ10sXHJcblx0XHRcdFx0JHRlbXBsYXRlOiBgXHJcblx0XHRcdFx0LlxyXG5cdFx0XHRcdFx0YS5hZGQoaHJlZjogIylcclxuXHRcdFx0XHRcdFx0XCJTaG93IHRvZG9cIlxyXG5cdFx0XHRcdC5cclxuXHRcdFx0XHRcdGEucmVtb3ZlKGhyZWY6ICMpXHJcblx0XHRcdFx0XHRcdFwiSGlkZVwiXHJcblx0XHRcdFx0LlxyXG5cdFx0XHRcdFx0LiRzb21ldmFsXHJcblx0XHRcdFx0LlxyXG5cdFx0XHRcdFx0LnRvZG8kXHJcblx0XHRcdFx0YCxcclxuXHRcdFx0XHQkY2hpbGRfdG9kbzogWydtYXAnLCB7XHJcblx0XHRcdFx0XHQnLmFkZHxjbGljayc6ICd0b2RvJyxcclxuXHRcdFx0XHRcdCcucmVtb3ZlfGNsaWNrJzogZmFsc2UsXHJcblx0XHRcdFx0fV0sXHJcblx0XHRcdFx0YzogWycrJywgJ2EnLCAnYiddLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR0b2RvOiB7XHJcblx0XHRcdFx0b2xvbG86IDQyLFxyXG5cdFx0XHRcdCR0ZW1wbGF0ZTogYFxyXG5cdFx0XHRcdFx0LnRvZG9zeWEoIGJhY2tncm91bmQtY29sb3I6IGdyZWVuLCBcclxuXHRcdFx0XHRcdFx0XHR3aWR0aDogMzAwcHgsIFxyXG5cdFx0XHRcdFx0XHRcdGhlaWdodDogNTBweCwgXHJcblx0XHRcdFx0XHRcdFx0bWFyZ2luOiAxMHB4LCBcclxuXHRcdFx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiAxMHB4LCBcclxuXHRcdFx0XHRcdFx0XHRwYWRkaW5nOiAxMHB4LCBcclxuXHRcdFx0XHRcdFx0XHRjb2xvcjogd2hpdGUgXHJcblx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0XCJ0b2RvXCJcclxuXHRcdFx0XHRgLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHQkcGFja2FnZXM6IFsnb3plbmZhbnRfbmV3JywgJ2h0bWxDZWxscyddXHJcblx0XHR9KVxyXG5cdFx0JChcIi50ZXN0LW5ldy1jaGlsZHJlbiAuYWRkXCIpLmNsaWNrKCk7XHJcblx0XHRjb25zb2xlLmxvZygnYXBwJywgYXBwKTtcclxuXHRcdGFzc2VydC5lcXVhbCgkKFwiLnRlc3QtbmV3LWNoaWxkcmVuIC50b2Rvc3lhXCIpLmxlbmd0aCwgMSk7XHJcblx0XHQkKFwiLnRlc3QtbmV3LWNoaWxkcmVuIC5yZW1vdmVcIikuY2xpY2soKTtcclxuXHRcdGFzc2VydC5lcXVhbCgkKFwiLnRlc3QtbmV3LWNoaWxkcmVuIC50b2Rvc3lhXCIpLmxlbmd0aCwgMCk7XHJcblx0fSlcclxuXHRpdCgnVGVzdCB0b2RvIG12YycsIGZ1bmN0aW9uKCl7XHJcblx0XHR2YXIgJHJvb3QgPSAkKFwiLnRlc3QtdG9kby1tdmNcIik7XHJcblx0XHR2YXIgdHlwZSA9IChzdHIpID0+IHtcclxuXHRcdFx0JHJvb3QuZmluZCgnaW5wdXRbdHlwZT10ZXh0XScpLnZhbChzdHIpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGVudGVyID0gKCkgPT4ge1xyXG5cdFx0XHR0cmlnZ2VyRW50ZXIoJHJvb3QuZmluZCgnaW5wdXRbdHlwZT10ZXh0XScpKTtcclxuXHRcdH1cclxuXHRcdHZhciBtYWluX3RlbXBsYXRlID0gYFxyXG5cdFx0XHRoMSBcclxuXHRcdFx0XHRcIlRvZG8gTVZDXCJcclxuXHRcdFx0LlxyXG5cdFx0XHRcdFwiVG9kb3NcIlxyXG5cdFx0XHR1bCR0b2Rvc1xyXG5cdFx0XHQuXHJcblx0XHRcdFx0XCJEaXNwbGF5OlwiXHJcblx0XHRcdFx0dWwuZGlzcGxheVxyXG5cdFx0XHRcdFx0LmFsbFxyXG5cdFx0XHRcdFx0XHRcIkFsbFwiXHJcblx0XHRcdFx0XHQuZG9uZVxyXG5cdFx0XHRcdFx0XHRcIkRvbmVcIlxyXG5cdFx0XHRcdFx0LnVuZG9uZVxyXG5cdFx0XHRcdFx0XHRcIlVuZG9uZVwiXHJcblx0XHRcdC5cclxuXHRcdFx0XHRzcGFuXHJcblx0XHRcdFx0XHRcIkNvbXBsZXRlZDogXCJcclxuXHRcdFx0XHRcdHNwYW4uY29tcGxldGVkX251bWJlciRcclxuXHRcdFx0LlxyXG5cdFx0XHRcdHNwYW5cclxuXHRcdFx0XHRcdFwiVG90YWw6IFwiXHJcblx0XHRcdFx0XHRzcGFuLmFsbF9udW1iZXIkXHJcblx0XHRcdC5cclxuXHRcdFx0XHRhLmNsZWFyLWNvbXBsZXRlZChocmVmOiAjKVxyXG5cdFx0XHRcdFx0XCJDbGVhciBjb21wbGV0ZWRcIlxyXG5cdFx0XHQuXHJcblx0XHRcdFx0aDJcclxuXHRcdFx0XHRcdFwiQWRkIHRvZG9cIlxyXG5cdFx0XHRcdC5cclxuXHRcdFx0XHRcdHRleHQubmV3LXRvZG8tdGV4dFxyXG5cdFx0YDtcclxuXHRcdHZhciB0b2RvX3RlbXBsYXRlID0gYFxyXG5cdFx0XHQuXHJcblx0XHRcdFx0XCJUaGlzIGlzIHRvZG9cIlxyXG5cdFx0XHQuJHRleHRcclxuXHRcdFx0LlxyXG5cdFx0XHRcdGEuY29tcGxldGUoaHJlZjogIylcclxuXHRcdFx0XHRcdFwiQ29tcGxldGVcIlxyXG5cdFx0XHQuXHJcblx0XHRcdFx0YS5yZW1vdmUoaHJlZjogIylcclxuXHRcdFx0XHRcdFwiUmVtb3ZlXCJcclxuXHRcdGA7XHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0JHRlbXBsYXRlOiBtYWluX3RlbXBsYXRlLFxyXG5cdFx0XHRcdCRlbDogJHJvb3QsXHJcblx0XHRcdFx0JGNoaWxkX3RvZG9zOiBbJ2xpc3QnLCB7XHJcblx0XHRcdFx0XHR0eXBlOiAndG9kbycsXHJcblx0XHRcdFx0XHRwdXNoOiBbXHJcblx0XHRcdFx0XHRcdGFzKCd0ZXh0Jywge2NvbXBsZXRlOiBmYWxzZX0pLCBcclxuXHRcdFx0XHRcdFx0Jy4uL25ld190b2RvcydcclxuXHRcdFx0XHRcdF0sXHJcblx0XHRcdFx0XHRwb3A6IFsnam9pbicsIFxyXG5cdFx0XHRcdFx0XHQnZG9uZScsIFxyXG5cdFx0XHRcdFx0XHRbaW5kKDApLCAnKi8ucmVtb3ZlfGNsaWNrJ10sIFxyXG5cdFx0XHRcdFx0XHRbKGEsIGIpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYSA/IGIgOiBhO1xyXG5cdFx0XHRcdFx0XHR9LCAnLi4vcmVtb3ZlX2RvbmUnLCAnLWNvbXBsZXRlZF9pbmRpY2VzJ11cclxuXHRcdFx0XHRcdF0sXHJcblx0XHRcdFx0XHRzZWxmOiB7XHJcblx0XHRcdFx0XHRcdCdkaXNwbGF5JzogW2Zyb21NYXAoe1xyXG5cdFx0XHRcdFx0XHRcdGFsbDogJyonLFxyXG5cdFx0XHRcdFx0XHRcdHVuZG9uZTogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0XHRkb25lOiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0fSksICcuLi9kaXNwbGF5J10sXHJcblx0XHRcdFx0XHRcdCdjb21wbGV0ZWRfaW5kaWNlcyc6IFsnaW5kaWNlcycsICdjb21wbGV0ZSddLFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1dLFxyXG5cdFx0XHRcdCdyZW1vdmVfZG9uZSc6IFsnLmNsZWFyLWNvbXBsZXRlZHxjbGljayddLFxyXG5cdFx0XHRcdCduZXdfdG9kb3MnOiBbJy5uZXctdG9kby10ZXh0fGVudGVyVGV4dCddLFxyXG5cdFx0XHRcdCdkaXNwbGF5JzogWycuZGlzcGxheSA+ICp8Y2xpY2t8YXR0cihjbGFzcyknXSxcclxuXHRcdFx0XHQnLm5ldy10b2RvLXRleHR8c2V0dmFsJzogW2Fsd2F5cygnJyksICduZXdfdG9kb3MnXSxcclxuXHRcdFx0XHQnY29tcGxldGVkX251bWJlcic6IFsnY291bnQnLCAndG9kb3MvY29tcGxldGUnXSxcclxuXHRcdFx0XHQnYWxsX251bWJlcic6IFsnY291bnQnLCAndG9kb3MvKiddLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR0b2RvOiB7XHJcblx0XHRcdFx0J3x2aXNpYmlsaXR5JzogWychPScsICcuLi9kaXNwbGF5JywgJ2NvbXBsZXRlJ10sXHJcblx0XHRcdFx0J3xoYXNDbGFzcyhjb21wbGV0ZWQpJzogWydjb21wbGV0ZSddLFxyXG5cdFx0XHRcdCR0ZW1wbGF0ZTogdG9kb190ZW1wbGF0ZSxcclxuXHRcdFx0XHRjb21wbGV0ZTogWycuY29tcGxldGV8Y2xpY2snXSxcclxuXHRcdFx0XHQnYyc6IFsnKycsICdhJywgJ2InXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHQkcGFja2FnZXM6IFsnb3plbmZhbnRfbmV3JywgJ2h0bWxDZWxscyddXHJcblx0XHR9KVxyXG5cdFx0Y29uc29sZS5sb2coJ2FwcCcsIGFwcCwgJHJvb3QuZmluZCgnaW5wdXRbdHlwZT10ZXh0XScpKTtcclxuXHRcdHR5cGUoJ0RvIHNvbWV0aGluZyB1c2VmdWwnKTtcclxuXHRcdGVudGVyKCk7XHJcblxyXG5cdFx0dHlwZSgnSGF2ZSBhIHJlc3QnKTtcclxuXHRcdGVudGVyKCk7XHJcblxyXG5cdFx0dHlwZSgnV3JpdGUgc29tZSB0ZXN0cycpO1xyXG5cdFx0ZW50ZXIoKTtcclxuXHJcblx0XHQkcm9vdC5maW5kKCd1bCA+ICo6bnRoLWNoaWxkKDIpIC5jb21wbGV0ZScpLmNsaWNrKCk7XHJcblxyXG5cdFx0dHlwZSgnTGlzdGVuIHRvIG11c2ljJyk7XHJcblx0XHRlbnRlcigpO1xyXG5cclxuXHRcdCRyb290LmZpbmQoJ3VsID4gKjpudGgtY2hpbGQoMSkgLmNvbXBsZXRlJykuY2xpY2soKTtcclxuXHJcblx0XHRhc3NlcnQuZXF1YWwoTnVtYmVyKCRyb290LmZpbmQoJ3NwYW4uY29tcGxldGVkX251bWJlcicpLmh0bWwoKSksIDIpO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKE51bWJlcigkcm9vdC5maW5kKCdzcGFuLmFsbF9udW1iZXInKS5odG1sKCkpLCA0KTtcclxuXHJcblx0XHQkcm9vdC5maW5kKCcuY2xlYXItY29tcGxldGVkJykuY2xpY2soKTtcclxuXHJcblx0XHRhc3NlcnQuZXF1YWwoTnVtYmVyKCRyb290LmZpbmQoJ3NwYW4uY29tcGxldGVkX251bWJlcicpLmh0bWwoKSksIDApO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKE51bWJlcigkcm9vdC5maW5kKCdzcGFuLmFsbF9udW1iZXInKS5odG1sKCkpLCAyKTtcclxuXHJcblx0XHQkcm9vdC5maW5kKCcuY2xlYXItY29tcGxldGVkJykuY2xpY2soKTtcclxuXHJcblx0XHRhc3NlcnQuZXF1YWwoTnVtYmVyKCRyb290LmZpbmQoJ3NwYW4uY29tcGxldGVkX251bWJlcicpLmh0bWwoKSksIDApO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKE51bWJlcigkcm9vdC5maW5kKCdzcGFuLmFsbF9udW1iZXInKS5odG1sKCkpLCAyKTtcclxuXHRcdFxyXG5cdH0pXHJcblx0XHJcblx0aXQoJ0R5bmFtaWMgZGVwZW5kZW5jeScsICgpID0+IHtcclxuXHRcdC8vIEB0YmRcclxuXHRcdHZhciBhcHAgPSBGaXJlcmEoe1xyXG5cdFx0XHRfX3Jvb3Q6IHtcclxuXHRcdFx0XHRhMTogMTAsXHJcblx0XHRcdFx0YTI6IDIwLFxyXG5cdFx0XHRcdGEzOiA0NSxcclxuXHRcdFx0XHRiMTogLTEsXHJcblx0XHRcdFx0YjI6IDksXHJcblx0XHRcdFx0YjM6IDMsXHJcblx0XHRcdFx0ZmxhZzogJ2EnLFxyXG5cdFx0XHRcdHZhbDogWydkeW5hbWljJywgKGxldHRlcikgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIFsoYSwgYiwgYykgPT4ge1xyXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjb21wdXRpbmcgc3VtJyk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBhICsgYiArIGM7XHJcblx0XHRcdFx0XHR9LCBsZXR0ZXIgKyAnMScsIGxldHRlciArICcyJywgbGV0dGVyICsgJzMnXVxyXG5cdFx0XHRcdH0sICdmbGFnJ11cclxuXHRcdFx0fSxcclxuXHRcdFx0JHBhY2thZ2VzOiBbJ296ZW5mYW50X25ldycsICdodG1sQ2VsbHMnXVxyXG5cdFx0fSlcclxuXHRcdGFzc2VydC5lcXVhbChhcHAuZ2V0KCd2YWwnKSwgNzUpO1xyXG5cdFx0YXBwLnNldCgnYTEnLCAxMik7XHJcblx0XHRhc3NlcnQuZXF1YWwoYXBwLmdldCgndmFsJyksIDc3KTtcclxuXHRcdGFwcC5zZXQoJ2ZsYWcnLCAnYicpO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ3ZhbCcpLCAxMSk7XHJcblx0fSlcclxuXHRcclxuXHRpdCgnTXVsdGktbGF5ZXIgZ3JpZCBiZW5jaG1hcmsnLCBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIGdyaWQgPSB7XHJcblx0XHRcdGEwOiAxMCxcclxuXHRcdFx0YjA6IDIwLFxyXG5cdFx0XHRjMDogMzAsXHJcblx0XHRcdGQwOiA0MlxyXG5cdFx0fVxyXG5cdFx0Zm9yKHZhciBpID0gMTsgaSA8PSAxMDAwOyBpKyspe1xyXG5cdFx0XHR2YXIgcHJldiA9IGkgLSAxO1xyXG5cdFx0XHRncmlkWydhJyArIGldID0gWydiJyArIHByZXZdO1xyXG5cdFx0XHRncmlkWydiJyArIGldID0gWyctJywgJ2EnICsgcHJldiwgJ2MnICsgcHJldl07XHJcblx0XHRcdGdyaWRbJ2MnICsgaV0gPSBbJysnLCAnYicgKyBwcmV2LCAnZCcgKyBwcmV2XTtcclxuXHRcdFx0Z3JpZFsnZCcgKyBpXSA9IFsnYycgKyBwcmV2XTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0dGltZXIoJ0luaXRpbmcgYXBwJyk7XHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtfX3Jvb3Q6IGdyaWR9KTtcclxuXHRcdHRpbWVyKCdJbml0aW5nIGFwcCcpLnN0b3AoKTtcclxuXHRcdFxyXG5cdFx0dGltZXIoJ1VwZGF0aW5nIGFwcCcpO1xyXG5cdFx0YXBwLnNldCh7J2EwJzogMywgJ2IwJzogMTAsICdjMCc6IDM1LCAnZDAnOiAxNH0pO1xyXG5cdFx0dGltZXIoJ3N0b3BfYWxsJyk7XHJcblx0XHRcclxuXHRcdHRpbWVyKCdVcGRhdGluZyBhcHAgMicpO1xyXG5cdFx0YXBwLnNldCh7J2EwJzogMTAsICdiMCc6IC0yMCwgJ2MwJzogNDUsICdkMCc6IDM3fSk7XHJcblx0XHR0aW1lcignVXBkYXRpbmcgYXBwIDInKS5zdG9wKCk7XHJcblx0XHQvL2NvbnNvbGUubG9nKGkrJzonLCBhcHAuZ2V0KCdhJyArIChpIC0gMSkpLCBhcHAuZ2V0KCdiJyArIChpIC0gMSkpLCBhcHAuZ2V0KCdjJyArIChpIC0gMSkpLCBhcHAuZ2V0KCdkJyArIChpIC0gMSkpKTtcclxuXHR9KVxyXG5cdFxyXG5cdGl0KCdBY2N1bScsICgpID0+IHtcclxuXHRcdHZhciBhcHAgPSBGaXJlcmEoe1xyXG5cdFx0XHRfX3Jvb3Q6IHtcclxuXHRcdFx0XHRhOiA0MixcclxuXHRcdFx0XHRiOiBbKHZhbCkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbCUyID8gdmFsIDogRmlyZXJhLm5vb3A7XHRcclxuXHRcdFx0XHR9LCAnYSddLFxyXG5cdFx0XHRcdGM6IFsnYWNjdW0nLCAnYiddXHJcblx0XHRcdH0sXHJcblx0XHR9KVxyXG5cdFx0YXBwLnNldCgnYScsIDMpO1xyXG5cdFx0YXBwLnNldCgnYScsIDQpO1xyXG5cdFx0YXBwLnNldCgnYScsIDUpO1xyXG5cdFx0YXBwLnNldCgnYScsIDYpO1xyXG5cdFx0YXNzZXJ0LmRlZXBFcXVhbChhcHAuZ2V0KCdjJyksIFszLCA1XSk7XHJcblx0fSlcclxuXHRpdCgnVHJhbnNpc3RBJywgKCkgPT4ge1xyXG5cdFx0dmFyIGFwcCA9IEZpcmVyYSh7XHJcblx0XHRcdF9fcm9vdDoge1xyXG5cdFx0XHRcdGE6IGZhbHNlLFxyXG5cdFx0XHRcdGI6IDQyLFxyXG5cdFx0XHRcdGM6IFsndHJhbnNpc3QnLCAnYScsICctYiddXHJcblx0XHRcdH0sXHJcblx0XHR9KVxyXG5cdFx0YXBwLnNldCgnYicsIDM1KTtcclxuXHRcdGFwcC5zZXQoJ2EnLCB0cnVlKTtcclxuXHRcdGFzc2VydC5lcXVhbChhcHAuZ2V0KCdjJyksIDM1KTtcclxuXHRcdGFwcC5zZXQoJ2InLCA0Mik7XHJcblx0XHRhc3NlcnQuZXF1YWwoYXBwLmdldCgnYycpLCAzNSk7XHJcblx0XHRhcHAuc2V0KCdhJywgZmFsc2UpO1xyXG5cdFx0YXBwLnNldCgnYScsIHRydWUpO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2MnKSwgNDIpO1xyXG5cdH0pXHJcblx0XHJcblx0aXQoJ1dyb25nIGxpbmtpbmcnLCAoKSA9PiB7XHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0YTogNDIsXHJcblx0XHRcdFx0JGNoaWxkX2ZvbzogJ2JhcidcclxuXHRcdFx0fSxcclxuXHRcdFx0YmFyOiB7XHJcblx0XHRcdFx0YjogWyd6J11cclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdHZhciBzdCA9IGFwcC5nZXRTdHJ1Y3QoKTtcclxuXHRcdGNvbnNvbGUubG9nKCdTVCcsIHN0KTsgXHJcblx0fSlcclxuXHRpdCgnXCJkYXRhXCIgZm9yIGxpc3QnLCAoKSA9PiB7ICAgIFxyXG5cdFx0dmFyIGdldF9maWVsZHNfbWFwID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIG1hcCA9IHt9O1xyXG5cdFx0XHRyZXR1cm4gKFtrZXksIHZhbF0pID0+IHtcclxuXHRcdFx0XHRtYXBba2V5XSA9IHZhbDtcclxuXHRcdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9IFxyXG5cdFx0dmFyIGFwcCA9IEZpcmVyYSh7XHJcblx0XHRcdF9fcm9vdDoge1xyXG5cdFx0XHRcdCR0ZW1wbGF0ZTogYFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHQuXHJcblx0XHRcdFx0XHRcdFx0XCJCbG9ja3NcIlxyXG5cdFx0XHRcdFx0XHQuYmxvY2tzJCAgIFxyXG5cdFx0XHRcdGAsXHJcblx0XHRcdFx0JGVsOiAkKFwiLnRlc3QtbmVzdGVkLXRlbXBsYXRlLXJlbmRlcmluZ1wiKSwgXHJcblx0XHRcdFx0JGNoaWxkX2Jsb2NrczogWydsaXN0Jywge1xyXG5cdFx0XHRcdFx0XHR0eXBlOiAnYmxvY2snLFxyXG5cdFx0XHRcdFx0XHRkYXRhOiBbe30sIHt9LCB7fV0sXHJcblx0XHRcdFx0XHRcdHNlbGY6IHtcclxuXHRcdFx0XHRcdFx0XHR0ZW1wbHM6IFsnY2xvc3VyZScsIGdldF9maWVsZHNfbWFwLCAnKi8kb3plbmZhbnRfcmVuZGVyJ11cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1dXHJcblx0XHRcdH0sXHJcblx0XHRcdGJsb2NrOiB7XHJcblx0XHRcdFx0JHRlbXBsYXRlOiBgXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdC5cclxuXHRcdFx0XHRcdFx0XHRcIkhlbGxvIVwiXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0YFxyXG5cdFx0XHR9LFxyXG5cdFx0XHQkcGFja2FnZXM6IFsnb3plbmZhbnRfbmV3JywgJ2h0bWxDZWxscyddXHJcblx0XHR9KVxyXG5cdFx0Y29uc29sZS5sb2coJ2FwcCcsIGFwcCk7ICBcclxuXHR9KVxyXG5cdGl0KCdOZXN0ZWQgJGluaXQnLCAoKSA9PiB7ICAgXHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0JGluaXQ6IHtcclxuXHRcdFx0XHRcdGE6IDEwLFxyXG5cdFx0XHRcdFx0YjogMzAsXHJcblx0XHRcdFx0XHRmb286ICdiYXInLFxyXG5cdFx0XHRcdFx0YWFhOiB7XHJcblx0XHRcdFx0XHRcdGJhcjogJ2JheicsXHJcblx0XHRcdFx0XHRcdGM6IDQyLFxyXG5cdFx0XHRcdFx0XHRiYmI6IHtcclxuXHRcdFx0XHRcdFx0XHRjaXR5OiAnTmV3IFRzeW5nbG9rJyxcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCRjaGlsZF9hYWE6ICduc3QnLFxyXG5cdFx0XHRcdGM6IFsnKycsICdhJywgJ2InXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRuc3Q6IHtcclxuXHRcdFx0XHQkaW5pdDoge1xyXG5cdFx0XHRcdFx0YTogMTIsXHJcblx0XHRcdFx0XHRiOiAzMCxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdCRjaGlsZF9iYmI6ICduc3QyJyxcclxuXHRcdFx0fSxcclxuXHRcdFx0bnN0Mjoge1xyXG5cdFx0XHRcdFxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2MnKSwgJzQwJyk7XHJcblx0XHRhc3NlcnQuZXF1YWwoYXBwLmdldCgnZm9vJyksICdiYXInKTtcclxuXHRcdGFzc2VydC5lcXVhbChhcHAuZ2V0KCdiYXInLCAnYWFhJyksICdiYXonKTtcclxuXHRcdGFzc2VydC5lcXVhbChhcHAuZ2V0KCdjaXR5JywgJ2FhYS9iYmInKSwgJ05ldyBUc3luZ2xvaycpO1xyXG5cdFx0Y29uc29sZS5sb2coJ0MgPSAnLCBhcHAuZ2V0KCdjJykpO1xyXG5cdH0pXHJcblx0LyppdCgndGVzdGluZyBPbmNlJywgKCkgPT4ge1xyXG5cdFx0dmFyIGFwcCA9IEZpcmVyYSh7XHJcblx0XHRcdF9fcm9vdDoge1xyXG5cdFx0XHRcdCRlbDogJChcIi50ZXN0LW9uY2VcIiksXHJcblx0XHRcdFx0J2lucHV0X2JsdXJyZWQnOiBbJ29uY2UnLCAnaW5wdXR8Ymx1ciddLFxyXG5cdFx0XHR9XHJcblx0XHRcdGFzc2VydC5lcXVhbChhcHAuZ2V0KCdpbnB1dF9ibHVycmVkJyksIHVuZGVmaW5lZCk7XHJcblx0XHRcdCQoXCIudGVzdC1vbmNlIGlucHV0XCIpLmJsdXIoKTtcclxuXHRcdFx0YXNzZXJ0LmVxdWFsKGFwcC5nZXQoJ2lucHV0X2JsdXJyZWQnKSBpbnN0YW5jZW9mIE9iamVjdCwgdHJ1ZSk7XHJcblx0XHRcdFxyXG5cdFx0fSlcclxuXHRcdFxyXG5cdH0pKi9cclxuXHRpdCgnKiogbGlua2luZycsICgpID0+IHtcclxuXHRcdHZhciAkcm9vdCA9ICAkKFwiLnRlc3QtY29tbWVudHNcIik7XHJcblx0XHR2YXIgYyA9IDA7XHJcblx0XHR2YXIgYXBwID0gRmlyZXJhKHtcclxuXHRcdFx0X19yb290OiB7XHJcblx0XHRcdFx0JyRlbCc6ICRyb290LFxyXG5cdFx0XHRcdCdjbGlja3MnOiBbKCkgPT4ge1xyXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnQlROIENMQyEnKTtcclxuXHRcdFx0XHRcdCsrYztcdFxyXG5cdFx0XHRcdH0sICcqKi9idG5fY2xpY2snXSxcclxuXHRcdFx0XHQnY29tbWVudHNfYXJyJzogWydqdXN0JywgW1xyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dXNlcjogJ01pa29sYWxleCcsXHJcblx0XHRcdFx0XHRcdFx0dGV4dDogJ05pY2UgcGhvdG8hJ1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dXNlcjogJ2dlbzE0dHI4OScsXHJcblx0XHRcdFx0XHRcdFx0dGV4dDogJysxJ1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dXNlcjogJzJ0ZTExNicsXHJcblx0XHRcdFx0XHRcdFx0dGV4dDogJ0xpa2UhJ1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdF1dLFxyXG5cdFx0XHRcdCckY2hpbGRfY29tbWVudHMnOiBbJ2xpc3QnLCB7dHlwZTogJ2NvbW1lbnQnLCBkYXRhc291cmNlOiBbJy4uL2NvbW1lbnRzX2FyciddfV0sXHJcblx0XHRcdFx0JyR0ZW1wbGF0ZSc6IGBcclxuXHRcdFx0XHQuaDFcclxuXHRcdFx0XHRcdFwiQ29tbWVudHNcIlxyXG5cdFx0XHRcdHVsLmNvbW1lbnRzJFxyXG5cdFx0XHRcdGBcclxuXHRcdFx0fSxcclxuXHRcdFx0Y29tbWVudDoge1xyXG5cdFx0XHRcdCdidG5fY2xpY2snOiBbJy5wbHVzLW9uZXxjbGljayddLFxyXG5cdFx0XHRcdCckdGVtcGxhdGUnOiBgXHJcblx0XHRcdFx0bGkuY29tbWVudFxyXG5cdFx0XHRcdFx0LnVzZXIkKGZvbnQtd2VpZ2h0OiBib2xkKVxyXG5cdFx0XHRcdFx0LnRleHQkXHJcblx0XHRcdFx0XHRidXR0b24ucGx1cy1vbmVcclxuXHRcdFx0XHRcdFx0XCIrMVwiXHJcblx0XHRcdFx0YCxcclxuXHRcdFx0fSxcclxuXHRcdFx0JHBhY2thZ2VzOiBbJ296ZW5mYW50X25ldycsICdodG1sQ2VsbHMnXVxyXG5cdFx0fSlcclxuXHRcdC8vY29uc29sZS5sb2coJyoqJywgYXBwKTtcclxuXHRcdCRyb290LmZpbmQoJy5jb21tZW50IC5wbHVzLW9uZScpLmNsaWNrKCk7XHJcblx0XHRhc3NlcnQuZXF1YWwoYywgMyk7XHJcblx0fSlcclxuXHRpdCgnXl4gbGlua2luZycsICgpID0+IHtcclxuXHRcdHZhciAkcm9vdCA9ICAkKFwiLnRlc3QtY29tbWVudHMyXCIpO1xyXG5cdFx0dmFyIGMgPSAwO1xyXG5cdFx0dmFyIGFwcCA9IEZpcmVyYSh7XHJcblx0XHRcdF9fcm9vdDoge1xyXG5cdFx0XHRcdCckZWwnOiAkcm9vdCxcclxuXHRcdFx0XHQnY29tbWVudHNfYXJyJzogWydqdXN0JywgW1xyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dXNlcjogJ01pa29sYWxleCcsXHJcblx0XHRcdFx0XHRcdFx0dGV4dDogJ05pY2UgcGhvdG8hJ1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dXNlcjogJ2dlbzE0dHI4OScsXHJcblx0XHRcdFx0XHRcdFx0dGV4dDogJysxJ1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dXNlcjogJzJ0ZTExNicsXHJcblx0XHRcdFx0XHRcdFx0dGV4dDogJ0xpa2UhJ1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdF1dLFxyXG5cdFx0XHRcdHNlbGVjdGFibGU6IGZhbHNlLFxyXG5cdFx0XHRcdHVzZXJuYW1lOiAnTWlrb2xhbGV4JyxcclxuXHRcdFx0XHQnJGNoaWxkX2NvbW1lbnRzJzogWydsaXN0Jywge3R5cGU6ICdjb21tZW50JywgZGF0YXNvdXJjZTogWycuLi9jb21tZW50c19hcnInXX1dLFxyXG5cdFx0XHRcdCckdGVtcGxhdGUnOiBgXHJcblx0XHRcdFx0LmgxXHJcblx0XHRcdFx0XHRcIkNvbW1lbnRzXCJcclxuXHRcdFx0XHR1bC5jb21tZW50cyRcclxuXHRcdFx0XHRgXHJcblx0XHRcdH0sXHJcblx0XHRcdGNvbW1lbnQ6IHtcclxuXHRcdFx0XHQnLnRleHR8aGFzQ2xhc3MobXktY29tbWVudCknOiBbJz09JywgJ15eL3VzZXJuYW1lJywgJ3VzZXInXSxcclxuXHRcdFx0XHQnfGhhc0NsYXNzKGFjdGl2ZSknOiBbJ3RyYW5zaXN0JywgJy9zZWxlY3RhYmxlJywgWyd2YWxNYXAnLCAnfGNsaWNrJywgJ290aGVyfGNsaWNrJ11dLFxyXG5cdFx0XHRcdCckdGVtcGxhdGUnOiBgXHJcblx0XHRcdFx0bGkuY29tbWVudFxyXG5cdFx0XHRcdFx0LnVzZXIkKGZvbnQtd2VpZ2h0OiBib2xkKVxyXG5cdFx0XHRcdFx0LnRleHQkXHJcblx0XHRcdFx0XHRidXR0b24ucGx1cy1vbmVcclxuXHRcdFx0XHRcdFx0XCIrMVwiXHJcblx0XHRcdFx0YCxcclxuXHRcdFx0fSxcclxuXHRcdFx0JHBhY2thZ2VzOiBbJ296ZW5mYW50X25ldycsICdodG1sQ2VsbHMnXVxyXG5cdFx0fSlcclxuXHRcdC8vY29uc29sZS5sb2coJ15eJywgYXBwKTtcclxuXHRcdGFzc2VydC5lcXVhbCgkcm9vdC5maW5kKCcuY29tbWVudHMnKS5jaGlsZHJlbigpLmVxKDApLmZpbmQoJy5teS1jb21tZW50JykubGVuZ3RoLCAxKTtcclxuXHRcdGFzc2VydC5lcXVhbCgkcm9vdC5maW5kKCcuY29tbWVudHMnKS5jaGlsZHJlbigpLmVxKDEpLmZpbmQoJy5teS1jb21tZW50JykubGVuZ3RoLCAwKTtcclxuXHRcdGFzc2VydC5lcXVhbCgkcm9vdC5maW5kKCcuY29tbWVudHMnKS5jaGlsZHJlbigpLmVxKDIpLmZpbmQoJy5teS1jb21tZW50JykubGVuZ3RoLCAwKTtcclxuXHRcdGFwcC5zZXQoJ3VzZXJuYW1lJywgJ2dlbzE0dHI4OScpO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKCRyb290LmZpbmQoJy5jb21tZW50cycpLmNoaWxkcmVuKCkuZXEoMCkuZmluZCgnLm15LWNvbW1lbnQnKS5sZW5ndGgsIDApO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKCRyb290LmZpbmQoJy5jb21tZW50cycpLmNoaWxkcmVuKCkuZXEoMSkuZmluZCgnLm15LWNvbW1lbnQnKS5sZW5ndGgsIDEpO1xyXG5cdFx0YXNzZXJ0LmVxdWFsKCRyb290LmZpbmQoJy5jb21tZW50cycpLmNoaWxkcmVuKCkuZXEoMikuZmluZCgnLm15LWNvbW1lbnQnKS5sZW5ndGgsIDApO1xyXG5cdFx0XHJcblx0XHQvLyRyb290LmZpbmQoJy5jb21tZW50cyA+ICo6bnRoLWNoaWxkKDIpIC50ZXh0JykuY2xpY2soKTtcclxuXHR9KVxyXG5cdGl0KCdGb3JtIHZhbGlkYXRlIGV4YW1wbGUnLCAoKSA9PiB7XHJcblx0XHQvKnZhciBwcm9wID0gKGEpID0+IHtcclxuXHRcdFx0cmV0dXJuIChiKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIGJbYV07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHZhciBndCA9IChhKSA9PiB7XHJcblx0XHRcdHJldHVybiAoYikgPT4ge1xyXG5cdFx0XHRcdHJldHVybiBiID4gYTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0dmFyIGxlbl9ndF8yID0gXy5mbG93KHByb3AobGVuZ3RoKSwgZ3QoMikpO1xyXG5cdFx0Lyp2YXIgJHJvb3QgPSAkKCcjZW50ZXItbmFtZS1hbmQtZW1haWwtZm9ybScpO1xyXG5cdFx0dmFyIHNpbXBsZV9lbWFpbF9yZWdleCA9IC9cXFMrQFxcUytcXC5cXFMrLztcclxuXHRcdHZhciBpc19lbWFpbF92YWxpZCA9IHNpbXBsZV9lbWFpbF9yZWdleC50ZXN0LmJpbmQoc2ltcGxlX2VtYWlsX3JlZ2V4KTtcclxuXHRcdHZhciBhcHAgPSB7XHJcblx0XHRcdCRlbDogJHJvb3QsXHJcblx0XHRcdGVtYWlsX3ZhbGlkOiBbaXNfZW1haWxfdmFsaWQsICdpbnB1dC5lbWFpbHxnZXR2YWwnXSxcclxuXHRcdFx0bmFtZV9lbnRlcmVkOiBbKGEpID0+IHsgcmV0dXJuIGEubGVuZ3RoID4gMiB9LCAnaW5wdXQubmFtZXxnZXR2YWwnXSxcclxuXHRcdFx0Zm9ybV92YWxpZDogWycmJicsICdlbWFpbF92YWxpZCcsICduYW1lX2VudGVyZWQnXSxcclxuXHRcdFx0Zm9ybV9kYXRhX3RvX3NlbmQ6IFsndHJhbnNpc3QnLCAnLWZvcm1fdmFsaWQnLCAnLSNlbnRlci1uYW1lLWFuZC1lbWFpbC1mb3JtfGZvcm1kYXRhJywgJ2J1dHRvbi5zZW5kfGNsaWNrJ10sXHJcblx0XHRcdGRvX3NvbWV0aGluZzogWyhkYXRhKSA9PiB7XHJcblx0XHRcdFx0Ly8gZG8gc29tZXRoaW5nIHVzZWZ1bCB3aXRoIGVudGVyZWQgZGF0YSwgZS5nLiBBSkFYIHJlcXVlc3RcclxuXHRcdFx0fSwgJ2Zvcm1fZGF0YV90b19zZW5kJ11cclxuXHRcdH07XHJcblx0XHRhcHAgPSBGaXJlcmEoe1xyXG5cdFx0XHRfX3Jvb3Q6IGFwcFxyXG5cdFx0fSlcclxuXHRcdCovXHJcblx0fSlcclxufSlcclxuZGVzY3JpYmUoJ0NoZScsIGZ1bmN0aW9uICgpIHtcclxuXHRpdCgnU2ltcGxlIGV4YW1wbGUnLCBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIGFwcCA9IEZpcmVyYSh7XHJcblx0XHRcdF9fcm9vdDoge1xyXG5cdFx0XHRcdCRlbDogJChcIi50ZXN0LWNoZVwiKSxcclxuXHRcdFx0XHRhOiBbYWx3YXlzKCdBJyksICcuYXxjbGljayddLFxyXG5cdFx0XHRcdGI6IFthbHdheXMoJ0InKSwgJy5ifGNsaWNrJ10sXHJcblx0XHRcdFx0Y2xpY2tlZF9ib3RoOiBbJ2NoZScsICcmIGEsIGInXVxyXG5cdFx0XHR9LFxyXG5cdFx0XHQkcGFja2FnZXM6IFsnaHRtbENlbGxzJywgJ3NpbXBsZUh0bWxUZW1wbGF0ZXMnXVxyXG5cdFx0fSlcclxuXHRcdCQoXCIudGVzdC1jaGUgLmFcIikuY2xpY2soKTtcclxuXHRcdCQoXCIudGVzdC1jaGUgLmJcIikuY2xpY2soKTtcclxuXHRcdGFzc2VydC5kZWVwRXF1YWwoYXBwLmdldCgnY2xpY2tlZF9ib3RoJyksIHthOiAnQScsIGI6ICdCJ30pXHJcblx0fSlcclxufSlcclxuXHJcbiIsIi8qIFxyXG4gKiBUbyBjaGFuZ2UgdGhpcyBsaWNlbnNlIGhlYWRlciwgY2hvb3NlIExpY2Vuc2UgSGVhZGVycyBpbiBQcm9qZWN0IFByb3BlcnRpZXMuXHJcbiAqIFRvIGNoYW5nZSB0aGlzIHRlbXBsYXRlIGZpbGUsIGNob29zZSBUb29scyB8IFRlbXBsYXRlc1xyXG4gKiBhbmQgb3BlbiB0aGUgdGVtcGxhdGUgaW4gdGhlIGVkaXRvci5cclxuICovXHJcblxyXG5cdHZhciBnZXRfdG9rZW4gPSAodHlwZSkgPT4ge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0Y2hpbGRyZW46IFtdLFxyXG5cdFx0fVxyXG5cdH1cclxuXHR2YXIgbWF0Y2hfc3RhcnQgPSBmdW5jdGlvbigpe1xyXG5cclxuXHR9XHJcblx0dmFyIGVtcHR5X2NoYXJzX2RlZmF1bHQgPSBbJyAnLCAnXHQnLCBgXHJcbmBdO1xyXG5cdHZhciBoZWFkID0gKGEpID0+IHtcclxuXHRcdHJldHVybiBhWzBdO1xyXG5cdH1cclxuXHR2YXIgdGFpbCA9IChhKSA9PiB7XHJcblx0XHRyZXR1cm4gYS5zbGljZSgxKTtcclxuXHR9XHJcblxyXG5cdHZhciBwYXJzZV9zZW1hbnRpY3MgPSBmdW5jdGlvbihjb25maWcsIHN0cnVjdCl7XHJcblx0XHRpZihzdHJ1Y3QgaW5zdGFuY2VvZiBBcnJheSl7XHJcblx0XHRcdGlmKHN0cnVjdC5sZW5ndGggPT09IDEpe1xyXG5cdFx0XHRcdHN0cnVjdCA9IHN0cnVjdFswXTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgciA9IFtdO1xyXG5cdFx0XHRcdGZvcih2YXIgaSBpbiBzdHJ1Y3Qpe1xyXG5cdFx0XHRcdFx0ci5wdXNoKHBhcnNlX3NlbWFudGljcyhjb25maWcsIHN0cnVjdFtpXSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYoIXN0cnVjdCl7XHJcblx0XHRcdGNvbnNvbGUud2Fybignb29wcycsIGNvbmZpZywgc3RydWN0KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHR5cGUgPSBzdHJ1Y3QudHlwZTtcclxuXHRcdHZhciBjaGlsZHJlbiA9IHN0cnVjdC5jaGlsZHJlbjtcclxuXHRcdHZhciBzZW0gPSBjb25maWdbdHlwZV07XHJcblx0XHRpZighc2VtKXtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignTm8gdG9rZW4gc2VtYW50aWMgZGVzY3JpcHRpb24nLCB0eXBlLCBzdHJ1Y3QpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZihzZW0udHlwZSl7XHJcblx0XHRcdHN3aXRjaChzZW0udHlwZSl7XHJcblx0XHRcdFx0Y2FzZSAnZG9vcic6XHJcblx0XHRcdFx0XHR2YXIgdG9fcGFyc2UgPSBzZW0ucmV0ID8gY2hpbGRyZW5bc2VtLnJldCAtIDFdIDogY2hpbGRyZW47XHJcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2Vfc2VtYW50aWNzKGNvbmZpZywgdG9fcGFyc2UpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ2NoYXJzJzpcclxuXHRcdFx0XHRcdHJldHVybiB7Y2hhcnM6IHN0cnVjdC5jaGFyc31cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYoc2VtLmZ1bmMpe1xyXG5cdFx0XHRyZXR1cm4gc2VtLmZ1bmMoc3RydWN0LCBwYXJzZV9zZW1hbnRpY3MuYmluZChudWxsLCBjb25maWcpKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHR2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKHN0cnVjdCwgYXJyKXtcclxuXHRcdHZhciBnZXRfY2hpbGRyZW4gPSBmdW5jdGlvbihzdHJ1Y3QsIGFycil7XHJcblx0XHRcdGlmKHN0cnVjdC5jaGlsZHJlbil7XHJcblx0XHRcdFx0Zm9yKHZhciBpIGluIHN0cnVjdC5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRpZihzdHJ1Y3QuY2hpbGRyZW5baV0udHlwZSl7XHJcblx0XHRcdFx0XHRcdHZhciBjaGlsZCA9IHtcclxuXHRcdFx0XHRcdFx0XHR0eXBlOiBzdHJ1Y3QuY2hpbGRyZW5baV0udHlwZSxcclxuXHRcdFx0XHRcdFx0XHRjaGlsZHJlbjogW10sXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYoc3RydWN0LmNoaWxkcmVuW2ldLmNoYXJzKXtcclxuXHRcdFx0XHRcdFx0XHRjaGlsZC5jaGFycyA9IHN0cnVjdC5jaGlsZHJlbltpXS5jaGFycztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRhcnIucHVzaChjaGlsZCk7XHJcblx0XHRcdFx0XHRcdGdldF9jaGlsZHJlbihzdHJ1Y3QuY2hpbGRyZW5baV0sIGNoaWxkLmNoaWxkcmVuKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGdldF9jaGlsZHJlbihzdHJ1Y3QuY2hpbGRyZW5baV0sIGFycik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR2YXIgcmVzID0gW107XHJcblx0XHRnZXRfY2hpbGRyZW4oe2NoaWxkcmVuOiBbc3RydWN0XX0sIHJlcyk7XHJcblx0XHRyZXR1cm4gcmVzWzBdO1xyXG5cdH1cclxuXHJcblx0dmFyIHBhcnNlID0gZnVuY3Rpb24oY29uZmlnLCBzdHIsIGRlYnVnKXtcclxuXHRcdHZhciBpc19lbXB0eV9jaGFyID0gKGNoYXIpID0+IHtcclxuXHRcdFx0dmFyIGVtcHR5X2NoYXJzID0gY29uZmlnLmVtcHR5X2NoYXJzIHx8IGVtcHR5X2NoYXJzX2RlZmF1bHQ7XHJcblx0XHRcdHJldHVybiBlbXB0eV9jaGFycy5pbmRleE9mKGNoYXIpICE9PSAtMTtcclxuXHRcdH1cclxuXHRcdHZhciBwYXJzZV9yZWMgPSBmdW5jdGlvbiBwYXJzZV9yZWModHQsIHN0ciwgcG9zKXtcclxuXHRcdFx0dmFyIG9yaWdpbmFsX3BvcyA9IHBvcztcclxuXHRcdFx0dmFyIHNob3dwb3MgPSBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdHJldHVybiBzdHIuc3Vic3RyKDAsIHBvcykgKyAnQEBAJyArIHN0ci5zdWJzdHIocG9zKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvL2NvbnNvbGUubG9nKCdQYXJzaW5nJywgJ19fXycgKyB0dCArICdfX18nLCAndG9rZW4gZnJvbScsIHBvcywgc2hvd3BvcygpKTtcclxuXHRcdFx0dmFyIGNoaWxkcmVuO1xyXG5cdFx0XHR2YXIgcmVzID0ge1xyXG5cdFx0XHRcdGNoaWxkcmVuOiBbXSxcclxuXHRcdFx0fTtcclxuXHRcdFx0aWYodHlwZW9mIHR0ID09PSAnc3RyaW5nJyl7XHJcblx0XHRcdFx0cmVzLnR5cGUgPSB0dDtcclxuXHRcdFx0XHRpZighY29uZmlnLnN5bnRheFt0dF0pe1xyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignVG9rZW4gbm90IGZvdW5kOicsIHR0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIHRrID0gY29uZmlnLnN5bnRheFt0dF07XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnVG9rZW4gcHJvcHM6JywgdGspO1xyXG5cdFx0XHRcdGlmKHRrLnN0YXJ0ICE9PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdFx0dmFyIHN0YXJ0ZWQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHZhciBzdGFydF9wb3MgPSBwb3M7XHJcblx0XHRcdFx0XHR3aGlsZSgrK3Bvcyl7XHJcblx0XHRcdFx0XHRcdHZhciBjaGFyID0gc3RyW3BvcyAtIDFdO1xyXG5cdFx0XHRcdFx0XHRpZihpc19lbXB0eV9jaGFyKGNoYXIpKXtcclxuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZihjaGFyICE9PSB0ay5zdGFydCl7XHJcblx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncGFyc2luZycsIHR0LCAnZmFpbGVkOicsIHBvcywgXHJcblx0XHRcdFx0XHRcdFx0Ly9zdHJbcG9zXSwgJ2luc3RlYWQgb2YnLCB0ay5zdGFydCk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFtmYWxzZSwgc3RhcnRfcG9zXTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZih0ay5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRjaGlsZHJlbiA9IHRrLmNoaWxkcmVuO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZih0ay5mcmVlX2NoYXJzKXtcclxuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnUGFyc2luZyBmcmVlIGNoYXJzJyk7XHJcblx0XHRcdFx0XHRcdHZhciBzdGFydF9wb3MgPSBwb3M7XHJcblx0XHRcdFx0XHRcdGlmKHRrLmVuZCB8fCB0ay5yZWdleCl7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHN0YXJ0ZWQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgbGFnID0gMDtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSgrK3Bvcyl7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgY2hhciA9IHN0cltwb3MgLSAxXTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKGNoYXIgPT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIHdlIHJlYWNoZWQgdGhlIGVuZCFcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYocG9zIC0gc3RhcnRfcG9zID4gMSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnd2UgcmVhY2hlZCB0aGUgZW5kIScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlcy5jaGFycyA9IHN0ci5zdWJzdHIoc3RhcnRfcG9zLCBwb3MgLSBzdGFydF9wb3MgLSAxKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gW3JlcywgcG9zIC0gMV07XHJcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vcmV0dXJuIFtyZXMsIHBvcyArIDFdO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncGFyc2luZyBmcmVlIGNoYXJzJywgJ1wiJyArIGNoYXIgKyAnXCInLCAnYXMnLCB0dCk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZihpc19lbXB0eV9jaGFyKGNoYXIpICYmICFzdGFydGVkKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0KytsYWc7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYodGsuZW5kICYmIGNoYXIgPT09IHRrLmVuZCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJlcy5jaGFycyA9IHN0ci5zdWJzdHIoc3RhcnRfcG9zLCBwb3MgLSBzdGFydF9wb3MgLSAxICsgbGFnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFtyZXMsIHBvc107XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZih0ay5yZWdleCl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIHN0cmluZ190b19jb21wYXJlID0gc3RyLnN1YnN0cihzdGFydF9wb3MgKyBsYWcsIHBvcyAtIHN0YXJ0X3BvcyAtIGxhZyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIGExID0gISFjaGFyLm1hdGNoKHRrLnJlZ2V4KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgYTIgPSAhIXN0cmluZ190b19jb21wYXJlLm1hdGNoKHRrLnJlZ2V4KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdtYXRjaGluZyByZWdleCcsIHRrLnJlZ2V4LCAnYWdhaW5zdCcsIGNoYXIsIGExLCBzdHJpbmdfdG9fY29tcGFyZSwgYTIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vaWYoYTEgIT09IGEyKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdDb21wYXJpbmcnLCBzdGFydF9wb3MsIGExLCBhMiwgdHQsICdcIicgKyBjaGFyICsgJ1wiJywgJ3ZzLicsICdcIicgKyBzdHJpbmdfdG9fY29tcGFyZSArICdcIi5tYXRjaCgnICsgdGsucmVnZXggKyAnKScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmKCFjaGFyIHx8ICEoc3RyaW5nX3RvX2NvbXBhcmUubWF0Y2godGsucmVnZXgpKSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZihzdGFydGVkKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzLmNoYXJzID0gc3RyLnN1YnN0cihzdGFydF9wb3MgKyBsYWcsIHBvcyAtIHN0YXJ0X3BvcyAtIDEgLSBsYWcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdfX19fX19fX19fX19fXyBzdWNjZXNzJywgcmVzLmNoYXJzKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFtyZXMsIHBvcyAtIDFdO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnREVEIEVORCEnLCBjaGFyLCB0dCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBbZmFsc2UsIHBvcyAtIDEgLSBsYWddO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnRlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignQ291bGQgbm90IHBhcnNlIGZyZWUgY2hhcnMgd2l0aG91dCBlbmQhJyk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFtmYWxzZSwgcG9zXTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmKHRrLnN0cil7XHJcblx0XHRcdFx0XHRcdC8vIGp1c3QgZXhhY3Qgc3RyaW5nXHJcblx0XHRcdFx0XHRcdHZhciB0ZXN0X3N0ciA9IHN0ci5zdWJzdHIocG9zLCB0ay5zdHIubGVuZ3RoKTtcclxuXHRcdFx0XHRcdFx0aWYodGVzdF9zdHIgPT09IHRrLnN0cil7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFtyZXMsIHBvcyArIHRrLnN0ci5sZW5ndGhdO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBbZmFsc2UsIHBvc107XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignTm8gY2hhcnMgYW5kIG5vIHRva2VucyAtIHdoYXQgdG8gZG8/JywgdGspO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjaGlsZHJlbiA9IHR0O1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCFjaGlsZHJlbikgcmV0dXJuIHJlcztcclxuXHRcdFx0dmFyIGNoaWxkcmVuX3R5cGUgPSBoZWFkKGNoaWxkcmVuKTtcclxuXHRcdFx0dmFyIHJlc3RfY2hpbGRyZW4gPSB0YWlsKGNoaWxkcmVuKTtcclxuXHRcdFx0Ly9jb25zb2xlLmxvZygnY2h0eXBlJywgY2hpbGRyZW5fdHlwZSwgcmVzdF9jaGlsZHJlbik7XHJcblx0XHRcdHN3aXRjaChjaGlsZHJlbl90eXBlKXtcclxuXHRcdFx0XHRjYXNlICc+JzpcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ3BhcnNpbmcgPiBjaGlsZHJlbicsIHR0KTtcclxuXHRcdFx0XHRcdHZhciBwID0gcG9zO1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBiIG9mIHJlc3RfY2hpbGRyZW4pe1xyXG5cdFx0XHRcdFx0XHRpZih0eXBlb2YgYiA9PT0gJ3N0cmluZycpIGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHR2YXIgcjtcclxuXHRcdFx0XHRcdFx0dmFyIHN0cnVjdF90b19wYXJzZSA9IGIgaW5zdGFuY2VvZiBBcnJheSA/IGIgOiBiLnR5cGU7XHJcblx0XHRcdFx0XHRcdHZhciBvcHRpb25hbCA9IGIub3B0aW9uYWw7XHJcblx0XHRcdFx0XHRcdHZhciBtdWx0aXBsZSA9IGIubXVsdGlwbGU7XHJcblx0XHRcdFx0XHRcdGlmKHN0cnVjdF90b19wYXJzZSBpbnN0YW5jZW9mIEFycmF5ICYmIHR5cGVvZiBzdHJ1Y3RfdG9fcGFyc2Vbc3RydWN0X3RvX3BhcnNlLmxlbmd0aCAtIDFdID09PSAnc3RyaW5nJyl7XHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uYWwgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdG11bHRpcGxlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR3aGlsZSh0cnVlKXtcclxuXHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdwYXJzaW5nIG11bHRpcGxlJywgc3RydWN0X3RvX3BhcnNlLCAnYXMnLCB0dCwgYik7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHJ6ID0gcGFyc2VfcmVjKHN0cnVjdF90b19wYXJzZSwgc3RyLCBwKTtcclxuXHRcdFx0XHRcdFx0XHRyID0gcnpbMF07XHJcblx0XHRcdFx0XHRcdFx0cCA9IHJ6WzFdO1xyXG5cdFx0XHRcdFx0XHRcdGlmKCFyKXtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKG9wdGlvbmFsKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBbZmFsc2UsIHBdO1xyXG5cdFx0XHRcdFx0XHRcdH1cdFxyXG5cdFx0XHRcdFx0XHRcdHBvcyA9IHA7XHJcblx0XHRcdFx0XHRcdFx0cmVzLmNoaWxkcmVuLnB1c2gocik7XHJcblx0XHRcdFx0XHRcdFx0aWYobXVsdGlwbGUpe1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoc3RyW3BdID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnfCc6XHJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdwYXJzaW5nIHwgY2hpbGRyZW4nLCBjaGlsZHJlbik7XHJcblx0XHRcdFx0XHRmb3IodmFyIGIgb2YgcmVzdF9jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRcdGlmKHR5cGVvZiBiID09PSAnc3RyaW5nJykgY29udGludWU7XHJcblx0XHRcdFx0XHRcdHZhciByO1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RydWN0X3RvX3BhcnNlID0gYiBpbnN0YW5jZW9mIEFycmF5ID8gYiA6IGIudHlwZTtcclxuXHRcdFx0XHRcdFx0dmFyIHJ6ID0gcGFyc2VfcmVjKHN0cnVjdF90b19wYXJzZSwgc3RyLCBwb3MpO1xyXG5cdFx0XHRcdFx0XHRyID0gcnpbMF07XHJcblx0XHRcdFx0XHRcdHAgPSByelsxXTtcclxuXHRcdFx0XHRcdFx0aWYoIXIpe1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHJlcy5jaGlsZHJlbi5wdXNoKHIpO1xyXG5cdFx0XHRcdFx0XHRcdHBvcyA9IHA7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmV0dXJuIFtmYWxzZSwgcG9zXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKCFyZXMuY2hpbGRyZW4ubGVuZ3RoKXtcclxuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnTm90aGluZyBmb3VuZCcsIHR0KTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFtmYWxzZSwgcG9zXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignVW5rbm93biBjaGlsZHJlbiB0eXBlOicsIGNoaWxkcmVuX3R5cGUpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHRrICYmIHRrLmVuZCl7XHJcblx0XHRcdFx0dmFyIHBwID0gcG9zO1xyXG5cdFx0XHRcdHdoaWxlKCsrcHApe1xyXG5cdFx0XHRcdFx0dmFyIGNoYXIgPSBzdHJbcHAgLSAxXTtcclxuXHRcdFx0XHRcdGlmKGlzX2VtcHR5X2NoYXIoY2hhcikpe1xyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKGNoYXIgPT09IHRrLmVuZCl7XHJcblx0XHRcdFx0XHRcdHBvcyA9IHBwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBbcmVzLCBwb3NdO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHN0cnVjdCA9IHBhcnNlX3JlYygncm9vdF90b2tlbicsIHN0ciwgMCk7XHJcblx0XHRzdHJ1Y3QgPSBmbGF0dGVuKHN0cnVjdFswXSk7XHJcblx0XHQvLyBzZW1hdGljIHBhcnNpbmdcclxuXHRcdHZhciBzZW1hbnRpY3MgPSBwYXJzZV9zZW1hbnRpY3MoY29uZmlnLnNlbWFudGljcywgc3RydWN0KTtcclxuXHRcdHJldHVybiB7c3ludGF4OiBzdHJ1Y3QsIHNlbWFudGljc307XHJcblx0fVxyXG5cdG1vZHVsZS5leHBvcnRzID0ge1xyXG5cdFx0Z2V0X3BhcnNlcjogKGNvbmZpZykgPT4ge1xyXG5cdFx0XHRyZXR1cm4gcGFyc2UuYmluZChudWxsLCBjb25maWcpO1xyXG5cdFx0fSxcclxuXHRcdGR1bXA6IGZ1bmN0aW9uKHN0cnVjdCl7XHJcblx0XHRcdHZhciByZWMgPSBmdW5jdGlvbihzdHJ1Y3QsIGxldmVsKXtcclxuXHRcdFx0XHRpZighc3RydWN0KSByZXR1cm47XHJcblx0XHRcdFx0dmFyIHJlcyA9IFtdO1xyXG5cdFx0XHRcdGlmKHN0cnVjdC50eXBlKXtcclxuXHRcdFx0XHRcdHJlcy5wdXNoKCdUeXBlOiAnICsgc3RydWN0LnR5cGUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihzdHJ1Y3QuY2hhcnMpe1xyXG5cdFx0XHRcdFx0cmVzLnB1c2goJ1N0cjogJyArIHN0cnVjdC5jaGFycyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKHN0cnVjdC5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHR2YXIgciA9IFtdO1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBpIGluIHN0cnVjdC5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRcdHIucHVzaChyZWMoc3RydWN0LmNoaWxkcmVuW2ldLCBsZXZlbCsxKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXMucHVzaCgnPGRpdj4nICsgci5qb2luKCdcdCcpICsgJzwvZGl2PicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gJzxkaXY+JyArIHJlcy5qb2luKCc8YnI+JykgKyAnPC9kaXY+JztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVjKHN0cnVjdCwgMCk7XHJcblx0XHR9XHJcblx0fVxyXG4iLCJ2YXIgZmllbGRzID0gWydjbGFzc25hbWVzJywgJ3RhZ25hbWUnLCAnc3RyJywgJ3F1b3RlZF9zdHInXTtcclxudmFyIGluaXRfaWZfZW1wdHkgPSBmdW5jdGlvbihvYmovKmtleSwgdmFsLCBrZXkxLCB2YWwxLCAuLi4gKi8pIHtcclxuXHRmb3IobGV0IGkgID0gMTsgO2kgPSBpICsgMil7XHJcblx0XHR2YXIga2V5ID0gYXJndW1lbnRzW2ldO1xyXG5cdFx0dmFyIHZhbCA9IGFyZ3VtZW50c1tpICsgMV07XHJcblx0XHRpZigha2V5KSBicmVhaztcclxuXHJcblx0XHRpZihvYmpba2V5XSA9PT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0b2JqW2tleV0gPSB2YWw7XHJcblx0XHR9XHJcblx0XHRvYmogPSBvYmpba2V5XTtcclxuXHR9XHJcblx0cmV0dXJuIG9iajtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRlbXB0eV9jaGFyczogWycgJ10sXHJcblx0c3ludGF4OiB7XHJcblx0XHRyb290X3Rva2VuOiB7XHJcblx0XHRcdGNoaWxkcmVuOiBbXHJcblx0XHRcdFx0Jz4nLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6ICdpdGVtJyxcclxuXHRcdFx0XHRcdG11bHRpcGxlOiB0cnVlLFxyXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XVxyXG5cdFx0fSxcclxuXHRcdGl0ZW06IHtcclxuXHRcdFx0Y2hpbGRyZW46IFtcclxuXHRcdFx0XHQnPicsXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogJ2luZGVudCcsXHJcblx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdFtcclxuXHRcdFx0XHRcdCd8JyxcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dHlwZTogJ25ld19pZicsXHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0eXBlOiAnbmV3X2Vsc2VpZicsXHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0eXBlOiAnbmV3X2Vsc2UnLFxyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dHlwZTogJ3Rlcm5hcnlfZWxzZScsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0W1xyXG5cdFx0XHRcdFx0XHQnPicsXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHR0eXBlOiAndGFnbmFtZScsXHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHR0eXBlOiAnY2xhc3NuYW1lcycsXHJcblx0XHRcdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFtcclxuXHRcdFx0XHRcdFx0XHQnfCcsIFxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdxdW90ZWRfc3RyJyxcclxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHRcdH0sIHtcclxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6ICd2YXJpYWJsZScsXHJcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdCdvcHRpb25hbCdcclxuXHRcdFx0XHRcdFx0XSxcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdicmFja2V0JyxcclxuXHRcdFx0XHRcdFx0XHRvcHRpb25hbDogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdzdHInLFxyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XSxcclxuXHRcdFx0XHRdLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6ICdsaW5lZW5kJyxcclxuXHRcdFx0XHR9XHJcblx0XHRcdF1cclxuXHRcdH0sXHJcblx0XHRjb21tYToge1xyXG5cdFx0XHRyZWdleDogL15cXCxcXHM/JC8sXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0YnJhY2tldDoge1xyXG5cdFx0XHRzdGFydDogJygnLFxyXG5cdFx0XHRjaGlsZHJlbjogW1xyXG5cdFx0XHRcdCc+JyxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiAnYXNzaWduJyxcclxuXHRcdFx0XHRcdG9wdGlvbmFsOiB0cnVlLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0W1xyXG5cdFx0XHRcdFx0Jz4nLFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0eXBlOiAnY29tbWEnLFxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dHlwZTogJ2Fzc2lnbidcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQnb3B0aW9uYWwnXHJcblx0XHRcdFx0XVxyXG5cclxuXHRcdFx0XSxcclxuXHRcdFx0ZW5kOiAnKScsXHJcblx0XHR9LFxyXG5cdFx0YXNzaWduOiB7XHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHRcdHJlZ2V4OiAvXlteXFwpXlxcLF0qJC9cclxuXHRcdH0sXHJcblx0XHRxdW90ZWRfc3RyOiB7XHJcblx0XHRcdHN0YXJ0OiAnXCInLFxyXG5cdFx0XHRlbmQ6ICdcIicsXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0dmFyaWFibGU6IHtcclxuXHRcdFx0Y2hpbGRyZW46IFtcclxuXHRcdFx0XHQnPicsXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogJ3Zhcm5hbWUnLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogJ3Rlcm5hcnlfaWYnLFxyXG5cdFx0XHRcdFx0b3B0aW9uYWw6IHRydWUsXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRdXHJcblx0XHR9LFxyXG5cdFx0dGVybmFyeV9pZjoge1xyXG5cdFx0XHRyZWdleDogL15cXD8kLyxcclxuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR0ZXJuYXJ5X2Vsc2U6IHtcclxuXHRcdFx0cmVnZXg6IC9eXFw6JC8sXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0bmV3X2lmOiB7XHJcblx0XHRcdHJlZ2V4OiAvXlxcP1xccz8oLiopPyQvLFxyXG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdG5ld19lbHNlaWY6IHtcclxuXHRcdFx0cmVnZXg6IC9eXFwqXFxzPyguKik/JC8sXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0bmV3X2Vsc2U6IHtcclxuXHRcdFx0cmVnZXg6IC9eXFw6JC8sXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0dmFybmFtZToge1xyXG5cdFx0XHRyZWdleDogL15cXCRbYS16QS1aMC05XFwtXFxfXSokLyxcclxuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRpbmRlbnQ6IHtcclxuXHRcdFx0cmVnZXg6IC9eXFx0KyQvLFxyXG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGNsYXNzbmFtZXM6IHtcclxuXHRcdFx0cmVnZXg6IC9eXFwuW1xcXFwuYS16QS1aMC05XFwtXFxfXSokLyxcclxuXHRcdFx0ZnJlZV9jaGFyczogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR0YWduYW1lOiB7XHJcblx0XHRcdHJlZ2V4OiAvXlthLXpBLVowLTldKyQvLFxyXG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHN0cjoge1xyXG5cdFx0XHRyZWdleDogL15bXlxcbl0rJC8sXHJcblx0XHRcdGZyZWVfY2hhcnM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0bGluZWVuZDoge1xyXG5cdFx0XHRyZWdleDogL1xcbiQvLFxyXG5cdFx0XHRmcmVlX2NoYXJzOiB0cnVlLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cdHNlbWFudGljczoge1xyXG5cdFx0cm9vdF90b2tlbjoge1xyXG5cdFx0XHRmdW5jOiAoc3RydWN0LCBwYXJzZXIpID0+IHtcclxuXHJcblx0XHRcdFx0dmFyIHJlcyA9IHtjaGlsZHJlbjogW119O1xyXG5cdFx0XHRcdHZhciBsYXN0X29mX2xldmVsID0ge1xyXG5cdFx0XHRcdFx0XCItMVwiOiByZXMsXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHZhciBjaGVfcmVzdWx0cyA9IHBhcnNlcihzdHJ1Y3QuY2hpbGRyZW4pO1xyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ1Jlc3VsdHMnLCBjaGVfcmVzdWx0cyk7XHJcblx0XHRcdFx0dmFyIG1heF9sZXZlbCA9IDA7XHJcblx0XHRcdFx0dmFyIGxhc3RfaWYgPSBbXTtcclxuXHRcdFx0XHRmb3IobGV0IGkgaW4gY2hlX3Jlc3VsdHMpe1xyXG5cdFx0XHRcdFx0bGV0IGNoaWxkID0gY2hlX3Jlc3VsdHNbaV07XHJcblx0XHRcdFx0XHRpZighY2hpbGQudGFnbmFtZSAmJiAhY2hpbGQuY2xhc3NuYW1lcyAmJiAhY2hpbGQucXVvdGVkX3N0ciAmJiAhY2hpbGQudmFyaWFibGUgJiYgIWNoaWxkLnR5cGUpIHtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZihjaGlsZC50eXBlID09PSAnSUYnKXtcclxuXHRcdFx0XHRcdFx0bGFzdF9pZi5wdXNoKGNoaWxkKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKGNoaWxkLnR5cGUgPT09ICdFTFNFJyl7XHJcblx0XHRcdFx0XHRcdHZhciBsaWYgPSBsYXN0X2lmLnBvcCgpO1xyXG5cdFx0XHRcdFx0XHRsaWYuZWxzZV9jaGlsZHJlbiA9IGNoaWxkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dmFyIGx2bCA9IGNoaWxkLmxldmVsIHx8IDA7XHJcblx0XHRcdFx0XHRpZihsdmwgPiBtYXhfbGV2ZWwpe1xyXG5cdFx0XHRcdFx0XHRtYXhfbGV2ZWwgPSBsdmw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR2YXIgcHV0X3RvID0gbHZsIC0gMTtcclxuXHRcdFx0XHRcdGNoaWxkLmNoaWxkcmVuID0gW107XHJcblx0XHRcdFx0XHRpZighbGFzdF9vZl9sZXZlbFtwdXRfdG9dKXtcclxuXHRcdFx0XHRcdFx0Zm9yKDtwdXRfdG8tLTtwdXRfdG8gPiAtMil7XHJcblx0XHRcdFx0XHRcdFx0aWYobGFzdF9vZl9sZXZlbFtwdXRfdG9dKSBicmVhaztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZighbGFzdF9vZl9sZXZlbFtwdXRfdG9dKXtcclxuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncHV0dGluZycsIGNoaWxkLCBwdXRfdG8sICd0bycsIGxhc3Rfb2ZfbGV2ZWxbcHV0X3RvXSk7XHJcblx0XHRcdFx0XHRsYXN0X29mX2xldmVsW3B1dF90b10uY2hpbGRyZW4ucHVzaChjaGlsZCk7XHJcblx0XHRcdFx0XHRsYXN0X29mX2xldmVsW2x2bF0gPSBjaGlsZDtcclxuXHRcdFx0XHRcdGlmKGx2bCArIDEgPCBtYXhfbGV2ZWwpe1xyXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdsdmwnLCBsdmwrMSwgbWF4X2xldmVsKTtcclxuXHRcdFx0XHRcdFx0dmFyIGogPSBsdmwgKyAxO1xyXG5cdFx0XHRcdFx0XHRmb3IodmFyIGogPSBsdmwgKyAxO2ogPD0gbWF4X2xldmVsO2orKyl7XHJcblx0XHRcdFx0XHRcdFx0aWYoIWxhc3Rfb2ZfbGV2ZWxbal0pIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2RlbGV0ZScsIGxhc3Rfb2ZfbGV2ZWxbal0pO1xyXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBsYXN0X29mX2xldmVsW2pdO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiByZXMuY2hpbGRyZW47XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRpdGVtOiB7XHJcblx0XHRcdGZ1bmM6IChzdHJ1Y3QsIHBhcnNlcikgPT4ge1xyXG5cdFx0XHRcdHZhciByZXMgPSB7fTtcclxuXHRcdFx0XHRmb3IobGV0IGNoaWxkIG9mIHN0cnVjdC5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRzd2l0Y2goY2hpbGQudHlwZSl7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ3ZhcmlhYmxlJzpcclxuXHRcdFx0XHRcdFx0XHRyZXMudmFybmFtZSA9IGNoaWxkLmNoaWxkcmVuWzBdLmNoYXJzLnNsaWNlKDEpO1xyXG5cdFx0XHRcdFx0XHRcdGlmKGNoaWxkLmNoaWxkcmVuWzFdKXtcclxuXHRcdFx0XHRcdFx0XHRcdHJlcy50eXBlID0gXCJJRlwiO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ3Rlcm5hcnlfZWxzZSc6XHJcblx0XHRcdFx0XHRcdFx0cmVzLnR5cGUgPSBcIkVMU0VcIjtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ25ld19pZic6XHJcblx0XHRcdFx0XHRcdFx0dmFyIGNoYXJzID0gY2hpbGQuY2hhcnM7XHJcblx0XHRcdFx0XHRcdFx0cmVzLnZhcm5hbWUgPSBjaGFycy5tYXRjaCgvXFwkKFteXFxzXSopLylbMV07XHJcblx0XHRcdFx0XHRcdFx0cmVzLmV4cHIgPSBjaGFycy5yZXBsYWNlKC9cXD9cXHM/LywgJycpLnJlcGxhY2UoJyQnICsgcmVzLnZhcm5hbWUsICdjdHguJyArIHJlcy52YXJuYW1lKTtcclxuXHRcdFx0XHRcdFx0XHRyZXMudHlwZSA9IGNoaWxkLnR5cGUudG9VcHBlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ25ld19lbHNlaWYnOlxyXG5cdFx0XHRcdFx0XHRcdHZhciBjaGFycyA9IGNoaWxkLmNoYXJzO1xyXG5cdFx0XHRcdFx0XHRcdHJlcy52YXJuYW1lID0gY2hhcnMubWF0Y2goL1xcJChbXlxcc10qKS8pWzFdO1xyXG5cdFx0XHRcdFx0XHRcdHJlcy5leHByID0gY2hhcnMucmVwbGFjZSgvXFwqXFxzPy8sICcnKS5yZXBsYWNlKCckJyArIHJlcy52YXJuYW1lLCAnY3R4LicgKyByZXMudmFybmFtZSk7XHJcblx0XHRcdFx0XHRcdFx0cmVzLnR5cGUgPSBjaGlsZC50eXBlLnRvVXBwZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICduZXdfZWxzZSc6XHJcblx0XHRcdFx0XHRcdFx0cmVzLnR5cGUgPSBjaGlsZC50eXBlLnRvVXBwZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdpbmRlbnQnOlxyXG5cdFx0XHRcdFx0XHRcdHJlcy5sZXZlbCA9IGNoaWxkLmNoYXJzLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdJTkRFWCcsIHJlcy5sZXZlbCk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdicmFja2V0JzpcclxuXHRcdFx0XHRcdFx0XHRyZXMuYXNzaWdubWVudHMgPSBbXTtcclxuXHRcdFx0XHRcdFx0XHRmb3IobGV0IGNoaWxkMSBvZiBjaGlsZC5jaGlsZHJlbil7XHJcblx0XHRcdFx0XHRcdFx0XHRpZihjaGlsZDEudHlwZSA9PT0gJ2Fzc2lnbicpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgYXNzaWduID0gY2hpbGQxLmNoYXJzLnNwbGl0KCc6Jyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBrZXkgPSBhc3NpZ25bMF0udHJpbSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgdmFsID0gYXNzaWduWzFdLnRyaW0oKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYodmFsWzBdID09PSAnJCcpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGl0cyB2YXJcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsZXQgdmFybmFtZSA9IHZhbC5sZW5ndGggPT09IDEgPyBrZXkgOiB2YWwuc3Vic3RyKDEpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGluaXRfaWZfZW1wdHkocmVzLCAnYXR0clN0eWxlVmFycycsIFtdKS5wdXNoKFt2YXJuYW1lLCBrZXldKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXMuYXNzaWdubWVudHMucHVzaChba2V5LCB2YWxdKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygnSU5ERVgnLCByZXMubGV2ZWwpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKGZpZWxkcy5pbmRleE9mKGNoaWxkLnR5cGUpICE9PSAtMSl7XHJcblx0XHRcdFx0XHRcdHJlc1tjaGlsZC50eXBlXSA9IGNoaWxkLmNoYXJzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcmVzO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0aW5kZW50OiB7XHJcblx0XHRcdHR5cGU6ICdjaGFycycsXHJcblx0XHR9XHJcblx0fVxyXG59XHJcbiIsInZhciBvemVuZmFudF9jb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4uL29vb19vb19vL3BhcnNlcicpLmdldF9wYXJzZXIob3plbmZhbnRfY29uZmlnKTtcblxudmFyIGluaXRfaWZfZW1wdHkgPSBmdW5jdGlvbihvYmovKmtleSwgdmFsLCBrZXkxLCB2YWwxLCAuLi4gKi8pIHtcblx0Zm9yKGxldCBpICA9IDE7IDtpID0gaSArIDIpe1xuXHRcdHZhciBrZXkgPSBhcmd1bWVudHNbaV07XG5cdFx0dmFyIHZhbCA9IGFyZ3VtZW50c1tpICsgMV07XG5cdFx0aWYoIWtleSkgYnJlYWs7XG5cblx0XHRpZihvYmpba2V5XSA9PT0gdW5kZWZpbmVkKXtcblx0XHRcdG9ialtrZXldID0gdmFsO1xuXHRcdH1cblx0XHRvYmogPSBvYmpba2V5XTtcblx0fVxuXHRyZXR1cm4gb2JqO1xufVxuXG52YXIgaHRtbF9hdHRycyA9IG5ldyBTZXQoWydocmVmJywgJ3NyYycsICdzdHlsZScsICd0YXJnZXQnLCAnaWQnLCAnY2xhc3MnLCAncmVsJywgJ3R5cGUnLCAndmFsdWUnXSlcbnZhciBpc19hdHRyID0gKHN0cikgPT4ge1xuXHRyZXR1cm4gaHRtbF9hdHRycy5oYXMoc3RyKSB8fCBzdHIubWF0Y2goL15kYXRhXFwtLyk7XG59XG5cbnZhciB0ZXh0X3Zhcl9yZWdleHAgPSAvXFx7XFx7KFthLXpBLVowLTldKilcXH1cXH0vZzsvLy9cXCQoW2EtekEtWjAtOV0qKS9nO1xuXG52YXIgT3plbmZhbnQgPSBmdW5jdGlvbihzdHIpe1xuXHRpZihzdHIgaW5zdGFuY2VvZiBPYmplY3Qpe1xuXHRcdHRoaXMuc3RydWN0ID0gc3RyOy8vIGNvbXBpbGVkIHN0cnVjdFxuXHRcdHRoaXMubm9kZV92YXJzX3BhdGhzID0gdGhpcy5zdHJ1Y3Qubm9kZV92YXJzX3BhdGhzO1xuXHRcdHRoaXMudGV4dF92YXJzX3BhdGhzID0gdGhpcy5zdHJ1Y3QudGV4dF92YXJzX3BhdGhzO1xuXHRcdHRoaXMubm9kZXNfdmFycyA9IHRoaXMuc3RydWN0Lm5vZGVzX3ZhcnM7XG5cdFx0dGhpcy52YXJfdHlwZXMgPSB0aGlzLnN0cnVjdC52YXJfdHlwZXM7XG5cdFx0dGhpcy52YXJuYW1lX3Bvb2wgPSB0aGlzLnN0cnVjdC52YXJuYW1lX3Bvb2w7XG5cdFx0dGhpcy5pZl9lbHNlX3RyZWUgPSB0aGlzLnN0cnVjdC5pZl9lbHNlX3RyZWU7XG5cdH0gZWxzZSB7XG5cdFx0dGhpcy5zdHJ1Y3QgPSBwYXJzZXIoc3RyICsgYFxuYCk7XG5cdFx0dGhpcy5ub2RlX3ZhcnNfcGF0aHMgPSB7fTtcblx0XHR0aGlzLnRleHRfdmFyc19wYXRocyA9IHt9O1xuXHRcdHRoaXMubm9kZXNfdmFycyA9IHt9O1xuXHRcdHRoaXMudmFyX3R5cGVzID0ge307XG5cdFx0dGhpcy52YXJuYW1lX3Bvb2wgPSB7XG5cdFx0XHR2YXJzOiB7fSxcblx0XHRcdHZhcl9hbGlhc2VzOiB7fSxcblx0XHR9O1xuXHRcdHRoaXMuaWZfZWxzZV90cmVlID0ge3N0cl90b19mdW5jOiB7fSwgdmFyX2Z1bmNzOiB7fX07XG5cdFx0Z2V0X3ZhcnMoe2NoaWxkcmVuOiB0aGlzLnN0cnVjdC5zZW1hbnRpY3MsIHJvb3Q6IHRydWV9XG5cdFx0XHQsIHRoaXMubm9kZV92YXJzX3BhdGhzXG5cdFx0XHQsIHRoaXMudGV4dF92YXJzX3BhdGhzXG5cdFx0XHQsIHRoaXMubm9kZXNfdmFyc1xuXHRcdFx0LCAnLidcblx0XHRcdCwgdGhpcy52YXJfdHlwZXNcblx0XHRcdCwgW11cblx0XHRcdCwgdGhpcy52YXJuYW1lX3Bvb2xcblx0XHRcdCwgdGhpcy5pZl9lbHNlX3RyZWVcblx0XHQpO1xuXHR9XG5cdHRoaXMuc3RhdGUgPSB7fTtcblx0dGhpcy5iaW5kaW5ncyA9IHt9O1xuXG5cdHRoaXMuZ2V0SWZFbHNlVmFyc0luZGV4KCk7XG59O1xuXG52YXIgY3JlYXRlX2Z1bmMgPSAoc3RyLCBjb25kaXRpb24pID0+IHtcblx0dmFyIGJvZHkgPSBcIidcIiArIHN0ciArIFwiJ1wiO1xuXHRpZihjb25kaXRpb24pe1xuXHRcdGJvZHkgPSBjb25kaXRpb24gKyAnID8gJyArIGJvZHkgKyAnIDogZmFsc2UnO1xuXHR9XG5cdHJldHVybiBuZXcgRnVuY3Rpb24oJ2N0eCcsICdyZXR1cm4gJyArIGJvZHkgKyAnOycpO1xufVxuXG5PemVuZmFudC5wcmVwYXJlID0gKHN0cikgPT4ge1xuXHR2YXIgc3RydWN0ID0gcGFyc2VyKHN0ciArIGBcbmApO1xuXHRzdHJ1Y3Qubm9kZV92YXJzX3BhdGhzID0ge307XG5cdHN0cnVjdC50ZXh0X3ZhcnNfcGF0aHMgPSB7fTtcblx0c3RydWN0Lm5vZGVzX3ZhcnMgPSB7fTtcblx0c3RydWN0LnZhcl90eXBlcyA9IHt9O1xuXHRzdHJ1Y3QudmFybmFtZV9wb29sID0ge1xuXHRcdHZhcnM6IHt9LFxuXHRcdHZhcl9hbGlhc2VzOiB7fSxcblx0fTtcblx0c3RydWN0LmZ1bmMgPSBjcmVhdGVfZnVuYyh0b0Z1bmMoe2NoaWxkcmVuOiBzdHJ1Y3Quc2VtYW50aWNzfSkpO1xuXHRzdHJ1Y3QuaWZfZWxzZV90cmVlID0ge3N0cl90b19mdW5jOiB7fSwgdmFyX2Z1bmNzOiB7fX07XG5cdGdldF92YXJzKHtjaGlsZHJlbjogc3RydWN0LnNlbWFudGljcywgcm9vdDogdHJ1ZX1cblx0XHQsIHN0cnVjdC5ub2RlX3ZhcnNfcGF0aHNcblx0XHQsIHN0cnVjdC50ZXh0X3ZhcnNfcGF0aHNcblx0XHQsIHN0cnVjdC5ub2Rlc192YXJzXG5cdFx0LCAnLidcblx0XHQsIHN0cnVjdC52YXJfdHlwZXNcblx0XHQsIFtdXG5cdFx0LCBzdHJ1Y3QudmFybmFtZV9wb29sXG5cdFx0LCBzdHJ1Y3QuaWZfZWxzZV90cmVlXG5cdCk7XG5cdFxuXHRyZXR1cm4gc3RydWN0O1xufVxuXG52YXIgZ2V0X3Zhcm5hbWUgPSAobm9kZSkgPT4ge1xuXHR2YXIga2V5ID0gbm9kZS52YXJuYW1lO1xuXHRpZigha2V5Lmxlbmd0aCl7XG5cdFx0aWYobm9kZS5jbGFzc25hbWVzKXtcblx0XHRcdGtleSA9IG5vZGUuY2xhc3NuYW1lcy5zdWJzdHIoMSkuc3BsaXQoJy4nKVswXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKCdJbmNvcnJlY3Qgc3RhdGVtZW50OiB2YXJpYWJsZSB3aXRob3V0IG5hbWUgYW5kIGRlZmF1bHQgY2xhc3MhJyk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBrZXk7XG59XG5cbnZhciByZWdpc3Rlcl92YXJuYW1lID0gKHZhcm5hbWUsIHZhcm5hbWVfcG9vbCwgaWZfZWxzZV9kZXBzLCBpZl9lbHNlX3RyZWUpID0+IHtcblx0aWYodmFybmFtZV9wb29sLnZhcnNbdmFybmFtZV0pe1xuXHRcdC8vIGFscmVhZHkgZXhpc3RzIVxuXHRcdGluaXRfaWZfZW1wdHkodmFybmFtZV9wb29sLnZhcl9hbGlhc2VzLCB2YXJuYW1lLCBbXSk7XG5cdFx0dmFyIG5ld19uYW1lID0gJ29sb2xvQCFAISNfJyArIHZhcm5hbWUgKyAnXycgKyB2YXJuYW1lX3Bvb2wudmFyX2FsaWFzZXNbdmFybmFtZV0ubGVuZ3RoO1xuXHRcdHZhcm5hbWVfcG9vbC52YXJfYWxpYXNlc1t2YXJuYW1lXS5wdXNoKG5ld19uYW1lKTtcblx0XHR2YXJuYW1lID0gbmV3X25hbWU7XG5cdH0gZWxzZSB7XG5cdFx0dmFybmFtZV9wb29sLnZhcnNbdmFybmFtZV0gPSB0cnVlO1xuXHR9XG5cdHZhciBkZXBzID0gaWZfZWxzZV9kZXBzLmxlbmd0aCA/ICgnKCcgKyBpZl9lbHNlX2RlcHMuam9pbignKSAmJiAoJykgKyAnKScpIDogZmFsc2U7XG5cdGlmKGRlcHMpe1xuXHRcdGlmKGlmX2Vsc2VfdHJlZS5zdHJfdG9fZnVuY1tkZXBzXSl7XG5cdFx0XHRpZl9lbHNlX3RyZWUudmFyX2Z1bmNzW3Zhcm5hbWVdID0gaWZfZWxzZV90cmVlLnN0cl90b19mdW5jW2RlcHNdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZl9lbHNlX3RyZWUudmFyX2Z1bmNzW3Zhcm5hbWVdID0gaWZfZWxzZV90cmVlLnN0cl90b19mdW5jW2RlcHNdID0gbmV3IEZ1bmN0aW9uKCdjdHgnLCAncmV0dXJuICcgKyBkZXBzKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhcm5hbWU7XG59XG5cbnZhciBhZGRfdG9faWZfZWxzZV9wb29sID0gKHBvb2xzLCB2YXJuYW1lLCBwYXRoKSA9PiB7XG5cdGZvcih2YXIgcG9vbCBvZiBwb29scyl7XG5cdFx0cG9vbFt2YXJuYW1lXSA9IHBhdGg7XG5cdH1cbn1cblxudmFyIGlzX25ld19pZiA9IChhKSA9PiB7XG5cdHJldHVybiBbJ05FV19FTFNFJywgJ05FV19FTFNFSUYnLCAnTkVXX0lGJ10uaW5kZXhPZihhLnR5cGUpICE9PSAtMTtcbn1cblxudmFyIGdldF9wYXJ0aWFsX2Z1bmMgPSAobm9kZSkgPT4ge1xuXHRpZihub2RlLnBhcnRpYWxfZnVuYykge1xuXHRcdHJldHVybiBub2RlLnBhcnRpYWxfZnVuYztcblx0fSBlbHNlIHtcblx0XHRpZihub2RlLnJvb3Qpe1xuXHRcdFx0cmV0dXJuICdVU0VfUk9PVF9GVU5DJztcblx0XHR9XG5cdH1cblx0XG59XG5cbnZhciBnZXRfdmFycyA9IChub2RlLCBub2RlX3Bvb2wsIHRleHRfcG9vbCwgcGF0aF9wb29sLCBwYXRoLCB0eXBlcywgaWZfZWxzZV9kZXBzLCB2YXJuYW1lX3Bvb2wsIGlmX2Vsc2VfdHJlZSkgPT4ge1xuXHRpZihub2RlID09PSB1bmRlZmluZWQpIGRlYnVnZ2VyO1xuXHQvL2lmX2Vsc2VfZGVwcyA9IFsuLi5pZl9lbHNlX2RlcHNdO1xuXHRpZihub2RlLmNoaWxkcmVuKXtcblx0XHR2YXIgbm9kZXNfbGFnID0gMDtcblx0XHR2YXIgdGV4dF9sYWcgPSAwO1xuXHRcdHZhciByZXNpZ3RlcmVkX3ZhcnMgPSB7fTtcblx0XHRmb3IodmFyIGkgaW4gbm9kZS5jaGlsZHJlbil7XG5cdFx0XHR2YXIgemlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG5cdFx0XHR2YXIgbmV3X3BhdGggPSBwYXRoO1xuXHRcdFx0aWYoIWlzX25ld19pZih6aWxkKSl7XG5cdFx0XHRcdGlmKCF6aWxkLnRhZ25hbWUgJiYgIXppbGQuY2xhc3NuYW1lcyl7XG5cdFx0XHRcdFx0XHQrK25vZGVzX2xhZztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdCsrdGV4dF9sYWc7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV3X3BhdGggPSBwYXRoICsgJy8qWycgKyAoTnVtYmVyKGkpICsgMSAtIG5vZGVzX2xhZykgKyAnXSc7XG5cdFx0XHR9XG5cdFx0XHRpZih6aWxkLnR5cGUgJiYgKFxuXHRcdFx0XHRcdHppbGQudHlwZSA9PT0gJ0VMU0UnIFxuXHRcdFx0XHRcdHx8IHppbGQudHlwZSA9PT0gJ0lGJ1xuXHRcdFx0XHRcdHx8IHppbGQudHlwZSA9PT0gJ05FV19JRidcblx0XHRcdFx0XHR8fCB6aWxkLnR5cGUgPT09ICdORVdfRUxTRUlGJ1xuXHRcdFx0XHRcdHx8IHppbGQudHlwZSA9PT0gJ05FV19FTFNFJykpe1xuXHRcdFx0XHRpZih6aWxkLnR5cGUgPT09ICdORVdfSUYnKXtcblx0XHRcdFx0XHR2YXIgdmFybmFtZSA9IHJlZ2lzdGVyX3Zhcm5hbWUoZ2V0X3Zhcm5hbWUoemlsZCksIHZhcm5hbWVfcG9vbCwgaWZfZWxzZV9kZXBzLCBpZl9lbHNlX3RyZWUpO1xuXHRcdFx0XHRcdHJlc2lndGVyZWRfdmFyc1t2YXJuYW1lXSA9IHRydWU7XG5cdFx0XHRcdFx0bm9kZV9wb29sW3Zhcm5hbWVdID0gbmV3X3BhdGg7XG5cdFx0XHRcdFx0dHlwZXNbdmFybmFtZV0gPSBnZXRfcGFydGlhbF9mdW5jKG5vZGUpO1xuXHRcdFx0XHRcdHZhciBteV9pZl9lbHNlX2RlcHMgPSBbLi4uaWZfZWxzZV9kZXBzXTtcblx0XHRcdFx0XHRteV9pZl9lbHNlX2RlcHMucHVzaCh6aWxkLmV4cHIpXG5cdFx0XHRcdFx0Z2V0X3ZhcnMoemlsZCwgbm9kZV9wb29sLCB0ZXh0X3Bvb2wsIHBhdGhfcG9vbCwgbmV3X3BhdGgsIHR5cGVzLCBteV9pZl9lbHNlX2RlcHMsIHZhcm5hbWVfcG9vbCwgaWZfZWxzZV90cmVlKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih6aWxkLnR5cGUgPT09ICdORVdfRUxTRUlGJyB8fCB6aWxkLnR5cGUgPT09ICdORVdfRUxTRScpe1xuXHRcdFx0XHRcdHZhciB2YXJuYW1lID0gZ2V0X3Zhcm5hbWUoemlsZCk7XG5cdFx0XHRcdFx0aWYoIXJlc2lndGVyZWRfdmFyc1t2YXJuYW1lXSl7XG5cdFx0XHRcdFx0XHRyZWdpc3Rlcl92YXJuYW1lKHZhcm5hbWUsIHZhcm5hbWVfcG9vbCwgaWZfZWxzZV9kZXBzLCBpZl9lbHNlX3RyZWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0eXBlc1t2YXJuYW1lXSA9IGdldF9wYXJ0aWFsX2Z1bmMobm9kZSk7XG5cdFx0XHRcdFx0bm9kZV9wb29sW3Zhcm5hbWVdID0gbmV3X3BhdGg7XG5cdFx0XHRcdFx0dmFyIG15X2lmX2Vsc2VfZGVwcyA9IFsuLi5pZl9lbHNlX2RlcHNdO1xuXHRcdFx0XHRcdG15X2lmX2Vsc2VfZGVwcy5wdXNoKHppbGQucmVhbF9leHByKVxuXHRcdFx0XHRcdGdldF92YXJzKHppbGQsIG5vZGVfcG9vbCwgdGV4dF9wb29sLCBwYXRoX3Bvb2wsIG5ld19wYXRoLCB0eXBlcywgbXlfaWZfZWxzZV9kZXBzLCB2YXJuYW1lX3Bvb2wsIGlmX2Vsc2VfdHJlZSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoemlsZC50eXBlID09PSAnRUxTRScpe1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih6aWxkLnR5cGUgPT09ICdJRicpe1xuXHRcdFx0XHRcdHZhciB2YXJuYW1lID0gcmVnaXN0ZXJfdmFybmFtZShnZXRfdmFybmFtZSh6aWxkKSwgdmFybmFtZV9wb29sLCBpZl9lbHNlX2RlcHMsIGlmX2Vsc2VfdHJlZSk7XG5cdFx0XHRcdFx0bm9kZV9wb29sW3Zhcm5hbWVdID0gbmV3X3BhdGg7XG5cdFx0XHRcdFx0dHlwZXNbdmFybmFtZV0gPSB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnSUYnLFxuXHRcdFx0XHRcdFx0c3RydWN0OiB6aWxkLFxuXHRcdFx0XHRcdFx0aWZfcG9vbCxcblx0XHRcdFx0XHRcdGVsc2VfcG9vbCxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGdldF92YXJzKHppbGQsIG5vZGVfcG9vbCwgdGV4dF9wb29sLCBwYXRoX3Bvb2wsIG5ld19wYXRoLCB0eXBlcywgWy4uLmlmX2Vsc2VfZGVwc10sIHZhcm5hbWVfcG9vbCwgaWZfZWxzZV90cmVlKTtcblx0XHRcdFx0XHRpZih6aWxkLmVsc2VfY2hpbGRyZW4pe1xuXHRcdFx0XHRcdFx0Z2V0X3ZhcnMoemlsZC5lbHNlX2NoaWxkcmVuLCBub2RlX3Bvb2wsIHRleHRfcG9vbCwgcGF0aF9wb29sLCBuZXdfcGF0aCwgdHlwZXMsIFsuLi5pZl9lbHNlX2RlcHNdLCB2YXJuYW1lX3Bvb2wsIGlmX2Vsc2VfdHJlZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGdldF92YXJzKHppbGQsIG5vZGVfcG9vbCwgdGV4dF9wb29sLCBwYXRoX3Bvb2wsIG5ld19wYXRoLCB0eXBlcywgaWZfZWxzZV9kZXBzLCB2YXJuYW1lX3Bvb2wsIGlmX2Vsc2VfdHJlZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHppbGQudmFybmFtZSAhPT0gdW5kZWZpbmVkKXtcblx0XHRcdFx0XHR2YXIgdmFybmFtZSA9IHJlZ2lzdGVyX3Zhcm5hbWUoZ2V0X3Zhcm5hbWUoemlsZCksIHZhcm5hbWVfcG9vbCwgaWZfZWxzZV9kZXBzLCBpZl9lbHNlX3RyZWUpO1xuXHRcdFx0XHRcdG5vZGVfcG9vbFt2YXJuYW1lXSA9IG5ld19wYXRoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHppbGQuYXR0clN0eWxlVmFycyl7XG5cdFx0XHRcdFx0Zm9yKGxldCBbdmFybmFtZSwgYXR0cm5hbWVdIG9mIHppbGQuYXR0clN0eWxlVmFycyl7XG5cdFx0XHRcdFx0XHR2YXJuYW1lID0gcmVnaXN0ZXJfdmFybmFtZSh2YXJuYW1lLCB2YXJuYW1lX3Bvb2wsIGlmX2Vsc2VfZGVwcywgaWZfZWxzZV90cmVlKTtcblx0XHRcdFx0XHRcdG5vZGVfcG9vbFt2YXJuYW1lXSA9IG5ld19wYXRoO1xuXHRcdFx0XHRcdFx0bGV0IGFzX3R5cGUgPSBpc19hdHRyKGF0dHJuYW1lKSA/ICdBVFRSJyA6ICdTVFlMRSc7XG5cdFx0XHRcdFx0XHR0eXBlc1t2YXJuYW1lXSA9IHtcblx0XHRcdFx0XHRcdFx0dHlwZTogYXNfdHlwZSxcblx0XHRcdFx0XHRcdFx0bmFtZTogYXR0cm5hbWUsXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdldF92YXJzKHppbGQsIG5vZGVfcG9vbCwgdGV4dF9wb29sLCBwYXRoX3Bvb2wsIG5ld19wYXRoLCB0eXBlcywgWy4uLmlmX2Vsc2VfZGVwc10sIHZhcm5hbWVfcG9vbCwgaWZfZWxzZV90cmVlKTtcblx0XHRcdFx0fSBcblx0XHRcdFx0aWYoemlsZC5xdW90ZWRfc3RyKXtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzdHIhJywgbm9kZS5jaGlsZHJlbltpXS5xdW90ZWRfc3RyKTtcblx0XHRcdFx0XHR6aWxkLnF1b3RlZF9zdHIucmVwbGFjZSh0ZXh0X3Zhcl9yZWdleHAsIChfLCBrZXkpID0+IHtcblx0XHRcdFx0XHRcdHZhciB0ZXh0X3BhdGggPSBwYXRoICsgJy90ZXh0KClbJyArIChOdW1iZXIoaSkgKyAxIC0gdGV4dF9sYWcpICsgJ10nO1xuXHRcdFx0XHRcdFx0dmFybmFtZSA9IHJlZ2lzdGVyX3Zhcm5hbWUoa2V5LCB2YXJuYW1lX3Bvb2wsIGlmX2Vsc2VfZGVwcywgaWZfZWxzZV90cmVlKTtcblx0XHRcdFx0XHRcdGlmKCFwYXRoX3Bvb2xbdGV4dF9wYXRoXSl7XG5cdFx0XHRcdFx0XHRcdHBhdGhfcG9vbFt0ZXh0X3BhdGhdID0gemlsZC5xdW90ZWRfc3RyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGV4dF9wb29sW3Zhcm5hbWVdID0gdGV4dF9wYXRoO1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygndGV4dCBrZXkgZm91bmQnLCBrZXksIHRleHRfcGF0aCk7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSBcblx0XHRcdFx0Z2V0X3ZhcnMoemlsZCwgbm9kZV9wb29sLCB0ZXh0X3Bvb2wsIHBhdGhfcG9vbCwgbmV3X3BhdGgsIHR5cGVzLCBbLi4uaWZfZWxzZV9kZXBzXSwgdmFybmFtZV9wb29sLCBpZl9lbHNlX3RyZWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG52YXIgaW5wdXRfdHlwZXMgPSBuZXcgU2V0KFsndGV4dCcsICdzdWJtaXQnLCAnY2hlY2tib3gnLCAncmFkaW8nXSk7XG5cbnZhciB0b0hUTUwgPSBmdW5jdGlvbihub2RlLCBjb250ZXh0LCBwYXJlbnRfdGFnKXtcblx0dmFyIGluZGVudCA9IGBcbmAgKyBuZXcgQXJyYXkobm9kZS5sZXZlbCkuam9pbignXHQnKTtcblx0Ly9pbmRlbnQgPSAnJzsvLyAhXG5cdHZhciByZXMxID0gW10sIHJlczIgPSBbXSwgYWZ0ZXIgPSAnJztcblx0aWYobm9kZS50eXBlID09PSAnRUxTRScpe1xuXHRcdHJldHVybiAnJztcblx0fVxuXHR2YXIgY2hpbGRzID0gbm9kZS5jaGlsZHJlbjtcblx0aWYobm9kZS50eXBlID09PSAnSUYnKXtcblx0XHRpZighY29udGV4dFtub2RlLnZhcm5hbWVdKXtcblx0XHRcdC8vIFwiRUxTRVwiIHBhcnRcblx0XHRcdGlmKG5vZGUuZWxzZV9jaGlsZHJlbil7XG5cdFx0XHRcdGNoaWxkcyA9IG5vZGUuZWxzZV9jaGlsZHJlbi5jaGlsZHJlbjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoaWxkcyA9IFtdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZihub2RlLnRhZ25hbWUgfHwgbm9kZS5jbGFzc25hbWVzIHx8ICFwYXJlbnRfdGFnKXtcblx0XHQvLyBpdCdzIGEgbm9kZVxuXHRcdHZhciB0YWc7XG5cdFx0aWYobm9kZS50YWduYW1lKXtcblx0XHRcdGlmKGlucHV0X3R5cGVzLmhhcyhub2RlLnRhZ25hbWUpKSB7XG5cdFx0XHRcdG5vZGUuYXNzaWdubWVudHMgPSBub2RlLmFzc2lnbm1lbnRzIHx8IFtdO1xuXHRcdFx0XHRub2RlLmFzc2lnbm1lbnRzLnB1c2goWyd0eXBlJywgbm9kZS50YWduYW1lXSk7XG5cdFx0XHRcdHRhZyA9ICdpbnB1dCc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0YWcgPSBub2RlLnRhZ25hbWU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN3aXRjaChwYXJlbnRfdGFnKXtcblx0XHRcdFx0Y2FzZSAnb2wnOlxuXHRcdFx0XHRjYXNlICd1bCc6XG5cdFx0XHRcdFx0dGFnID0gJ2xpJztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3RyJzpcblx0XHRcdFx0XHR0YWcgPSAndGQnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0YWcgPSAnZGl2Jztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvcihsZXQgY2hpbGQgb2YgY2hpbGRzKXtcblx0XHRcdHJlczEucHVzaCh0b0hUTUwoY2hpbGQsIGNvbnRleHQsIHRhZykpO1xuXHRcdH1cblx0XHRpZihwYXJlbnRfdGFnKXtcblx0XHRcdHJlczIucHVzaChpbmRlbnQgKyAnPCcgKyB0YWcpO1xuXHRcdFx0aWYobm9kZS5jbGFzc25hbWVzICYmIG5vZGUuY2xhc3NuYW1lcy5sZW5ndGggPiAxKXtcblx0XHRcdFx0cmVzMi5wdXNoKCcgY2xhc3M9XCInICsgbm9kZS5jbGFzc25hbWVzLnN1YnN0cigxKS5yZXBsYWNlKC9cXC4vZywgXCIgXCIpICsgJ1wiJyk7XG5cdFx0XHR9XG5cdFx0XHRpZihub2RlLmFzc2lnbm1lbnRzKXtcblx0XHRcdFx0dmFyIHN0eWxlcyA9IFtdO1xuXHRcdFx0XHRmb3IobGV0IGFzcyBvZiBub2RlLmFzc2lnbm1lbnRzKXtcblx0XHRcdFx0XHR2YXIgW2tleSwgdmFsXSA9IGFzcztcblx0XHRcdFx0XHRpZih2YWxbMF0gPT09ICckJyl7XG5cdFx0XHRcdFx0XHQvLyBpdHMgdmFyaWFibGUsIGxldHMgdGFrZSBpdHMgdmFsIGZyb20gY29udGV4dFxuXHRcdFx0XHRcdFx0dmFyIHJlYWxfa2V5ID0gdmFsLmxlbmd0aCA9PT0gMSA/IGtleSA6IHZhbC5zdWJzdHIoMSk7XG5cdFx0XHRcdFx0XHR2YWwgPSBjb250ZXh0W3JlYWxfa2V5XSAhPT0gdW5kZWZpbmVkID8gY29udGV4dFtyZWFsX2tleV0gOiAnJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoaXNfYXR0cihrZXkpKXtcblx0XHRcdFx0XHRcdHJlczIucHVzaCgnICcgKyBrZXkgKyAnPVwiJyArIHZhbCArICdcIicpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdHlsZXMucHVzaChrZXkgKyAnOiAnICsgdmFsICsgJzsnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoc3R5bGVzLmxlbmd0aCl7XG5cdFx0XHRcdFx0cmVzMi5wdXNoKCcgc3R5bGU9XCInICsgc3R5bGVzLmpvaW4oJycpICsgJ1wiJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJlczIucHVzaCgnPicpO1xuXHRcdFx0aWYobm9kZS52YXJuYW1lICE9PSB1bmRlZmluZWQgJiYgIW5vZGUudHlwZSl7XG5cdFx0XHRcdHZhciBrZXkgPSBnZXRfdmFybmFtZShub2RlKTtcblx0XHRcdFx0cmVzMi5wdXNoKGluZGVudCArICdcdCcgKyAoY29udGV4dFtrZXldICE9PSB1bmRlZmluZWQgPyBjb250ZXh0W2tleV0gOiAnJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzMi5wdXNoKHJlczEuam9pbignICcpKTtcblx0XHRcdH1cblx0XHRcdHJlczIucHVzaChpbmRlbnQgKyAnPC8nICsgdGFnICsgJz4nKTtcblx0XHRcdHJldHVybiByZXMyLmpvaW4oJycpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBpdHMgdmFyIG9mIHRleHQgbm9kZVxuXHRcdGlmKG5vZGUucXVvdGVkX3N0cil7XG5cdFx0XHRyZXR1cm4gaW5kZW50ICsgbm9kZS5xdW90ZWRfc3RyLnJlcGxhY2UodGV4dF92YXJfcmVnZXhwLCBmdW5jdGlvbihfLCBrZXkpe1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdGb3VuZCEnLCBrZXksIGNvbnRleHRba2V5XSk7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0W2tleV0gIT09IHVuZGVmaW5lZCA/IGNvbnRleHRba2V5XSA6ICcnO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmKG5vZGUudmFyaWFibGUpe1xuXHRcdFx0cmV0dXJuIGluZGVudCArIG5vZGUudmFyaWFibGU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXMxLmpvaW4oJyAnKTtcbn1cblxudmFyIGdldHZhciA9IChrZXkpID0+IHtcblx0cmV0dXJuIFwiJyArIChjdHguXCIgKyBrZXkgKyBcIiB8fCAnJykgKyAnXCI7XG59XG5cbnZhciBnZXRfY2hpbGRyZW5faHRtbCA9IChjaGlsZHMsIHBhcmVudF90YWcsIGlmX3N0YWNrLCBwcCkgPT4ge1xuXHR2YXIgcmVzMSA9IFtdO1xuXHRmb3IobGV0IGNoaWxkIG9mIGNoaWxkcyl7XG5cdFx0cmVzMS5wdXNoKHRvRnVuYyhjaGlsZCwgcGFyZW50X3RhZywgaWZfc3RhY2ssIHBwKSk7XG5cdH1cblx0cmV0dXJuIHJlczEuam9pbignJyk7XG59XG5cbnZhciB0b0Z1bmMgPSBmdW5jdGlvbihub2RlLCBwYXJlbnRfdGFnLCBpZl9zdGFjayA9IHt9LCBwYXJ0aWFsX3Bvb2wgPSBmYWxzZSl7XG5cdG5vZGUucGFyZW50ID0gcGFyZW50O1xuXHR2YXIgY2hpbGRzID0gbm9kZS5jaGlsZHJlbjtcblx0dmFyIGluZGVudCA9IGAgJyArIFxuJ2AgKyBuZXcgQXJyYXkobm9kZS5sZXZlbCkuam9pbignXHQnKTtcblx0Ly9pbmRlbnQgPSAnJzsvLyAhXG5cdHZhciByZXMxID0gW10sIHJlczIgPSBbXSwgYWZ0ZXIgPSAnJywgcmVzX2ZpbmFsO1xuXHR2YXIgY2hpbGRzX2h0bWwgPSAnJztcblx0dmFyIG5lZWRfcGFydGlhbF9mdW5jID0gZmFsc2U7XG5cdHZhciBwcCA9IGZhbHNlO1xuXHRmb3IobGV0IGNoaWxkIG9mIGNoaWxkcyl7XG5cdFx0aWYoaXNfbmV3X2lmKGNoaWxkKSl7XG5cdFx0XHRuZWVkX3BhcnRpYWxfZnVuYyA9IHRydWU7XG5cdFx0XHRwcCA9IFtdO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cdGlmKG5vZGUudHlwZSA9PT0gJ0VMU0UnIHx8IGlzX25ld19pZihub2RlKSl7XG5cdFx0c3dpdGNoKG5vZGUudHlwZSl7XG5cdFx0XHRjYXNlICdFTFNFJzpcblx0XHRcdFx0cmVzMS5wdXNoKGluZGVudCArIFwiJyArICghY3R4LlwiICsgbm9kZS52YXJuYW1lICsgXCIgPyAoJ1wiKTtcblx0XHRcdFx0Y2hpbGRzX2h0bWwgPSBnZXRfY2hpbGRyZW5faHRtbChjaGlsZHMsIHBhcmVudF90YWcsIGlmX3N0YWNrLCBwcCk7XG5cdFx0XHRcdHJlczEucHVzaChjaGlsZHNfaHRtbCk7XG5cdFx0XHRcdHJlczEucHVzaChpbmRlbnQgKyBcIicpIDogJycgKSArICdcIik7XG5cdFx0XHRcdHJlczEucHVzaChub2RlLmFmdGVyKTtcblx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnTkVXX0lGJzpcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnSUYgU1RBQ0snLCBpZl9zdGFjayk7XG5cdFx0XHRcdGlmX3N0YWNrW25vZGUubGV2ZWxdID0gW25vZGUudmFybmFtZSwgbm9kZS5leHByLCBbXV07XG5cdFx0XHRcdHJlczEucHVzaChpbmRlbnQgKyBcIicgKyAoXCIgKyBub2RlLmV4cHIgKyBcIiA/ICgnXCIpO1xuXHRcdFx0XHRjaGlsZHNfaHRtbCA9IGdldF9jaGlsZHJlbl9odG1sKGNoaWxkcywgcGFyZW50X3RhZywgaWZfc3RhY2ssIHBwKTtcblx0XHRcdFx0cmVzMS5wdXNoKGNoaWxkc19odG1sKTtcblx0XHRcdFx0cmVzMS5wdXNoKGluZGVudCArIFwiJykgOiAnJyApICsgJ1wiKTtcblx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnTkVXX0VMU0VJRic6XG5cdFx0XHRcdHZhciBbdmFybmFtZSwgZXhwciwgZWxpZnNdID0gaWZfc3RhY2tbbm9kZS5sZXZlbF07XG5cdFx0XHRcdGlmX3N0YWNrW25vZGUubGV2ZWxdWzJdLnB1c2gobm9kZS5leHByKTtcblx0XHRcdFx0bm9kZS5yZWFsX2V4cHIgPSBub2RlLmV4cHIgKyBcIiAmJiAhKFwiICsgZXhwciArIFwiKVwiO1xuXHRcdFx0XHRyZXMxLnB1c2goaW5kZW50ICsgXCInICsgKChcIiArIG5vZGUuZXhwciArIFwiICYmICEoXCIgKyBleHByICsgXCIpKSA/ICgnXCIpO1xuXHRcdFx0XHRjaGlsZHNfaHRtbCA9IGdldF9jaGlsZHJlbl9odG1sKGNoaWxkcywgcGFyZW50X3RhZywgaWZfc3RhY2ssIHBwKTtcblx0XHRcdFx0cmVzMS5wdXNoKGNoaWxkc19odG1sKTtcblx0XHRcdFx0cmVzMS5wdXNoKGluZGVudCArIFwiJykgOiAnJyApICsgJ1wiKTtcblx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnTkVXX0VMU0UnOlxuXHRcdFx0XHR2YXIgW3Zhcm5hbWUsIGV4cHIsIGVsaWZzXSA9IGlmX3N0YWNrW25vZGUubGV2ZWxdO1xuXHRcdFx0XHRub2RlLnZhcm5hbWUgPSB2YXJuYW1lO1xuXHRcdFx0XHRub2RlLnJlYWxfZXhwciA9IFwiIShcIiArIGV4cHIgKyBcIlwiICsgKGVsaWZzLmxlbmd0aCA/ICcgfHwgJyArIGVsaWZzLmpvaW4oJyB8fCAnKSA6ICcnKSArIFwiKVwiO1xuXHRcdFx0XHRyZXMxLnB1c2goaW5kZW50ICsgXCInICsgKCEoXCIgKyBleHByICsgXCJcIiArIChlbGlmcy5sZW5ndGggPyAnIHx8ICcgKyBlbGlmcy5qb2luKCcgfHwgJykgOiAnJykgKyBcIikgPyAoJ1wiKTtcblx0XHRcdFx0Y2hpbGRzX2h0bWwgPSBnZXRfY2hpbGRyZW5faHRtbChjaGlsZHMsIHBhcmVudF90YWcsIGlmX3N0YWNrLCBwcCk7XG5cdFx0XHRcdHJlczEucHVzaChjaGlsZHNfaHRtbCk7XG5cdFx0XHRcdHJlczEucHVzaChpbmRlbnQgKyBcIicpIDogJycgKSArICdcIik7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH0gZWxzZSBpZiAobm9kZS50YWduYW1lIHx8IG5vZGUuY2xhc3NuYW1lcyB8fCAhcGFyZW50X3RhZyB8fCBub2RlLnR5cGUgPT09ICdJRicpe1xuXHRcdC8vIGl0J3MgYSBub2RlXG5cdFx0dmFyIHRhZztcblx0XHRpZihub2RlLnRhZ25hbWUpe1xuXHRcdFx0aWYoaW5wdXRfdHlwZXMuaGFzKG5vZGUudGFnbmFtZSkpIHtcblx0XHRcdFx0bm9kZS5hc3NpZ25tZW50cyA9IG5vZGUuYXNzaWdubWVudHMgfHwgW107XG5cdFx0XHRcdG5vZGUuYXNzaWdubWVudHMucHVzaChbJ3R5cGUnLCBub2RlLnRhZ25hbWVdKTtcblx0XHRcdFx0dGFnID0gJ2lucHV0Jztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRhZyA9IG5vZGUudGFnbmFtZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3dpdGNoKHBhcmVudF90YWcpe1xuXHRcdFx0XHRjYXNlICdvbCc6XG5cdFx0XHRcdGNhc2UgJ3VsJzpcblx0XHRcdFx0XHR0YWcgPSAnbGknO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAndHInOlxuXHRcdFx0XHRcdHRhZyA9ICd0ZCc7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRhZyA9ICdkaXYnO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYobm9kZS50eXBlID09PSAnSUYnKXtcblx0XHRcdC8vY2hpbGRzID0gY2hpbGRzLmNvbmNhdChub2RlLmVsc2VfY2hpbGRyZW4uY2hpbGRyZW4pO1xuXHRcdFx0Ly9jb25zb2xlLmxvZygnSUYhJywgbm9kZSk7XG5cdFx0XHRpZihub2RlLmVsc2VfY2hpbGRyZW4pe1xuXHRcdFx0XHRub2RlLmVsc2VfY2hpbGRyZW4udmFybmFtZSA9IG5vZGUudmFybmFtZTtcblx0XHRcdH1cblx0XHRcdHJlczEucHVzaChpbmRlbnQgKyBcIicgKyAoY3R4LlwiICsgbm9kZS52YXJuYW1lICsgXCIgPyAoJ1wiKTtcblx0XHRcdGZvcihsZXQgY2hpbGQgb2YgY2hpbGRzKXtcblx0XHRcdFx0cmVzMS5wdXNoKHRvRnVuYyhjaGlsZCwgdGFnLCBpZl9zdGFjaywgcHApKTtcblx0XHRcdH1cblx0XHRcdHJlczEucHVzaChpbmRlbnQgKyBcIicpIDogJycgKSArICdcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNoaWxkc19odG1sID0gZ2V0X2NoaWxkcmVuX2h0bWwoY2hpbGRzLCB0YWcsIGlmX3N0YWNrLCBwcCk7XG5cdFx0XHRyZXMxLnB1c2goY2hpbGRzX2h0bWwpO1xuXHRcdH1cblx0XHRpZihwYXJlbnRfdGFnKXtcblx0XHRcdHJlczIucHVzaChpbmRlbnQgKyAnPCcgKyB0YWcpO1xuXHRcdFx0aWYobm9kZS5jbGFzc25hbWVzICYmIG5vZGUuY2xhc3NuYW1lcy5sZW5ndGggPiAxKXtcblx0XHRcdFx0cmVzMi5wdXNoKCcgY2xhc3M9XCInICsgbm9kZS5jbGFzc25hbWVzLnN1YnN0cigxKS5yZXBsYWNlKC9cXC4vZywgXCIgXCIpICsgJ1wiJyk7XG5cdFx0XHR9XG5cdFx0XHRpZihub2RlLmFzc2lnbm1lbnRzKXtcblx0XHRcdFx0dmFyIHN0eWxlcyA9IFtdO1xuXHRcdFx0XHRmb3IobGV0IGFzcyBvZiBub2RlLmFzc2lnbm1lbnRzKXtcblx0XHRcdFx0XHR2YXIgW2tleSwgdmFsXSA9IGFzcztcblx0XHRcdFx0XHRpZih2YWxbMF0gPT09ICckJyl7XG5cdFx0XHRcdFx0XHQvLyBpdHMgdmFyaWFibGUsIGxldHMgdGFrZSBpdHMgdmFsIGZyb20gY29udGV4dFxuXHRcdFx0XHRcdFx0dmFyIHJlYWxfa2V5ID0gdmFsLmxlbmd0aCA9PT0gMSA/IGtleSA6IHZhbC5zdWJzdHIoMSk7XG5cdFx0XHRcdFx0XHR2YWwgPSBnZXR2YXIocmVhbF9rZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihpc19hdHRyKGtleSkpe1xuXHRcdFx0XHRcdFx0cmVzMi5wdXNoKCcgJyArIGtleSArICc9XCInICsgdmFsICsgJ1wiJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHN0eWxlcy5wdXNoKGtleSArICc6ICcgKyB2YWwgKyAnOycpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZihzdHlsZXMubGVuZ3RoKXtcblx0XHRcdFx0XHRyZXMyLnB1c2goJyBzdHlsZT1cIicgKyBzdHlsZXMuam9pbignJykgKyAnXCInKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVzMi5wdXNoKCc+Jyk7XG5cdFx0XHRpZihub2RlLnZhcm5hbWUgIT09IHVuZGVmaW5lZCAmJiAhbm9kZS50eXBlKXtcblx0XHRcdFx0dmFyIGtleSA9IGdldF92YXJuYW1lKG5vZGUpO1xuXHRcdFx0XHRyZXMyLnB1c2goaW5kZW50ICsgZ2V0dmFyKGtleSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzMi5wdXNoKHJlczEuam9pbignICcpKTtcblx0XHRcdH1cblx0XHRcdGlmKG5vZGUudHlwZSA9PT0gJ0lGJyAmJiBub2RlLmVsc2VfY2hpbGRyZW4pe1xuXHRcdFx0XHRub2RlLmVsc2VfY2hpbGRyZW4uYWZ0ZXIgPSBpbmRlbnQgKyAnPC8nICsgdGFnICsgJz4nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzMi5wdXNoKGluZGVudCArICc8LycgKyB0YWcgKyAnPicpO1xuXHRcdFx0fVxuXHRcdFx0cmVzX2ZpbmFsID0gcmVzMi5qb2luKCcnKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Ly8gaXRzIHZhciBvZiB0ZXh0IG5vZGVcblx0XHRpZihub2RlLnF1b3RlZF9zdHIpe1xuXHRcdFx0cmVzX2ZpbmFsID0gaW5kZW50ICsgbm9kZS5xdW90ZWRfc3RyLnJlcGxhY2UodGV4dF92YXJfcmVnZXhwLCBmdW5jdGlvbihfLCBrZXkpe1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdGb3VuZCEnLCBrZXksIGNvbnRleHRba2V5XSk7XG5cdFx0XHRcdHJldHVybiBcIicgKyBjdHguXCIgKyBrZXkgKyBcIiArICdcIjtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZihub2RlLnZhcmlhYmxlKXtcblx0XHRcdHJlc19maW5hbCA9IGluZGVudCArIG5vZGUudmFyaWFibGU7XG5cdFx0fVxuXHR9XG5cdHJlc19maW5hbCA9IHJlc19maW5hbCB8fCByZXMxLmpvaW4oJycpO1xuXHRpZihuZWVkX3BhcnRpYWxfZnVuYyl7XG5cdFx0aWYocGFydGlhbF9wb29sKXtcblx0XHRcdHBhcnRpYWxfcG9vbC5wdXNoKG5vZGUpO1xuXHRcdFx0aWYocHApe1xuXHRcdFx0XHRmb3IobGV0IG5kIG9mIHBwKXtcblx0XHRcdFx0XHRwYXJ0aWFsX3Bvb2wucHVzaChuZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bm9kZS5wYXJ0aWFsX2Z1bmMgPSBjcmVhdGVfZnVuYyhjaGlsZHNfaHRtbCk7XG5cdFx0XHRpZihwcCl7XG5cdFx0XHRcdGZvcihsZXQgbmQgb2YgcHApe1xuXHRcdFx0XHRcdG5kLnBhcnRpYWxfZnVuYyA9IG5vZGUucGFydGlhbF9mdW5jO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXNfZmluYWw7XG59XG5cbk96ZW5mYW50LnByb3RvdHlwZS50b0hUTUwgPSBmdW5jdGlvbihjb250ZXh0KXtcblx0aWYoY29udGV4dCl7XG5cdFx0dGhpcy5zdGF0ZSA9IGNvbnRleHQ7XG5cdH0gZWxzZSB7XG5cdFx0Y29udGV4dCA9IHt9O1xuXHR9XG5cdGlmKCF0aGlzLnN0cnVjdC5mdW5jKXtcblx0XHR2YXIgZnVuY19ib2R5ID0gXCIgcmV0dXJuICdcIiArIHRvRnVuYyh7Y2hpbGRyZW46IHRoaXMuc3RydWN0LnNlbWFudGljcywgcm9vdDogdHJ1ZX0pICsgXCInO1wiO1xuXHRcdHRoaXMuc3RydWN0LmZ1bmMgPSBuZXcgRnVuY3Rpb24oJ2N0eCcsIGZ1bmNfYm9keSk7XG5cdH1cblx0dmFyIGEgPSB0aGlzLnN0cnVjdC5mdW5jKGNvbnRleHQpO1xuXHQvL3ZhciBhID0gdG9IVE1MKHtjaGlsZHJlbjogdGhpcy5zdHJ1Y3Quc2VtYW50aWNzfSwgY29udGV4dCA9IGNvbnRleHQpO1xuXHRyZXR1cm4gYTtcbn1cblxuT3plbmZhbnQucHJvdG90eXBlLnNlYXJjaEJ5UGF0aCA9IGZ1bmN0aW9uKHBhdGgpe1xuXHRyZXR1cm4gT3plbmZhbnQueHBPbmUocGF0aCwgdGhpcy5yb290KTtcbn1cblxuT3plbmZhbnQucHJvdG90eXBlLmdldElmRWxzZVZhcnNJbmRleCA9IGZ1bmN0aW9uKCl7XG5cdHRoaXMuaWZfZWxzZV92YXJzID0ge307XG5cdGZvcih2YXIgb25lIGluIHRoaXMudmFyX3R5cGVzKXtcblx0XHRpZighKHRoaXMudmFyX3R5cGVzW29uZV0gaW5zdGFuY2VvZiBPYmplY3QpKSBjb250aW51ZTtcblx0XHRmb3IodmFyIHZhcm5hbWUgaW4gdGhpcy52YXJfdHlwZXNbb25lXS5pZl9wb29sKXtcblx0XHRcdHZhciBwYXRoID0gdGhpcy52YXJfdHlwZXNbb25lXS5pZl9wb29sW3Zhcm5hbWVdO1xuXHRcdFx0aW5pdF9pZl9lbXB0eSh0aGlzLmlmX2Vsc2VfdmFycywgdmFybmFtZSwge30sIG9uZSwgdHJ1ZSk7XG5cdFx0fVxuXHRcdGZvcih2YXIgdmFybmFtZSBpbiB0aGlzLnZhcl90eXBlc1tvbmVdLmVsc2VfcG9vbCl7XG5cdFx0XHR2YXIgcGF0aCA9IHRoaXMudmFyX3R5cGVzW29uZV0uaWZfcG9vbFt2YXJuYW1lXTtcblx0XHRcdGluaXRfaWZfZW1wdHkodGhpcy5pZl9lbHNlX3ZhcnMsIHZhcm5hbWUsIHt9LCBvbmUsIGZhbHNlKTtcblx0XHR9XG5cdFx0Zm9yKHZhciB2YXJuYW1lIGluIHRoaXMudmFyX3R5cGVzW29uZV0ubXlfcG9vbCl7XG5cdFx0XHR2YXIgcGF0aCA9IHRoaXMudmFyX3R5cGVzW29uZV0ubXlfcG9vbFt2YXJuYW1lXTtcblx0XHRcdHZhciBleHByID0gdGhpcy52YXJfdHlwZXNbb25lXS5zdHJ1Y3QucmVhbF9leHByIHx8IHRoaXMudmFyX3R5cGVzW29uZV0uc3RydWN0LmV4cHI7XG5cdFx0XHRpbml0X2lmX2VtcHR5KHRoaXMuaWZfZWxzZV92YXJzLCB2YXJuYW1lLCB7fSwgb25lLCBleHByKTtcblx0XHR9XG5cdH1cbn1cblxuT3plbmZhbnQucHJvdG90eXBlLnVwZGF0ZUJpbmRpbmdzID0gZnVuY3Rpb24oKXtcblx0dGhpcy5iaW5kaW5ncyA9IHt9O1xuXHRmb3IobGV0IHZhcm5hbWUgaW4gdGhpcy5ub2RlX3ZhcnNfcGF0aHMpe1xuXHRcdGlmKHRoaXMuaWZfZWxzZV92YXJzW3Zhcm5hbWVdKXtcblx0XHRcdHZhciBicmVha2VyID0gZmFsc2U7XG5cdFx0XHRmb3IobGV0IHZuIGluIHRoaXMuaWZfZWxzZV92YXJzW3Zhcm5hbWVdKXtcblx0XHRcdFx0dmFyIGV4cGVjdGVkX3ZhbCA9IHRoaXMuaWZfZWxzZV92YXJzW3Zhcm5hbWVdW3ZuXTtcblx0XHRcdFx0dmFyIHJlYWxfdmFsID0gdGhpcy5zdGF0ZVt2bl07XG5cdFx0XHRcdC8vIFhPUlxuXHRcdFx0XHRpZighKChleHBlY3RlZF92YWwgJiYgcmVhbF92YWwpIHx8ICEoZXhwZWN0ZWRfdmFsIHx8IHJlYWxfdmFsKSkpe1xuXHRcdFx0XHRcdGJyZWFrZXIgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZihicmVha2VyKSB7IFxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5iaW5kaW5nc1t2YXJuYW1lXSA9IHRoaXMuc2VhcmNoQnlQYXRoKHRoaXMubm9kZV92YXJzX3BhdGhzW3Zhcm5hbWVdKTtcblx0XHRpZighdGhpcy5iaW5kaW5nc1t2YXJuYW1lXSl7XG5cdFx0XHQvL2NvbnNvbGUud2FybignTm8gbm9kZSBmb3VuZCBmb3IgdmFyJywgdmFybmFtZSwgJ2luIHBhdGg6JywgdGhpcy5ub2RlX3ZhcnNfcGF0aHNbdmFybmFtZV0sICdpbiBjb250ZXh0JywgdGhpcy5yb290LCAnLCBjb250ZXh0JywgdGhpcy5zdGF0ZSk7XG5cdFx0fVxuXHR9XG5cdGZvcihsZXQgdmFybmFtZSBpbiB0aGlzLnRleHRfdmFyc19wYXRocyl7XG5cdFx0dGhpcy5iaW5kaW5nc1t2YXJuYW1lXSA9IHRoaXMuc2VhcmNoQnlQYXRoKHRoaXMudGV4dF92YXJzX3BhdGhzW3Zhcm5hbWVdKTtcblx0XHRpZighdGhpcy5iaW5kaW5nc1t2YXJuYW1lXSl7XG5cdFx0XHRjb25zb2xlLndhcm4oJ05vIG5vZGUgZm91bmQgZm9yIHBhdGg6JywgdGhpcy50ZXh0X3ZhcnNfcGF0aHNbdmFybmFtZV0sICdpbiBjb250ZXh0JywgdGhpcy5yb290KTtcblx0XHR9XG5cdH1cbn1cbk96ZW5mYW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihub2RlLCBjb250ZXh0ID0gZmFsc2Upe1xuXHR0aGlzLnJvb3QgPSBub2RlO1xuXHRpZihjb250ZXh0KXtcblx0XHR0aGlzLnN0YXRlID0gY29udGV4dDtcblx0fVxuXHRub2RlLmlubmVySFRNTCA9IHRoaXMudG9IVE1MKHRoaXMuc3RhdGUpO1xuXHR0aGlzLnVwZGF0ZUJpbmRpbmdzKCk7XG59XG5PemVuZmFudC5wcm90b3R5cGUuZ2V0VG9rZW5TdHJ1Y3QgPSBmdW5jdGlvbihub2RlLCBsZXZlbCA9IDEpe1xuXHR2YXIgc3RhcnQgPSAhbm9kZTtcblx0aWYoIW5vZGUpe1xuXHRcdG5vZGUgPSB0aGlzLnN0cnVjdC5zeW50YXg7XG5cdH1cblx0dmFyIGFyciA9IFtuZXcgQXJyYXkobGV2ZWwpLmpvaW4oJ1x0JykgKyBub2RlLnR5cGVdO1xuXHRpZihub2RlLmNoaWxkcmVuKXtcblx0XHRmb3IodmFyIGNoaWxkIG9mIG5vZGUuY2hpbGRyZW4pe1xuXHRcdFx0YXJyLnB1c2godGhpcy5nZXRUb2tlblN0cnVjdChjaGlsZCwgbGV2ZWwgKyAxKSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiAoc3RhcnQgPyBgXG5gIDogJycpICsgYXJyLmpvaW4oYFxuYCk7XG59XG5cbk96ZW5mYW50LnByb3RvdHlwZS5nZXRIVE1MID0gZnVuY3Rpb24oY29udGV4dCA9IGZhbHNlKXtcblx0aWYoY29udGV4dCkgeyBcblx0XHR0aGlzLnN0YXRlID0gY29udGV4dDtcblx0fVxuXHRyZXR1cm4gdGhpcy50b0hUTUwodGhpcy5zdGF0ZSk7XG59XG5PemVuZmFudC5wcm90b3R5cGUuc2V0Um9vdCA9IGZ1bmN0aW9uKG5vZGUpe1xuXHR0aGlzLnJvb3QgPSBub2RlO1xuXHRyZXR1cm4gdGhpcztcbn1cbk96ZW5mYW50LnByb3RvdHlwZS5fc2V0VmFyVmFsID0gZnVuY3Rpb24oa2V5LCB2YWwpe1xuXHRpZih0aGlzLmlmX2Vsc2VfdmFyc1trZXldKXtcblx0XHQvL2NvbnNvbGUubG9nKCdpZmVsc2V2YXInLCBrZXksIHRoaXMuaWZfZWxzZV92YXJzW2tleV0pO1xuXHRcdGZvcih2YXIgdmFybmFtZSBpbiB0aGlzLmlmX2Vsc2VfdmFyc1trZXldKXtcblx0XHRcdHZhciBmbGFnID0gdGhpcy5pZl9lbHNlX3ZhcnNba2V5XVt2YXJuYW1lXSA/IHRoaXMuc3RhdGVbdmFybmFtZV0gOiAhdGhpcy5zdGF0ZVt2YXJuYW1lXTtcblx0XHRcdGlmKCFmbGFnKSB7XG5cdFx0XHRcdC8vIHRoaXMgdmFyIGlzIGluIGluYWN0aXZlIGJsb2NrXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aWYodmFsIGluc3RhbmNlb2YgT2JqZWN0KSByZXR1cm47XG5cdHRoaXMuYmluZGluZ3Nba2V5XS50ZXh0Q29udGVudCA9IHZhbDtcbn1cbk96ZW5mYW50LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbCl7XG5cdGlmKHRoaXMuc3RhdGVba2V5XSA9PT0gdmFsKXtcblx0XHRyZXR1cm47IFxuXHR9IFxuXHR0aGlzLnN0YXRlW2tleV0gPSB2YWw7XG5cdGlmKHRoaXMudmFybmFtZV9wb29sLnZhcl9hbGlhc2VzW2tleV0pe1xuXHRcdGZvcihsZXQgayBvZiB0aGlzLnZhcm5hbWVfcG9vbC52YXJfYWxpYXNlc1trZXldKXtcblx0XHRcdHRoaXMuc2V0KGssIHZhbCk7XG5cdFx0fVxuXHR9XG5cdGlmKCF0aGlzLmJpbmRpbmdzW2tleV0pe1xuXHRcdHJldHVybjtcblx0fVxuXHRpZighdGhpcy5yb290KSByZXR1cm47XG5cdC8vY29uc29sZS5sb2coJ3BhdGgnLCB0aGlzLnRleHRfdmFyc19wYXRoc1trZXldLCAndmFycycsIHRoaXMubm9kZXNfdmFycyk7XG5cdGlmKHRoaXMuaWZfZWxzZV90cmVlLnZhcl9mdW5jc1trZXldKXtcblx0XHQvL2NvbnNvbGUubG9nKCdzaG91bGQgY2hlY2sgdGhlIGZ1bmMgZmlyc3QhJywga2V5KTtcblx0XHRpZighdGhpcy5pZl9lbHNlX3RyZWUudmFyX2Z1bmNzW2tleV0odGhpcy5zdGF0ZSkpe1xuXHRcdFx0Ly8gbm8gbmVlZCB0byB1cGRhdGUgYW55dGhpbmcgaW4gRE9NIC0gaXQncyBub3QgYW4gYWN0aXZlIGJyYW5jaFxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXHRpZih0aGlzLm5vZGVzX3ZhcnNbdGhpcy50ZXh0X3ZhcnNfcGF0aHNba2V5XV0pe1xuXHRcdHZhciB0ZW1wbGF0ZSA9IHRoaXMubm9kZXNfdmFyc1t0aGlzLnRleHRfdmFyc19wYXRoc1trZXldXTtcblx0XHQvL2NvbnNvbGUubG9nKCd0ZW1wbGF0ZSEnLCB0ZW1wbGF0ZSk7XG5cdFx0dmFyIG5ld19zdHIgPSB0ZW1wbGF0ZS5yZXBsYWNlKHRleHRfdmFyX3JlZ2V4cCwgKF8sIGtleSkgPT4ge1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhdGVba2V5XTtcblx0XHR9KTtcblx0XHR0aGlzLl9zZXRWYXJWYWwoa2V5LCBuZXdfc3RyKTtcblx0XHR0aGlzLmJpbmRpbmdzW2tleV0uaW5uZXJIVE1MID0gbmV3X3N0cjtcblx0fSBlbHNlIHtcblx0XHRpZih0aGlzLnZhcl90eXBlc1trZXldKXtcblx0XHRcdHN3aXRjaCh0aGlzLnZhcl90eXBlc1trZXldLnR5cGUpe1xuXHRcdFx0XHRjYXNlICdJRic6XG5cdFx0XHRcdFx0dmFyIHZhbDtcblx0XHRcdFx0XHRpZih2YWwpe1xuXHRcdFx0XHRcdFx0dmFyIHN0cnVjdCA9IHRoaXMudmFyX3R5cGVzW2tleV0uc3RydWN0LmNoaWxkcmVuO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZih0aGlzLnZhcl90eXBlc1trZXldLnN0cnVjdC5lbHNlX2NoaWxkcmVuKXtcblx0XHRcdFx0XHRcdFx0dmFyIHN0cnVjdCA9IHRoaXMudmFyX3R5cGVzW2tleV0uc3RydWN0LmVsc2VfY2hpbGRyZW4uY2hpbGRyZW47XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnVwZGF0ZUJpbmRpbmdzKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIGh0bWwgPSB0b0hUTUwoe2NoaWxkcmVuOiBzdHJ1Y3R9LCB0aGlzLnN0YXRlKTtcblx0XHRcdFx0XHR0aGlzLmJpbmRpbmdzW2tleV0uaW5uZXJIVE1MID0gaHRtbDtcblx0XHRcdFx0XHQvLyBAdG9kbyBzaG91bGQgYmUgb3B0aW1pemVkISB1cGRhdGUgYmluZGluZ3Mgb25seSBmb3IgZGVwZW5kZW50IHZhcnMhXG5cdFx0XHRcdFx0dGhpcy51cGRhdGVCaW5kaW5ncygpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnQVRUUic6XG5cdFx0XHRcdFx0dGhpcy5iaW5kaW5nc1trZXldLnNldEF0dHJpYnV0ZSh0aGlzLnZhcl90eXBlc1trZXldLm5hbWUsIHZhbCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdTVFlMRSc6XG5cdFx0XHRcdFx0dGhpcy5iaW5kaW5nc1trZXldLnN0eWxlW3RoaXMudmFyX3R5cGVzW2tleV0ubmFtZV0gPSB2YWw7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHZhciBmdW5jO1xuXHRcdFx0XHRcdGlmKHRoaXMudmFyX3R5cGVzW2tleV0gPT09ICdVU0VfUk9PVF9GVU5DJyl7XG5cdFx0XHRcdFx0XHRmdW5jID0gdGhpcy5zdHJ1Y3QuZnVuYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYodGhpcy52YXJfdHlwZXNba2V5XSBpbnN0YW5jZW9mIEZ1bmN0aW9uKXtcblx0XHRcdFx0XHRcdGZ1bmMgPSB0aGlzLnZhcl90eXBlc1trZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgaHRtbCA9IGZ1bmModGhpcy5zdGF0ZSk7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncnVuIGZ1bmMnLCBmdW5jLCAnb2YnLCBrZXksICd2YWwnLCB2YWwsIC8qJ3dpdGggc3RhdGUnLCBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlKSwqLyAnaWZfZWxzZV9kZXBzX19fX2h0bWwnLCBodG1sLCAndG8nLCB0aGlzKTtcblx0XHRcdFx0XHR0aGlzLmJpbmRpbmdzW2tleV0uaW5uZXJIVE1MID0gaHRtbDtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZUJpbmRpbmdzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9zZXRWYXJWYWwoa2V5LCB2YWwpO1xuXHRcdH1cblx0fVxufVxuT3plbmZhbnQueHBPbmUgPSAocGF0aCwgbm9kZSA9IGRvY3VtZW50KSA9PiB7XG5cdC8vY29uc29sZS5sb2coJ05PREUnLCBub2RlKTtcblx0cmV0dXJuIGRvY3VtZW50LmV2YWx1YXRlKHBhdGgsIG5vZGUsIG51bGwsIFhQYXRoUmVzdWx0LkFOWV9UWVBFLCBudWxsKS5pdGVyYXRlTmV4dCgpOyBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPemVuZmFudDtcblxuIl19
